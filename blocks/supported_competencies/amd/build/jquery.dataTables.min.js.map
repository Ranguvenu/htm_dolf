{"version":3,"file":"jquery.dataTables.min.js","sources":["../src/jquery.dataTables.js"],"sourcesContent":["/*! DataTables 1.11.5\r\n * Â©2008-2021 SpryMedia Ltd - datatables.net/license\r\n */\r\n\r\n/**\r\n * @summary     DataTables\r\n * @description Paginate, search and order HTML tables\r\n * @version     1.11.5\r\n * @file        jquery.dataTables.js\r\n * @author      SpryMedia Ltd\r\n * @contact     www.datatables.net\r\n * @copyright   Copyright 2008-2021 SpryMedia Ltd.\r\n *\r\n * This source file is free software, available under the following license:\r\n *   MIT license - http://datatables.net/license\r\n *\r\n * This source file is distributed in the hope that it will be useful, but\r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\r\n *\r\n * For details please refer to: http://www.datatables.net\r\n */\r\n\r\n/*jslint evil: true, undef: true, browser: true */\r\n/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/\r\n\r\n(function( factory ) {\r\n    \"use strict\";\r\n\r\n    if ( typeof define === 'function' && define.amd ) {\r\n        // AMD\r\n        define( ['jquery'], function ( $ ) {\r\n            return factory( $, window, document );\r\n        } );\r\n    }\r\n    else if ( typeof exports === 'object' ) {\r\n        // CommonJS\r\n        module.exports = function (root, $) {\r\n            if ( ! root ) {\r\n                // CommonJS environments without a window global must pass a\r\n                // root. This will give an error otherwise\r\n                root = window;\r\n            }\r\n\r\n            if ( ! $ ) {\r\n                $ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window\r\n                    require('jquery') :\r\n                    require('jquery')( root );\r\n            }\r\n\r\n            return factory( $, root, root.document );\r\n        };\r\n    }\r\n    else {\r\n        // Browser\r\n        window.DataTable = factory( jQuery, window, document );\r\n    }\r\n}\r\n(function( $, window, document, undefined ) {\r\n    \"use strict\";\r\n\r\n    \r\n    var DataTable = function ( selector, options )\r\n    {\r\n        // When creating with `new`, create a new DataTable, returning the API instance\r\n        if (this instanceof DataTable) {\r\n            return $(selector).DataTable(options);\r\n        }\r\n        else {\r\n            // Argument switching\r\n            options = selector;\r\n        }\r\n    \r\n        /**\r\n         * Perform a jQuery selector action on the table's TR elements (from the tbody) and\r\n         * return the resulting jQuery object.\r\n         *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\r\n         *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\r\n         *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\r\n         *    criterion (\"applied\") or all TR elements (i.e. no filter).\r\n         *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\r\n         *    Can be either 'current', whereby the current sorting of the table is used, or\r\n         *    'original' whereby the original order the data was read into the table is used.\r\n         *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\r\n         *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\r\n         *    'current' and filter is 'applied', regardless of what they might be given as.\r\n         *  @returns {object} jQuery object, filtered by the given selector.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Highlight every second row\r\n         *      oTable.$('tr:odd').css('backgroundColor', 'blue');\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Filter to rows with 'Webkit' in them, add a background colour and then\r\n         *      // remove the filter, thus highlighting the 'Webkit' rows only.\r\n         *      oTable.fnFilter('Webkit');\r\n         *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\r\n         *      oTable.fnFilter('');\r\n         *    } );\r\n         */\r\n        this.$ = function ( sSelector, oOpts )\r\n        {\r\n            return this.api(true).$( sSelector, oOpts );\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Almost identical to $ in operation, but in this case returns the data for the matched\r\n         * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\r\n         * rather than any descendants, so the data can be obtained for the row/cell. If matching\r\n         * rows are found, the data returned is the original data array/object that was used to\r\n         * create the row (or a generated array if from a DOM source).\r\n         *\r\n         * This method is often useful in-combination with $ where both functions are given the\r\n         * same parameters and the array indexes will match identically.\r\n         *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\r\n         *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\r\n         *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\r\n         *    criterion (\"applied\") or all elements (i.e. no filter).\r\n         *  @param {string} [oOpts.order=current] Order of the data in the processed array.\r\n         *    Can be either 'current', whereby the current sorting of the table is used, or\r\n         *    'original' whereby the original order the data was read into the table is used.\r\n         *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\r\n         *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\r\n         *    'current' and filter is 'applied', regardless of what they might be given as.\r\n         *  @returns {array} Data for the matched elements. If any elements, as a result of the\r\n         *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\r\n         *    entry in the array.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Get the data from the first row in the table\r\n         *      var data = oTable._('tr:first');\r\n         *\r\n         *      // Do something useful with the data\r\n         *      alert( \"First cell is: \"+data[0] );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Filter to 'Webkit' and get all data for\r\n         *      oTable.fnFilter('Webkit');\r\n         *      var data = oTable._('tr', {\"search\": \"applied\"});\r\n         *\r\n         *      // Do something with the data\r\n         *      alert( data.length+\" rows matched the search\" );\r\n         *    } );\r\n         */\r\n        this._ = function ( sSelector, oOpts )\r\n        {\r\n            return this.api(true).rows( sSelector, oOpts ).data();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Create a DataTables Api instance, with the currently selected tables for\r\n         * the Api's context.\r\n         * @param {boolean} [traditional=false] Set the API instance's context to be\r\n         *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\r\n         *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\r\n         *   or if all tables captured in the jQuery object should be used.\r\n         * @return {DataTables.Api}\r\n         */\r\n        this.api = function ( traditional )\r\n        {\r\n            return traditional ?\r\n                new _Api(\r\n                    _fnSettingsFromNode( this[ _ext.iApiIndex ] )\r\n                ) :\r\n                new _Api( this );\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Add a single new row or multiple rows of data to the table. Please note\r\n         * that this is suitable for client-side processing only - if you are using\r\n         * server-side processing (i.e. \"bServerSide\": true), then to add data, you\r\n         * must add it to the data source, i.e. the server-side, through an Ajax call.\r\n         *  @param {array|object} data The data to be added to the table. This can be:\r\n         *    <ul>\r\n         *      <li>1D array of data - add a single row with the data provided</li>\r\n         *      <li>2D array of arrays - add multiple rows in a single call</li>\r\n         *      <li>object - data object when using <i>mData</i></li>\r\n         *      <li>array of objects - multiple data objects when using <i>mData</i></li>\r\n         *    </ul>\r\n         *  @param {bool} [redraw=true] redraw the table or not\r\n         *  @returns {array} An array of integers, representing the list of indexes in\r\n         *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\r\n         *    the table.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    // Global var for counter\r\n         *    var giCount = 2;\r\n         *\r\n         *    $(document).ready(function() {\r\n         *      $('#example').dataTable();\r\n         *    } );\r\n         *\r\n         *    function fnClickAddRow() {\r\n         *      $('#example').dataTable().fnAddData( [\r\n         *        giCount+\".1\",\r\n         *        giCount+\".2\",\r\n         *        giCount+\".3\",\r\n         *        giCount+\".4\" ]\r\n         *      );\r\n         *\r\n         *      giCount++;\r\n         *    }\r\n         */\r\n        this.fnAddData = function( data, redraw )\r\n        {\r\n            var api = this.api( true );\r\n        \r\n            /* Check if we want to add multiple rows or not */\r\n            var rows = Array.isArray(data) && ( Array.isArray(data[0]) || $.isPlainObject(data[0]) ) ?\r\n                api.rows.add( data ) :\r\n                api.row.add( data );\r\n        \r\n            if ( redraw === undefined || redraw ) {\r\n                api.draw();\r\n            }\r\n        \r\n            return rows.flatten().toArray();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * This function will make DataTables recalculate the column sizes, based on the data\r\n         * contained in the table and the sizes applied to the columns (in the DOM, CSS or\r\n         * through the sWidth parameter). This can be useful when the width of the table's\r\n         * parent element changes (for example a window resize).\r\n         *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable( {\r\n         *        \"sScrollY\": \"200px\",\r\n         *        \"bPaginate\": false\r\n         *      } );\r\n         *\r\n         *      $(window).on('resize', function () {\r\n         *        oTable.fnAdjustColumnSizing();\r\n         *      } );\r\n         *    } );\r\n         */\r\n        this.fnAdjustColumnSizing = function ( bRedraw )\r\n        {\r\n            var api = this.api( true ).columns.adjust();\r\n            var settings = api.settings()[0];\r\n            var scroll = settings.oScroll;\r\n        \r\n            if ( bRedraw === undefined || bRedraw ) {\r\n                api.draw( false );\r\n            }\r\n            else if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {\r\n                /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\r\n                _fnScrollDraw( settings );\r\n            }\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Quickly and simply clear a table\r\n         *  @param {bool} [bRedraw=true] redraw the table or not\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\r\n         *      oTable.fnClearTable();\r\n         *    } );\r\n         */\r\n        this.fnClearTable = function( bRedraw )\r\n        {\r\n            var api = this.api( true ).clear();\r\n        \r\n            if ( bRedraw === undefined || bRedraw ) {\r\n                api.draw();\r\n            }\r\n        };\r\n        \r\n        \r\n        /**\r\n         * The exact opposite of 'opening' a row, this function will close any rows which\r\n         * are currently 'open'.\r\n         *  @param {node} nTr the table row to 'close'\r\n         *  @returns {int} 0 on success, or 1 if failed (can't find the row)\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable;\r\n         *\r\n         *      // 'open' an information row when a row is clicked on\r\n         *      $('#example tbody tr').click( function () {\r\n         *        if ( oTable.fnIsOpen(this) ) {\r\n         *          oTable.fnClose( this );\r\n         *        } else {\r\n         *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n         *        }\r\n         *      } );\r\n         *\r\n         *      oTable = $('#example').dataTable();\r\n         *    } );\r\n         */\r\n        this.fnClose = function( nTr )\r\n        {\r\n            this.api( true ).row( nTr ).child.hide();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Remove a row for the table\r\n         *  @param {mixed} target The index of the row from aoData to be deleted, or\r\n         *    the TR element you want to delete\r\n         *  @param {function|null} [callBack] Callback function\r\n         *  @param {bool} [redraw=true] Redraw the table or not\r\n         *  @returns {array} The row that was deleted\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Immediately remove the first row\r\n         *      oTable.fnDeleteRow( 0 );\r\n         *    } );\r\n         */\r\n        this.fnDeleteRow = function( target, callback, redraw )\r\n        {\r\n            var api = this.api( true );\r\n            var rows = api.rows( target );\r\n            var settings = rows.settings()[0];\r\n            var data = settings.aoData[ rows[0][0] ];\r\n        \r\n            rows.remove();\r\n        \r\n            if ( callback ) {\r\n                callback.call( this, settings, data );\r\n            }\r\n        \r\n            if ( redraw === undefined || redraw ) {\r\n                api.draw();\r\n            }\r\n        \r\n            return data;\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Restore the table to it's original state in the DOM by removing all of DataTables\r\n         * enhancements, alterations to the DOM structure of the table and event listeners.\r\n         *  @param {boolean} [remove=false] Completely remove the table from the DOM\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\r\n         *      var oTable = $('#example').dataTable();\r\n         *      oTable.fnDestroy();\r\n         *    } );\r\n         */\r\n        this.fnDestroy = function ( remove )\r\n        {\r\n            this.api( true ).destroy( remove );\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Redraw the table\r\n         *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\r\n         *      oTable.fnDraw();\r\n         *    } );\r\n         */\r\n        this.fnDraw = function( complete )\r\n        {\r\n            // Note that this isn't an exact match to the old call to _fnDraw - it takes\r\n            // into account the new data, but can hold position.\r\n            this.api( true ).draw( complete );\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Filter the input based on data\r\n         *  @param {string} sInput String to filter the table on\r\n         *  @param {int|null} [iColumn] Column to limit filtering to\r\n         *  @param {bool} [bRegex=false] Treat as regular expression or not\r\n         *  @param {bool} [bSmart=true] Perform smart filtering or not\r\n         *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\r\n         *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Sometime later - filter...\r\n         *      oTable.fnFilter( 'test string' );\r\n         *    } );\r\n         */\r\n        this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )\r\n        {\r\n            var api = this.api( true );\r\n        \r\n            if ( iColumn === null || iColumn === undefined ) {\r\n                api.search( sInput, bRegex, bSmart, bCaseInsensitive );\r\n            }\r\n            else {\r\n                api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );\r\n            }\r\n        \r\n            api.draw();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Get the data for the whole table, an individual row or an individual cell based on the\r\n         * provided parameters.\r\n         *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\r\n         *    a TR node then the data source for the whole row will be returned. If given as a\r\n         *    TD/TH cell node then iCol will be automatically calculated and the data for the\r\n         *    cell returned. If given as an integer, then this is treated as the aoData internal\r\n         *    data index for the row (see fnGetPosition) and the data for that row used.\r\n         *  @param {int} [col] Optional column index that you want the data of.\r\n         *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\r\n         *    returned. If mRow is defined, just data for that row, and is iCol is\r\n         *    defined, only data for the designated cell is returned.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    // Row data\r\n         *    $(document).ready(function() {\r\n         *      oTable = $('#example').dataTable();\r\n         *\r\n         *      oTable.$('tr').click( function () {\r\n         *        var data = oTable.fnGetData( this );\r\n         *        // ... do something with the array / object of data for the row\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Individual cell data\r\n         *    $(document).ready(function() {\r\n         *      oTable = $('#example').dataTable();\r\n         *\r\n         *      oTable.$('td').click( function () {\r\n         *        var sData = oTable.fnGetData( this );\r\n         *        alert( 'The cell clicked on had the value of '+sData );\r\n         *      } );\r\n         *    } );\r\n         */\r\n        this.fnGetData = function( src, col )\r\n        {\r\n            var api = this.api( true );\r\n        \r\n            if ( src !== undefined ) {\r\n                var type = src.nodeName ? src.nodeName.toLowerCase() : '';\r\n        \r\n                return col !== undefined || type == 'td' || type == 'th' ?\r\n                    api.cell( src, col ).data() :\r\n                    api.row( src ).data() || null;\r\n            }\r\n        \r\n            return api.data().toArray();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Get an array of the TR nodes that are used in the table's body. Note that you will\r\n         * typically want to use the '$' API method in preference to this as it is more\r\n         * flexible.\r\n         *  @param {int} [iRow] Optional row index for the TR element you want\r\n         *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\r\n         *    in the table's body, or iRow is defined, just the TR element requested.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Get the nodes from the table\r\n         *      var nNodes = oTable.fnGetNodes( );\r\n         *    } );\r\n         */\r\n        this.fnGetNodes = function( iRow )\r\n        {\r\n            var api = this.api( true );\r\n        \r\n            return iRow !== undefined ?\r\n                api.row( iRow ).node() :\r\n                api.rows().nodes().flatten().toArray();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Get the array indexes of a particular cell from it's DOM element\r\n         * and column index including hidden columns\r\n         *  @param {node} node this can either be a TR, TD or TH in the table's body\r\n         *  @returns {int} If nNode is given as a TR, then a single index is returned, or\r\n         *    if given as a cell, an array of [row index, column index (visible),\r\n         *    column index (all)] is given.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      $('#example tbody td').click( function () {\r\n         *        // Get the position of the current data from the node\r\n         *        var aPos = oTable.fnGetPosition( this );\r\n         *\r\n         *        // Get the data array for this row\r\n         *        var aData = oTable.fnGetData( aPos[0] );\r\n         *\r\n         *        // Update the data array and return the value\r\n         *        aData[ aPos[1] ] = 'clicked';\r\n         *        this.innerHTML = 'clicked';\r\n         *      } );\r\n         *\r\n         *      // Init DataTables\r\n         *      oTable = $('#example').dataTable();\r\n         *    } );\r\n         */\r\n        this.fnGetPosition = function( node )\r\n        {\r\n            var api = this.api( true );\r\n            var nodeName = node.nodeName.toUpperCase();\r\n        \r\n            if ( nodeName == 'TR' ) {\r\n                return api.row( node ).index();\r\n            }\r\n            else if ( nodeName == 'TD' || nodeName == 'TH' ) {\r\n                var cell = api.cell( node ).index();\r\n        \r\n                return [\r\n                    cell.row,\r\n                    cell.columnVisible,\r\n                    cell.column\r\n                ];\r\n            }\r\n            return null;\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Check to see if a row is 'open' or not.\r\n         *  @param {node} nTr the table row to check\r\n         *  @returns {boolean} true if the row is currently open, false otherwise\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable;\r\n         *\r\n         *      // 'open' an information row when a row is clicked on\r\n         *      $('#example tbody tr').click( function () {\r\n         *        if ( oTable.fnIsOpen(this) ) {\r\n         *          oTable.fnClose( this );\r\n         *        } else {\r\n         *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n         *        }\r\n         *      } );\r\n         *\r\n         *      oTable = $('#example').dataTable();\r\n         *    } );\r\n         */\r\n        this.fnIsOpen = function( nTr )\r\n        {\r\n            return this.api( true ).row( nTr ).child.isShown();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * This function will place a new row directly after a row which is currently\r\n         * on display on the page, with the HTML contents that is passed into the\r\n         * function. This can be used, for example, to ask for confirmation that a\r\n         * particular record should be deleted.\r\n         *  @param {node} nTr The table row to 'open'\r\n         *  @param {string|node|jQuery} mHtml The HTML to put into the row\r\n         *  @param {string} sClass Class to give the new TD cell\r\n         *  @returns {node} The row opened. Note that if the table row passed in as the\r\n         *    first parameter, is not found in the table, this method will silently\r\n         *    return.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable;\r\n         *\r\n         *      // 'open' an information row when a row is clicked on\r\n         *      $('#example tbody tr').click( function () {\r\n         *        if ( oTable.fnIsOpen(this) ) {\r\n         *          oTable.fnClose( this );\r\n         *        } else {\r\n         *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n         *        }\r\n         *      } );\r\n         *\r\n         *      oTable = $('#example').dataTable();\r\n         *    } );\r\n         */\r\n        this.fnOpen = function( nTr, mHtml, sClass )\r\n        {\r\n            return this.api( true )\r\n                .row( nTr )\r\n                .child( mHtml, sClass )\r\n                .show()\r\n                .child()[0];\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Change the pagination - provides the internal logic for pagination in a simple API\r\n         * function. With this function you can have a DataTables table go to the next,\r\n         * previous, first or last pages.\r\n         *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\r\n         *    or page number to jump to (integer), note that page 0 is the first page.\r\n         *  @param {bool} [bRedraw=true] Redraw the table or not\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *      oTable.fnPageChange( 'next' );\r\n         *    } );\r\n         */\r\n        this.fnPageChange = function ( mAction, bRedraw )\r\n        {\r\n            var api = this.api( true ).page( mAction );\r\n        \r\n            if ( bRedraw === undefined || bRedraw ) {\r\n                api.draw(false);\r\n            }\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Show a particular column\r\n         *  @param {int} iCol The column whose display should be changed\r\n         *  @param {bool} bShow Show (true) or hide (false) the column\r\n         *  @param {bool} [bRedraw=true] Redraw the table or not\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Hide the second column after initialisation\r\n         *      oTable.fnSetColumnVis( 1, false );\r\n         *    } );\r\n         */\r\n        this.fnSetColumnVis = function ( iCol, bShow, bRedraw )\r\n        {\r\n            var api = this.api( true ).column( iCol ).visible( bShow );\r\n        \r\n            if ( bRedraw === undefined || bRedraw ) {\r\n                api.columns.adjust().draw();\r\n            }\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Get the settings for a particular table for external manipulation\r\n         *  @returns {object} DataTables settings object. See\r\n         *    {@link DataTable.models.oSettings}\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *      var oSettings = oTable.fnSettings();\r\n         *\r\n         *      // Show an example parameter from the settings\r\n         *      alert( oSettings._iDisplayStart );\r\n         *    } );\r\n         */\r\n        this.fnSettings = function()\r\n        {\r\n            return _fnSettingsFromNode( this[_ext.iApiIndex] );\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Sort the table by a particular column\r\n         *  @param {int} iCol the data index to sort on. Note that this will not match the\r\n         *    'display index' if you have hidden data entries\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Sort immediately with columns 0 and 1\r\n         *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\r\n         *    } );\r\n         */\r\n        this.fnSort = function( aaSort )\r\n        {\r\n            this.api( true ).order( aaSort ).draw();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Attach a sort listener to an element for a given column\r\n         *  @param {node} nNode the element to attach the sort listener to\r\n         *  @param {int} iColumn the column that a click on this node will sort on\r\n         *  @param {function} [fnCallback] callback function when sort is run\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Sort on column 1, when 'sorter' is clicked on\r\n         *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\r\n         *    } );\r\n         */\r\n        this.fnSortListener = function( nNode, iColumn, fnCallback )\r\n        {\r\n            this.api( true ).order.listener( nNode, iColumn, fnCallback );\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Update a table cell or row - this method will accept either a single value to\r\n         * update the cell with, an array of values with one element for each column or\r\n         * an object in the same format as the original data source. The function is\r\n         * self-referencing in order to make the multi column updates easier.\r\n         *  @param {object|array|string} mData Data to update the cell/row with\r\n         *  @param {node|int} mRow TR element you want to update or the aoData index\r\n         *  @param {int} [iColumn] The column to update, give as null or undefined to\r\n         *    update a whole row.\r\n         *  @param {bool} [bRedraw=true] Redraw the table or not\r\n         *  @param {bool} [bAction=true] Perform pre-draw actions or not\r\n         *  @returns {int} 0 on success, 1 on error\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\r\n         *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\r\n         *    } );\r\n         */\r\n        this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )\r\n        {\r\n            var api = this.api( true );\r\n        \r\n            if ( iColumn === undefined || iColumn === null ) {\r\n                api.row( mRow ).data( mData );\r\n            }\r\n            else {\r\n                api.cell( mRow, iColumn ).data( mData );\r\n            }\r\n        \r\n            if ( bAction === undefined || bAction ) {\r\n                api.columns.adjust();\r\n            }\r\n        \r\n            if ( bRedraw === undefined || bRedraw ) {\r\n                api.draw();\r\n            }\r\n            return 0;\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Provide a common method for plug-ins to check the version of DataTables being used, in order\r\n         * to ensure compatibility.\r\n         *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\r\n         *    formats \"X\" and \"X.Y\" are also acceptable.\r\n         *  @returns {boolean} true if this version of DataTables is greater or equal to the required\r\n         *    version, or false if this version of DataTales is not suitable\r\n         *  @method\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *      alert( oTable.fnVersionCheck( '1.9.0' ) );\r\n         *    } );\r\n         */\r\n        this.fnVersionCheck = _ext.fnVersionCheck;\r\n        \r\n    \r\n        var _that = this;\r\n        var emptyInit = options === undefined;\r\n        var len = this.length;\r\n    \r\n        if ( emptyInit ) {\r\n            options = {};\r\n        }\r\n    \r\n        this.oApi = this.internal = _ext.internal;\r\n    \r\n        // Extend with old style plug-in API methods\r\n        for ( var fn in DataTable.ext.internal ) {\r\n            if ( fn ) {\r\n                this[fn] = _fnExternApiFunc(fn);\r\n            }\r\n        }\r\n    \r\n        this.each(function() {\r\n            // For each initialisation we want to give it a clean initialisation\r\n            // object that can be bashed around\r\n            var o = {};\r\n            var oInit = len > 1 ? // optimisation for single table case\r\n                _fnExtend( o, options, true ) :\r\n                options;\r\n    \r\n            /*global oInit,_that,emptyInit*/\r\n            var i=0, iLen, j, jLen, k, kLen;\r\n            var sId = this.getAttribute( 'id' );\r\n            var bInitHandedOff = false;\r\n            var defaults = DataTable.defaults;\r\n            var $this = $(this);\r\n            \r\n            \r\n            /* Sanity check */\r\n            if ( this.nodeName.toLowerCase() != 'table' )\r\n            {\r\n                _fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );\r\n                return;\r\n            }\r\n            \r\n            /* Backwards compatibility for the defaults */\r\n            _fnCompatOpts( defaults );\r\n            _fnCompatCols( defaults.column );\r\n            \r\n            /* Convert the camel-case defaults to Hungarian */\r\n            _fnCamelToHungarian( defaults, defaults, true );\r\n            _fnCamelToHungarian( defaults.column, defaults.column, true );\r\n            \r\n            /* Setting up the initialisation object */\r\n            _fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ), true );\r\n            \r\n            \r\n            \r\n            /* Check to see if we are re-initialising a table */\r\n            var allSettings = DataTable.settings;\r\n            for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )\r\n            {\r\n                var s = allSettings[i];\r\n            \r\n                /* Base check on table node */\r\n                if (\r\n                    s.nTable == this ||\r\n                    (s.nTHead && s.nTHead.parentNode == this) ||\r\n                    (s.nTFoot && s.nTFoot.parentNode == this)\r\n                ) {\r\n                    var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\r\n                    var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\r\n            \r\n                    if ( emptyInit || bRetrieve )\r\n                    {\r\n                        return s.oInstance;\r\n                    }\r\n                    else if ( bDestroy )\r\n                    {\r\n                        s.oInstance.fnDestroy();\r\n                        break;\r\n                    }\r\n                    else\r\n                    {\r\n                        _fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );\r\n                        return;\r\n                    }\r\n                }\r\n            \r\n                /* If the element we are initialising has the same ID as a table which was previously\r\n                 * initialised, but the table nodes don't match (from before) then we destroy the old\r\n                 * instance by simply deleting it. This is under the assumption that the table has been\r\n                 * destroyed by other methods. Anyone using non-id selectors will need to do this manually\r\n                 */\r\n                if ( s.sTableId == this.id )\r\n                {\r\n                    allSettings.splice( i, 1 );\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            /* Ensure the table has an ID - required for accessibility */\r\n            if ( sId === null || sId === \"\" )\r\n            {\r\n                sId = \"DataTables_Table_\"+(DataTable.ext._unique++);\r\n                this.id = sId;\r\n            }\r\n            \r\n            /* Create the settings object for this table and set some of the default parameters */\r\n            var oSettings = $.extend( true, {}, DataTable.models.oSettings, {\r\n                \"sDestroyWidth\": $this[0].style.width,\r\n                \"sInstance\":     sId,\r\n                \"sTableId\":      sId\r\n            } );\r\n            oSettings.nTable = this;\r\n            oSettings.oApi   = _that.internal;\r\n            oSettings.oInit  = oInit;\r\n            \r\n            allSettings.push( oSettings );\r\n            \r\n            // Need to add the instance after the instance after the settings object has been added\r\n            // to the settings array, so we can self reference the table instance if more than one\r\n            oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();\r\n            \r\n            // Backwards compatibility, before we apply all the defaults\r\n            _fnCompatOpts( oInit );\r\n            _fnLanguageCompat( oInit.oLanguage );\r\n            \r\n            // If the length menu is given, but the init display length is not, use the length menu\r\n            if ( oInit.aLengthMenu && ! oInit.iDisplayLength )\r\n            {\r\n                oInit.iDisplayLength = Array.isArray( oInit.aLengthMenu[0] ) ?\r\n                    oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\r\n            }\r\n            \r\n            // Apply the defaults and init options to make a single init object will all\r\n            // options defined from defaults and instance options.\r\n            oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );\r\n            \r\n            \r\n            // Map the initialisation options onto the settings object\r\n            _fnMap( oSettings.oFeatures, oInit, [\r\n                \"bPaginate\",\r\n                \"bLengthChange\",\r\n                \"bFilter\",\r\n                \"bSort\",\r\n                \"bSortMulti\",\r\n                \"bInfo\",\r\n                \"bProcessing\",\r\n                \"bAutoWidth\",\r\n                \"bSortClasses\",\r\n                \"bServerSide\",\r\n                \"bDeferRender\"\r\n            ] );\r\n            _fnMap( oSettings, oInit, [\r\n                \"asStripeClasses\",\r\n                \"ajax\",\r\n                \"fnServerData\",\r\n                \"fnFormatNumber\",\r\n                \"sServerMethod\",\r\n                \"aaSorting\",\r\n                \"aaSortingFixed\",\r\n                \"aLengthMenu\",\r\n                \"sPaginationType\",\r\n                \"sAjaxSource\",\r\n                \"sAjaxDataProp\",\r\n                \"iStateDuration\",\r\n                \"sDom\",\r\n                \"bSortCellsTop\",\r\n                \"iTabIndex\",\r\n                \"fnStateLoadCallback\",\r\n                \"fnStateSaveCallback\",\r\n                \"renderer\",\r\n                \"searchDelay\",\r\n                \"rowId\",\r\n                [ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat\r\n                [ \"oSearch\", \"oPreviousSearch\" ],\r\n                [ \"aoSearchCols\", \"aoPreSearchCols\" ],\r\n                [ \"iDisplayLength\", \"_iDisplayLength\" ]\r\n            ] );\r\n            _fnMap( oSettings.oScroll, oInit, [\r\n                [ \"sScrollX\", \"sX\" ],\r\n                [ \"sScrollXInner\", \"sXInner\" ],\r\n                [ \"sScrollY\", \"sY\" ],\r\n                [ \"bScrollCollapse\", \"bCollapse\" ]\r\n            ] );\r\n            _fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );\r\n            \r\n            /* Callback functions which are array driven */\r\n            _fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );\r\n            _fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );\r\n            _fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );\r\n            _fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );\r\n            _fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );\r\n            _fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );\r\n            _fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );\r\n            _fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );\r\n            _fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );\r\n            _fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );\r\n            _fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );\r\n            \r\n            oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );\r\n            \r\n            /* Browser support detection */\r\n            _fnBrowserDetect( oSettings );\r\n            \r\n            var oClasses = oSettings.oClasses;\r\n            \r\n            $.extend( oClasses, DataTable.ext.classes, oInit.oClasses );\r\n            $this.addClass( oClasses.sTable );\r\n            \r\n            \r\n            if ( oSettings.iInitDisplayStart === undefined )\r\n            {\r\n                /* Display start point, taking into account the save saving */\r\n                oSettings.iInitDisplayStart = oInit.iDisplayStart;\r\n                oSettings._iDisplayStart = oInit.iDisplayStart;\r\n            }\r\n            \r\n            if ( oInit.iDeferLoading !== null )\r\n            {\r\n                oSettings.bDeferLoading = true;\r\n                var tmp = Array.isArray( oInit.iDeferLoading );\r\n                oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\r\n                oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\r\n            }\r\n            \r\n            /* Language definitions */\r\n            var oLanguage = oSettings.oLanguage;\r\n            $.extend( true, oLanguage, oInit.oLanguage );\r\n            \r\n            if ( oLanguage.sUrl )\r\n            {\r\n                /* Get the language definitions from a file - because this Ajax call makes the language\r\n                 * get async to the remainder of this function we use bInitHandedOff to indicate that\r\n                 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\r\n                 */\r\n                $.ajax( {\r\n                    dataType: 'json',\r\n                    url: oLanguage.sUrl,\r\n                    success: function ( json ) {\r\n                        _fnCamelToHungarian( defaults.oLanguage, json );\r\n                        _fnLanguageCompat( json );\r\n                        $.extend( true, oLanguage, json );\r\n            \r\n                        _fnCallbackFire( oSettings, null, 'i18n', [oSettings]);\r\n                        _fnInitialise( oSettings );\r\n                    },\r\n                    error: function () {\r\n                        // Error occurred loading language file, continue on as best we can\r\n                        _fnInitialise( oSettings );\r\n                    }\r\n                } );\r\n                bInitHandedOff = true;\r\n            }\r\n            else {\r\n                _fnCallbackFire( oSettings, null, 'i18n', [oSettings]);\r\n            }\r\n            \r\n            /*\r\n             * Stripes\r\n             */\r\n            if ( oInit.asStripeClasses === null )\r\n            {\r\n                oSettings.asStripeClasses =[\r\n                    oClasses.sStripeOdd,\r\n                    oClasses.sStripeEven\r\n                ];\r\n            }\r\n            \r\n            /* Remove row stripe classes if they are already on the table row */\r\n            var stripeClasses = oSettings.asStripeClasses;\r\n            var rowOne = $this.children('tbody').find('tr').eq(0);\r\n            if ( $.inArray( true, $.map( stripeClasses, function(el, i) {\r\n                return rowOne.hasClass(el);\r\n            } ) ) !== -1 ) {\r\n                $('tbody tr', this).removeClass( stripeClasses.join(' ') );\r\n                oSettings.asDestroyStripes = stripeClasses.slice();\r\n            }\r\n            \r\n            /*\r\n             * Columns\r\n             * See if we should load columns automatically or use defined ones\r\n             */\r\n            var anThs = [];\r\n            var aoColumnsInit;\r\n            var nThead = this.getElementsByTagName('thead');\r\n            if ( nThead.length !== 0 )\r\n            {\r\n                _fnDetectHeader( oSettings.aoHeader, nThead[0] );\r\n                anThs = _fnGetUniqueThs( oSettings );\r\n            }\r\n            \r\n            /* If not given a column array, generate one with nulls */\r\n            if ( oInit.aoColumns === null )\r\n            {\r\n                aoColumnsInit = [];\r\n                for ( i=0, iLen=anThs.length ; i<iLen ; i++ )\r\n                {\r\n                    aoColumnsInit.push( null );\r\n                }\r\n            }\r\n            else\r\n            {\r\n                aoColumnsInit = oInit.aoColumns;\r\n            }\r\n            \r\n            /* Add the columns */\r\n            for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )\r\n            {\r\n                _fnAddColumn( oSettings, anThs ? anThs[i] : null );\r\n            }\r\n            \r\n            /* Apply the column definitions */\r\n            _fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\r\n                _fnColumnOptions( oSettings, iCol, oDef );\r\n            } );\r\n            \r\n            /* HTML5 attribute detection - build an mData object automatically if the\r\n             * attributes are found\r\n             */\r\n            if ( rowOne.length ) {\r\n                var a = function ( cell, name ) {\r\n                    return cell.getAttribute( 'data-'+name ) !== null ? name : null;\r\n                };\r\n            \r\n                $( rowOne[0] ).children('th, td').each( function (i, cell) {\r\n                    var col = oSettings.aoColumns[i];\r\n            \r\n                    if ( col.mData === i ) {\r\n                        var sort = a( cell, 'sort' ) || a( cell, 'order' );\r\n                        var filter = a( cell, 'filter' ) || a( cell, 'search' );\r\n            \r\n                        if ( sort !== null || filter !== null ) {\r\n                            col.mData = {\r\n                                _:      i+'.display',\r\n                                sort:   sort !== null   ? i+'.@data-'+sort   : undefined,\r\n                                type:   sort !== null   ? i+'.@data-'+sort   : undefined,\r\n                                filter: filter !== null ? i+'.@data-'+filter : undefined\r\n                            };\r\n            \r\n                            _fnColumnOptions( oSettings, i );\r\n                        }\r\n                    }\r\n                } );\r\n            }\r\n            \r\n            var features = oSettings.oFeatures;\r\n            var loadedInit = function () {\r\n                /*\r\n                 * Sorting\r\n                 * @todo For modularisation (1.11) this needs to do into a sort start up handler\r\n                 */\r\n            \r\n                // If aaSorting is not defined, then we use the first indicator in asSorting\r\n                // in case that has been altered, so the default sort reflects that option\r\n                if ( oInit.aaSorting === undefined ) {\r\n                    var sorting = oSettings.aaSorting;\r\n                    for ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {\r\n                        sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];\r\n                    }\r\n                }\r\n            \r\n                /* Do a first pass on the sorting classes (allows any size changes to be taken into\r\n                 * account, and also will apply sorting disabled classes if disabled\r\n                 */\r\n                _fnSortingClasses( oSettings );\r\n            \r\n                if ( features.bSort ) {\r\n                    _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\r\n                        if ( oSettings.bSorted ) {\r\n                            var aSort = _fnSortFlatten( oSettings );\r\n                            var sortedColumns = {};\r\n            \r\n                            $.each( aSort, function (i, val) {\r\n                                sortedColumns[ val.src ] = val.dir;\r\n                            } );\r\n            \r\n                            _fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );\r\n                            _fnSortAria( oSettings );\r\n                        }\r\n                    } );\r\n                }\r\n            \r\n                _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\r\n                    if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {\r\n                        _fnSortingClasses( oSettings );\r\n                    }\r\n                }, 'sc' );\r\n            \r\n            \r\n                /*\r\n                 * Final init\r\n                 * Cache the header, body and footer as required, creating them if needed\r\n                 */\r\n            \r\n                // Work around for Webkit bug 83867 - store the caption-side before removing from doc\r\n                var captions = $this.children('caption').each( function () {\r\n                    this._captionSide = $(this).css('caption-side');\r\n                } );\r\n            \r\n                var thead = $this.children('thead');\r\n                if ( thead.length === 0 ) {\r\n                    thead = $('<thead/>').appendTo($this);\r\n                }\r\n                oSettings.nTHead = thead[0];\r\n            \r\n                var tbody = $this.children('tbody');\r\n                if ( tbody.length === 0 ) {\r\n                    tbody = $('<tbody/>').insertAfter(thead);\r\n                }\r\n                oSettings.nTBody = tbody[0];\r\n            \r\n                var tfoot = $this.children('tfoot');\r\n                if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") ) {\r\n                    // If we are a scrolling table, and no footer has been given, then we need to create\r\n                    // a tfoot element for the caption element to be appended to\r\n                    tfoot = $('<tfoot/>').appendTo($this);\r\n                }\r\n            \r\n                if ( tfoot.length === 0 || tfoot.children().length === 0 ) {\r\n                    $this.addClass( oClasses.sNoFooter );\r\n                }\r\n                else if ( tfoot.length > 0 ) {\r\n                    oSettings.nTFoot = tfoot[0];\r\n                    _fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );\r\n                }\r\n            \r\n                /* Check if there is data passing into the constructor */\r\n                if ( oInit.aaData ) {\r\n                    for ( i=0 ; i<oInit.aaData.length ; i++ ) {\r\n                        _fnAddData( oSettings, oInit.aaData[ i ] );\r\n                    }\r\n                }\r\n                else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {\r\n                    /* Grab the data from the page - only do this when deferred loading or no Ajax\r\n                     * source since there is no point in reading the DOM data if we are then going\r\n                     * to replace it with Ajax data\r\n                     */\r\n                    _fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );\r\n                }\r\n            \r\n                /* Copy the data index array */\r\n                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\r\n            \r\n                /* Initialisation complete - table can be drawn */\r\n                oSettings.bInitialised = true;\r\n            \r\n                /* Check if we need to initialise the table (it might not have been handed off to the\r\n                 * language processor)\r\n                 */\r\n                if ( bInitHandedOff === false ) {\r\n                    _fnInitialise( oSettings );\r\n                }\r\n            };\r\n            \r\n            /* Must be done after everything which can be overridden by the state saving! */\r\n            _fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );\r\n            \r\n            if ( oInit.bStateSave )\r\n            {\r\n                features.bStateSave = true;\r\n                _fnLoadState( oSettings, oInit, loadedInit );\r\n            }\r\n            else {\r\n                loadedInit();\r\n            }\r\n            \r\n        } );\r\n        _that = null;\r\n        return this;\r\n    };\r\n    \r\n    \r\n    /*\r\n     * It is useful to have variables which are scoped locally so only the\r\n     * DataTables functions can access them and they don't leak into global space.\r\n     * At the same time these functions are often useful over multiple files in the\r\n     * core and API, so we list, or at least document, all variables which are used\r\n     * by DataTables as private variables here. This also ensures that there is no\r\n     * clashing of variable names and that they can easily referenced for reuse.\r\n     */\r\n    \r\n    \r\n    // Defined else where\r\n    //  _selector_run\r\n    //  _selector_opts\r\n    //  _selector_first\r\n    //  _selector_row_indexes\r\n    \r\n    var _ext; // DataTable.ext\r\n    var _Api; // DataTable.Api\r\n    var _api_register; // DataTable.Api.register\r\n    var _api_registerPlural; // DataTable.Api.registerPlural\r\n    \r\n    var _re_dic = {};\r\n    var _re_new_lines = /[\\r\\n\\u2028]/g;\r\n    var _re_html = /<.*?>/g;\r\n    \r\n    // This is not strict ISO8601 - Date.parse() is quite lax, although\r\n    // implementations differ between browsers.\r\n    var _re_date = /^\\d{2,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}([T ]{1}\\d{1,2}[:\\.]\\d{2}([\\.:]\\d{2})?)?$/;\r\n    \r\n    // Escape regular expression special characters\r\n    var _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-' ].join('|\\\\') + ')', 'g' );\r\n    \r\n    // http://en.wikipedia.org/wiki/Foreign_exchange_market\r\n    // - \\u20BD - Russian ruble.\r\n    // - \\u20a9 - South Korean Won\r\n    // - \\u20BA - Turkish Lira\r\n    // - \\u20B9 - Indian Rupee\r\n    // - R - Brazil (R$) and South Africa\r\n    // - fr - Swiss Franc\r\n    // - kr - Swedish krona, Norwegian krone and Danish krone\r\n    // - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\r\n    // - É - Bitcoin\r\n    // - Î - Ethereum\r\n    //   standards as thousands separators.\r\n    var _re_formatted_numeric = /['\\u00A0,$Â£â¬Â¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfkÉÎ]/gi;\r\n    \r\n    \r\n    var _empty = function ( d ) {\r\n        return !d || d === true || d === '-' ? true : false;\r\n    };\r\n    \r\n    \r\n    var _intVal = function ( s ) {\r\n        var integer = parseInt( s, 10 );\r\n        return !isNaN(integer) && isFinite(s) ? integer : null;\r\n    };\r\n    \r\n    // Convert from a formatted number with characters other than `.` as the\r\n    // decimal place, to a Javascript number\r\n    var _numToDecimal = function ( num, decimalPoint ) {\r\n        // Cache created regular expressions for speed as this function is called often\r\n        if ( ! _re_dic[ decimalPoint ] ) {\r\n            _re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );\r\n        }\r\n        return typeof num === 'string' && decimalPoint !== '.' ?\r\n            num.replace( /\\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :\r\n            num;\r\n    };\r\n    \r\n    \r\n    var _isNumber = function ( d, decimalPoint, formatted ) {\r\n        var strType = typeof d === 'string';\r\n    \r\n        // If empty return immediately so there must be a number if it is a\r\n        // formatted string (this stops the string \"k\", or \"kr\", etc being detected\r\n        // as a formatted number for currency\r\n        if ( _empty( d ) ) {\r\n            return true;\r\n        }\r\n    \r\n        if ( decimalPoint && strType ) {\r\n            d = _numToDecimal( d, decimalPoint );\r\n        }\r\n    \r\n        if ( formatted && strType ) {\r\n            d = d.replace( _re_formatted_numeric, '' );\r\n        }\r\n    \r\n        return !isNaN( parseFloat(d) ) && isFinite( d );\r\n    };\r\n    \r\n    \r\n    // A string without HTML in it can be considered to be HTML still\r\n    var _isHtml = function ( d ) {\r\n        return _empty( d ) || typeof d === 'string';\r\n    };\r\n    \r\n    \r\n    var _htmlNumeric = function ( d, decimalPoint, formatted ) {\r\n        if ( _empty( d ) ) {\r\n            return true;\r\n        }\r\n    \r\n        var html = _isHtml( d );\r\n        return ! html ?\r\n            null :\r\n            _isNumber( _stripHtml( d ), decimalPoint, formatted ) ?\r\n                true :\r\n                null;\r\n    };\r\n    \r\n    \r\n    var _pluck = function ( a, prop, prop2 ) {\r\n        var out = [];\r\n        var i=0, ien=a.length;\r\n    \r\n        // Could have the test in the loop for slightly smaller code, but speed\r\n        // is essential here\r\n        if ( prop2 !== undefined ) {\r\n            for ( ; i<ien ; i++ ) {\r\n                if ( a[i] && a[i][ prop ] ) {\r\n                    out.push( a[i][ prop ][ prop2 ] );\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for ( ; i<ien ; i++ ) {\r\n                if ( a[i] ) {\r\n                    out.push( a[i][ prop ] );\r\n                }\r\n            }\r\n        }\r\n    \r\n        return out;\r\n    };\r\n    \r\n    \r\n    // Basically the same as _pluck, but rather than looping over `a` we use `order`\r\n    // as the indexes to pick from `a`\r\n    var _pluck_order = function ( a, order, prop, prop2 )\r\n    {\r\n        var out = [];\r\n        var i=0, ien=order.length;\r\n    \r\n        // Could have the test in the loop for slightly smaller code, but speed\r\n        // is essential here\r\n        if ( prop2 !== undefined ) {\r\n            for ( ; i<ien ; i++ ) {\r\n                if ( a[ order[i] ][ prop ] ) {\r\n                    out.push( a[ order[i] ][ prop ][ prop2 ] );\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for ( ; i<ien ; i++ ) {\r\n                out.push( a[ order[i] ][ prop ] );\r\n            }\r\n        }\r\n    \r\n        return out;\r\n    };\r\n    \r\n    \r\n    var _range = function ( len, start )\r\n    {\r\n        var out = [];\r\n        var end;\r\n    \r\n        if ( start === undefined ) {\r\n            start = 0;\r\n            end = len;\r\n        }\r\n        else {\r\n            end = start;\r\n            start = len;\r\n        }\r\n    \r\n        for ( var i=start ; i<end ; i++ ) {\r\n            out.push( i );\r\n        }\r\n    \r\n        return out;\r\n    };\r\n    \r\n    \r\n    var _removeEmpty = function ( a )\r\n    {\r\n        var out = [];\r\n    \r\n        for ( var i=0, ien=a.length ; i<ien ; i++ ) {\r\n            if ( a[i] ) { // careful - will remove all falsy values!\r\n                out.push( a[i] );\r\n            }\r\n        }\r\n    \r\n        return out;\r\n    };\r\n    \r\n    \r\n    var _stripHtml = function ( d ) {\r\n        return d.replace( _re_html, '' );\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Determine if all values in the array are unique. This means we can short\r\n     * cut the _unique method at the cost of a single loop. A sorted array is used\r\n     * to easily check the values.\r\n     *\r\n     * @param  {array} src Source array\r\n     * @return {boolean} true if all unique, false otherwise\r\n     * @ignore\r\n     */\r\n    var _areAllUnique = function ( src ) {\r\n        if ( src.length < 2 ) {\r\n            return true;\r\n        }\r\n    \r\n        var sorted = src.slice().sort();\r\n        var last = sorted[0];\r\n    \r\n        for ( var i=1, ien=sorted.length ; i<ien ; i++ ) {\r\n            if ( sorted[i] === last ) {\r\n                return false;\r\n            }\r\n    \r\n            last = sorted[i];\r\n        }\r\n    \r\n        return true;\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Find the unique elements in a source array.\r\n     *\r\n     * @param  {array} src Source array\r\n     * @return {array} Array of unique items\r\n     * @ignore\r\n     */\r\n    var _unique = function ( src )\r\n    {\r\n        if ( _areAllUnique( src ) ) {\r\n            return src.slice();\r\n        }\r\n    \r\n        // A faster unique method is to use object keys to identify used values,\r\n        // but this doesn't work with arrays or objects, which we must also\r\n        // consider. See jsperf.com/compare-array-unique-versions/4 for more\r\n        // information.\r\n        var\r\n            out = [],\r\n            val,\r\n            i, ien=src.length,\r\n            j, k=0;\r\n    \r\n        again: for ( i=0 ; i<ien ; i++ ) {\r\n            val = src[i];\r\n    \r\n            for ( j=0 ; j<k ; j++ ) {\r\n                if ( out[j] === val ) {\r\n                    continue again;\r\n                }\r\n            }\r\n    \r\n            out.push( val );\r\n            k++;\r\n        }\r\n    \r\n        return out;\r\n    };\r\n    \r\n    // Surprisingly this is faster than [].concat.apply\r\n    // https://jsperf.com/flatten-an-array-loop-vs-reduce/2\r\n    var _flatten = function (out, val) {\r\n        if (Array.isArray(val)) {\r\n            for (var i=0 ; i<val.length ; i++) {\r\n                _flatten(out, val[i]);\r\n            }\r\n        }\r\n        else {\r\n            out.push(val);\r\n        }\r\n      \r\n        return out;\r\n    }\r\n    \r\n    var _includes = function (search, start) {\r\n        if (start === undefined) {\r\n            start = 0;\r\n        }\r\n    \r\n        return this.indexOf(search, start) !== -1;  \r\n    };\r\n    \r\n    // Array.isArray polyfill.\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\r\n    if (! Array.isArray) {\r\n        Array.isArray = function(arg) {\r\n            return Object.prototype.toString.call(arg) === '[object Array]';\r\n        };\r\n    }\r\n    \r\n    if (! Array.prototype.includes) {\r\n        Array.prototype.includes = _includes;\r\n    }\r\n    \r\n    // .trim() polyfill\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\r\n    if (!String.prototype.trim) {\r\n      String.prototype.trim = function () {\r\n        return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n      };\r\n    }\r\n    \r\n    if (! String.prototype.includes) {\r\n        String.prototype.includes = _includes;\r\n    }\r\n    \r\n    /**\r\n     * DataTables utility methods\r\n     * \r\n     * This namespace provides helper methods that DataTables uses internally to\r\n     * create a DataTable, but which are not exclusively used only for DataTables.\r\n     * These methods can be used by extension authors to save the duplication of\r\n     * code.\r\n     *\r\n     *  @namespace\r\n     */\r\n    DataTable.util = {\r\n        /**\r\n         * Throttle the calls to a function. Arguments and context are maintained\r\n         * for the throttled function.\r\n         *\r\n         * @param {function} fn Function to be called\r\n         * @param {integer} freq Call frequency in mS\r\n         * @return {function} Wrapped function\r\n         */\r\n        throttle: function ( fn, freq ) {\r\n            var\r\n                frequency = freq !== undefined ? freq : 200,\r\n                last,\r\n                timer;\r\n    \r\n            return function () {\r\n                var\r\n                    that = this,\r\n                    now  = +new Date(),\r\n                    args = arguments;\r\n    \r\n                if ( last && now < last + frequency ) {\r\n                    clearTimeout( timer );\r\n    \r\n                    timer = setTimeout( function () {\r\n                        last = undefined;\r\n                        fn.apply( that, args );\r\n                    }, frequency );\r\n                }\r\n                else {\r\n                    last = now;\r\n                    fn.apply( that, args );\r\n                }\r\n            };\r\n        },\r\n    \r\n    \r\n        /**\r\n         * Escape a string such that it can be used in a regular expression\r\n         *\r\n         *  @param {string} val string to escape\r\n         *  @returns {string} escaped string\r\n         */\r\n        escapeRegex: function ( val ) {\r\n            return val.replace( _re_escape_regex, '\\\\$1' );\r\n        },\r\n    \r\n        /**\r\n         * Create a function that will write to a nested object or array\r\n         * @param {*} source JSON notation string\r\n         * @returns Write function\r\n         */\r\n        set: function ( source ) {\r\n            if ( $.isPlainObject( source ) ) {\r\n                /* Unlike get, only the underscore (global) option is used for for\r\n                 * setting data since we don't know the type here. This is why an object\r\n                 * option is not documented for `mData` (which is read/write), but it is\r\n                 * for `mRender` which is read only.\r\n                 */\r\n                return DataTable.util.set( source._ );\r\n            }\r\n            else if ( source === null ) {\r\n                // Nothing to do when the data source is null\r\n                return function () {};\r\n            }\r\n            else if ( typeof source === 'function' ) {\r\n                return function (data, val, meta) {\r\n                    source( data, 'set', val, meta );\r\n                };\r\n            }\r\n            else if ( typeof source === 'string' && (source.indexOf('.') !== -1 ||\r\n                      source.indexOf('[') !== -1 || source.indexOf('(') !== -1) )\r\n            {\r\n                // Like the get, we need to get data from a nested object\r\n                var setData = function (data, val, src) {\r\n                    var a = _fnSplitObjNotation( src ), b;\r\n                    var aLast = a[a.length-1];\r\n                    var arrayNotation, funcNotation, o, innerSrc;\r\n        \r\n                    for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ ) {\r\n                        // Protect against prototype pollution\r\n                        if (a[i] === '__proto__' || a[i] === 'constructor') {\r\n                            throw new Error('Cannot set prototype values');\r\n                        }\r\n        \r\n                        // Check if we are dealing with an array notation request\r\n                        arrayNotation = a[i].match(__reArray);\r\n                        funcNotation = a[i].match(__reFn);\r\n        \r\n                        if ( arrayNotation ) {\r\n                            a[i] = a[i].replace(__reArray, '');\r\n                            data[ a[i] ] = [];\r\n        \r\n                            // Get the remainder of the nested object to set so we can recurse\r\n                            b = a.slice();\r\n                            b.splice( 0, i+1 );\r\n                            innerSrc = b.join('.');\r\n        \r\n                            // Traverse each entry in the array setting the properties requested\r\n                            if ( Array.isArray( val ) ) {\r\n                                for ( var j=0, jLen=val.length ; j<jLen ; j++ ) {\r\n                                    o = {};\r\n                                    setData( o, val[j], innerSrc );\r\n                                    data[ a[i] ].push( o );\r\n                                }\r\n                            }\r\n                            else {\r\n                                // We've been asked to save data to an array, but it\r\n                                // isn't array data to be saved. Best that can be done\r\n                                // is to just save the value.\r\n                                data[ a[i] ] = val;\r\n                            }\r\n        \r\n                            // The inner call to setData has already traversed through the remainder\r\n                            // of the source and has set the data, thus we can exit here\r\n                            return;\r\n                        }\r\n                        else if ( funcNotation ) {\r\n                            // Function call\r\n                            a[i] = a[i].replace(__reFn, '');\r\n                            data = data[ a[i] ]( val );\r\n                        }\r\n        \r\n                        // If the nested object doesn't currently exist - since we are\r\n                        // trying to set the value - create it\r\n                        if ( data[ a[i] ] === null || data[ a[i] ] === undefined ) {\r\n                            data[ a[i] ] = {};\r\n                        }\r\n                        data = data[ a[i] ];\r\n                    }\r\n        \r\n                    // Last item in the input - i.e, the actual set\r\n                    if ( aLast.match(__reFn ) ) {\r\n                        // Function call\r\n                        data = data[ aLast.replace(__reFn, '') ]( val );\r\n                    }\r\n                    else {\r\n                        // If array notation is used, we just want to strip it and use the property name\r\n                        // and assign the value. If it isn't used, then we get the result we want anyway\r\n                        data[ aLast.replace(__reArray, '') ] = val;\r\n                    }\r\n                };\r\n        \r\n                return function (data, val) { // meta is also passed in, but not used\r\n                    return setData( data, val, source );\r\n                };\r\n            }\r\n            else {\r\n                // Array or flat object mapping\r\n                return function (data, val) { // meta is also passed in, but not used\r\n                    data[source] = val;\r\n                };\r\n            }\r\n        },\r\n    \r\n        /**\r\n         * Create a function that will read nested objects from arrays, based on JSON notation\r\n         * @param {*} source JSON notation string\r\n         * @returns Value read\r\n         */\r\n        get: function ( source ) {\r\n            if ( $.isPlainObject( source ) ) {\r\n                // Build an object of get functions, and wrap them in a single call\r\n                var o = {};\r\n                $.each( source, function (key, val) {\r\n                    if ( val ) {\r\n                        o[key] = DataTable.util.get( val );\r\n                    }\r\n                } );\r\n        \r\n                return function (data, type, row, meta) {\r\n                    var t = o[type] || o._;\r\n                    return t !== undefined ?\r\n                        t(data, type, row, meta) :\r\n                        data;\r\n                };\r\n            }\r\n            else if ( source === null ) {\r\n                // Give an empty string for rendering / sorting etc\r\n                return function (data) { // type, row and meta also passed, but not used\r\n                    return data;\r\n                };\r\n            }\r\n            else if ( typeof source === 'function' ) {\r\n                return function (data, type, row, meta) {\r\n                    return source( data, type, row, meta );\r\n                };\r\n            }\r\n            else if ( typeof source === 'string' && (source.indexOf('.') !== -1 ||\r\n                      source.indexOf('[') !== -1 || source.indexOf('(') !== -1) )\r\n            {\r\n                /* If there is a . in the source string then the data source is in a\r\n                 * nested object so we loop over the data for each level to get the next\r\n                 * level down. On each loop we test for undefined, and if found immediately\r\n                 * return. This allows entire objects to be missing and sDefaultContent to\r\n                 * be used if defined, rather than throwing an error\r\n                 */\r\n                var fetchData = function (data, type, src) {\r\n                    var arrayNotation, funcNotation, out, innerSrc;\r\n        \r\n                    if ( src !== \"\" ) {\r\n                        var a = _fnSplitObjNotation( src );\r\n        \r\n                        for ( var i=0, iLen=a.length ; i<iLen ; i++ ) {\r\n                            // Check if we are dealing with special notation\r\n                            arrayNotation = a[i].match(__reArray);\r\n                            funcNotation = a[i].match(__reFn);\r\n        \r\n                            if ( arrayNotation ) {\r\n                                // Array notation\r\n                                a[i] = a[i].replace(__reArray, '');\r\n        \r\n                                // Condition allows simply [] to be passed in\r\n                                if ( a[i] !== \"\" ) {\r\n                                    data = data[ a[i] ];\r\n                                }\r\n                                out = [];\r\n        \r\n                                // Get the remainder of the nested object to get\r\n                                a.splice( 0, i+1 );\r\n                                innerSrc = a.join('.');\r\n        \r\n                                // Traverse each entry in the array getting the properties requested\r\n                                if ( Array.isArray( data ) ) {\r\n                                    for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {\r\n                                        out.push( fetchData( data[j], type, innerSrc ) );\r\n                                    }\r\n                                }\r\n        \r\n                                // If a string is given in between the array notation indicators, that\r\n                                // is used to join the strings together, otherwise an array is returned\r\n                                var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);\r\n                                data = (join===\"\") ? out : out.join(join);\r\n        \r\n                                // The inner call to fetchData has already traversed through the remainder\r\n                                // of the source requested, so we exit from the loop\r\n                                break;\r\n                            }\r\n                            else if ( funcNotation ) {\r\n                                // Function call\r\n                                a[i] = a[i].replace(__reFn, '');\r\n                                data = data[ a[i] ]();\r\n                                continue;\r\n                            }\r\n        \r\n                            if ( data === null || data[ a[i] ] === undefined ) {\r\n                                return undefined;\r\n                            }\r\n    \r\n                            data = data[ a[i] ];\r\n                        }\r\n                    }\r\n        \r\n                    return data;\r\n                };\r\n        \r\n                return function (data, type) { // row and meta also passed, but not used\r\n                    return fetchData( data, type, source );\r\n                };\r\n            }\r\n            else {\r\n                // Array or flat object mapping\r\n                return function (data, type) { // row and meta also passed, but not used\r\n                    return data[source];\r\n                };\r\n            }\r\n        }\r\n    };\r\n    \r\n    \r\n    \r\n    /**\r\n     * Create a mapping object that allows camel case parameters to be looked up\r\n     * for their Hungarian counterparts. The mapping is stored in a private\r\n     * parameter called `_hungarianMap` which can be accessed on the source object.\r\n     *  @param {object} o\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnHungarianMap ( o )\r\n    {\r\n        var\r\n            hungarian = 'a aa ai ao as b fn i m o s ',\r\n            match,\r\n            newKey,\r\n            map = {};\r\n    \r\n        $.each( o, function (key, val) {\r\n            match = key.match(/^([^A-Z]+?)([A-Z])/);\r\n    \r\n            if ( match && hungarian.indexOf(match[1]+' ') !== -1 )\r\n            {\r\n                newKey = key.replace( match[0], match[2].toLowerCase() );\r\n                map[ newKey ] = key;\r\n    \r\n                if ( match[1] === 'o' )\r\n                {\r\n                    _fnHungarianMap( o[key] );\r\n                }\r\n            }\r\n        } );\r\n    \r\n        o._hungarianMap = map;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Convert from camel case parameters to Hungarian, based on a Hungarian map\r\n     * created by _fnHungarianMap.\r\n     *  @param {object} src The model object which holds all parameters that can be\r\n     *    mapped.\r\n     *  @param {object} user The object to convert from camel case to Hungarian.\r\n     *  @param {boolean} force When set to `true`, properties which already have a\r\n     *    Hungarian value in the `user` object will be overwritten. Otherwise they\r\n     *    won't be.\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnCamelToHungarian ( src, user, force )\r\n    {\r\n        if ( ! src._hungarianMap ) {\r\n            _fnHungarianMap( src );\r\n        }\r\n    \r\n        var hungarianKey;\r\n    \r\n        $.each( user, function (key, val) {\r\n            hungarianKey = src._hungarianMap[ key ];\r\n    \r\n            if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )\r\n            {\r\n                // For objects, we need to buzz down into the object to copy parameters\r\n                if ( hungarianKey.charAt(0) === 'o' )\r\n                {\r\n                    // Copy the camelCase options over to the hungarian\r\n                    if ( ! user[ hungarianKey ] ) {\r\n                        user[ hungarianKey ] = {};\r\n                    }\r\n                    $.extend( true, user[hungarianKey], user[key] );\r\n    \r\n                    _fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );\r\n                }\r\n                else {\r\n                    user[hungarianKey] = user[ key ];\r\n                }\r\n            }\r\n        } );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Language compatibility - when certain options are given, and others aren't, we\r\n     * need to duplicate the values over, in order to provide backwards compatibility\r\n     * with older language files.\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnLanguageCompat( lang )\r\n    {\r\n        // Note the use of the Hungarian notation for the parameters in this method as\r\n        // this is called after the mapping of camelCase to Hungarian\r\n        var defaults = DataTable.defaults.oLanguage;\r\n    \r\n        // Default mapping\r\n        var defaultDecimal = defaults.sDecimal;\r\n        if ( defaultDecimal ) {\r\n            _addNumericSort( defaultDecimal );\r\n        }\r\n    \r\n        if ( lang ) {\r\n            var zeroRecords = lang.sZeroRecords;\r\n    \r\n            // Backwards compatibility - if there is no sEmptyTable given, then use the same as\r\n            // sZeroRecords - assuming that is given.\r\n            if ( ! lang.sEmptyTable && zeroRecords &&\r\n                defaults.sEmptyTable === \"No data available in table\" )\r\n            {\r\n                _fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );\r\n            }\r\n    \r\n            // Likewise with loading records\r\n            if ( ! lang.sLoadingRecords && zeroRecords &&\r\n                defaults.sLoadingRecords === \"Loading...\" )\r\n            {\r\n                _fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );\r\n            }\r\n    \r\n            // Old parameter name of the thousands separator mapped onto the new\r\n            if ( lang.sInfoThousands ) {\r\n                lang.sThousands = lang.sInfoThousands;\r\n            }\r\n    \r\n            var decimal = lang.sDecimal;\r\n            if ( decimal && defaultDecimal !== decimal ) {\r\n                _addNumericSort( decimal );\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Map one parameter onto another\r\n     *  @param {object} o Object to map\r\n     *  @param {*} knew The new parameter name\r\n     *  @param {*} old The old parameter name\r\n     */\r\n    var _fnCompatMap = function ( o, knew, old ) {\r\n        if ( o[ knew ] !== undefined ) {\r\n            o[ old ] = o[ knew ];\r\n        }\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Provide backwards compatibility for the main DT options. Note that the new\r\n     * options are mapped onto the old parameters, so this is an external interface\r\n     * change only.\r\n     *  @param {object} init Object to map\r\n     */\r\n    function _fnCompatOpts ( init )\r\n    {\r\n        _fnCompatMap( init, 'ordering',      'bSort' );\r\n        _fnCompatMap( init, 'orderMulti',    'bSortMulti' );\r\n        _fnCompatMap( init, 'orderClasses',  'bSortClasses' );\r\n        _fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );\r\n        _fnCompatMap( init, 'order',         'aaSorting' );\r\n        _fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );\r\n        _fnCompatMap( init, 'paging',        'bPaginate' );\r\n        _fnCompatMap( init, 'pagingType',    'sPaginationType' );\r\n        _fnCompatMap( init, 'pageLength',    'iDisplayLength' );\r\n        _fnCompatMap( init, 'searching',     'bFilter' );\r\n    \r\n        // Boolean initialisation of x-scrolling\r\n        if ( typeof init.sScrollX === 'boolean' ) {\r\n            init.sScrollX = init.sScrollX ? '100%' : '';\r\n        }\r\n        if ( typeof init.scrollX === 'boolean' ) {\r\n            init.scrollX = init.scrollX ? '100%' : '';\r\n        }\r\n    \r\n        // Column search objects are in an array, so it needs to be converted\r\n        // element by element\r\n        var searchCols = init.aoSearchCols;\r\n    \r\n        if ( searchCols ) {\r\n            for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {\r\n                if ( searchCols[i] ) {\r\n                    _fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Provide backwards compatibility for column options. Note that the new options\r\n     * are mapped onto the old parameters, so this is an external interface change\r\n     * only.\r\n     *  @param {object} init Object to map\r\n     */\r\n    function _fnCompatCols ( init )\r\n    {\r\n        _fnCompatMap( init, 'orderable',     'bSortable' );\r\n        _fnCompatMap( init, 'orderData',     'aDataSort' );\r\n        _fnCompatMap( init, 'orderSequence', 'asSorting' );\r\n        _fnCompatMap( init, 'orderDataType', 'sortDataType' );\r\n    \r\n        // orderData can be given as an integer\r\n        var dataSort = init.aDataSort;\r\n        if ( typeof dataSort === 'number' && ! Array.isArray( dataSort ) ) {\r\n            init.aDataSort = [ dataSort ];\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Browser feature detection for capabilities, quirks\r\n     *  @param {object} settings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnBrowserDetect( settings )\r\n    {\r\n        // We don't need to do this every time DataTables is constructed, the values\r\n        // calculated are specific to the browser and OS configuration which we\r\n        // don't expect to change between initialisations\r\n        if ( ! DataTable.__browser ) {\r\n            var browser = {};\r\n            DataTable.__browser = browser;\r\n    \r\n            // Scrolling feature / quirks detection\r\n            var n = $('<div/>')\r\n                .css( {\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: $(window).scrollLeft()*-1, // allow for scrolling\r\n                    height: 1,\r\n                    width: 1,\r\n                    overflow: 'hidden'\r\n                } )\r\n                .append(\r\n                    $('<div/>')\r\n                        .css( {\r\n                            position: 'absolute',\r\n                            top: 1,\r\n                            left: 1,\r\n                            width: 100,\r\n                            overflow: 'scroll'\r\n                        } )\r\n                        .append(\r\n                            $('<div/>')\r\n                                .css( {\r\n                                    width: '100%',\r\n                                    height: 10\r\n                                } )\r\n                        )\r\n                )\r\n                .appendTo( 'body' );\r\n    \r\n            var outer = n.children();\r\n            var inner = outer.children();\r\n    \r\n            // Numbers below, in order, are:\r\n            // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth\r\n            //\r\n            // IE6 XP:                           100 100 100  83\r\n            // IE7 Vista:                        100 100 100  83\r\n            // IE 8+ Windows:                     83  83 100  83\r\n            // Evergreen Windows:                 83  83 100  83\r\n            // Evergreen Mac with scrollbars:     85  85 100  85\r\n            // Evergreen Mac without scrollbars: 100 100 100 100\r\n    \r\n            // Get scrollbar width\r\n            browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;\r\n    \r\n            // IE6/7 will oversize a width 100% element inside a scrolling element, to\r\n            // include the width of the scrollbar, while other browsers ensure the inner\r\n            // element is contained without forcing scrolling\r\n            browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;\r\n    \r\n            // In rtl text layout, some browsers (most, but not all) will place the\r\n            // scrollbar on the left, rather than the right.\r\n            browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;\r\n    \r\n            // IE8- don't provide height and width for getBoundingClientRect\r\n            browser.bBounding = n[0].getBoundingClientRect().width ? true : false;\r\n    \r\n            n.remove();\r\n        }\r\n    \r\n        $.extend( settings.oBrowser, DataTable.__browser );\r\n        settings.oScroll.iBarWidth = DataTable.__browser.barWidth;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Array.prototype reduce[Right] method, used for browsers which don't support\r\n     * JS 1.6. Done this way to reduce code size, since we iterate either way\r\n     *  @param {object} settings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnReduce ( that, fn, init, start, end, inc )\r\n    {\r\n        var\r\n            i = start,\r\n            value,\r\n            isSet = false;\r\n    \r\n        if ( init !== undefined ) {\r\n            value = init;\r\n            isSet = true;\r\n        }\r\n    \r\n        while ( i !== end ) {\r\n            if ( ! that.hasOwnProperty(i) ) {\r\n                continue;\r\n            }\r\n    \r\n            value = isSet ?\r\n                fn( value, that[i], i, that ) :\r\n                that[i];\r\n    \r\n            isSet = true;\r\n            i += inc;\r\n        }\r\n    \r\n        return value;\r\n    }\r\n    \r\n    /**\r\n     * Add a column to the list used for the table with default values\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {node} nTh The th element for this column\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAddColumn( oSettings, nTh )\r\n    {\r\n        // Add column to aoColumns array\r\n        var oDefaults = DataTable.defaults.column;\r\n        var iCol = oSettings.aoColumns.length;\r\n        var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {\r\n            \"nTh\": nTh ? nTh : document.createElement('th'),\r\n            \"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',\r\n            \"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\r\n            \"mData\": oDefaults.mData ? oDefaults.mData : iCol,\r\n            idx: iCol\r\n        } );\r\n        oSettings.aoColumns.push( oCol );\r\n    \r\n        // Add search object for column specific search. Note that the `searchCols[ iCol ]`\r\n        // passed into extend can be undefined. This allows the user to give a default\r\n        // with only some of the parameters defined, and also not give a default\r\n        var searchCols = oSettings.aoPreSearchCols;\r\n        searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );\r\n    \r\n        // Use the default column options function to initialise classes etc\r\n        _fnColumnOptions( oSettings, iCol, $(nTh).data() );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Apply options for a column\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {int} iCol column index to consider\r\n     *  @param {object} oOptions object with sType, bVisible and bSearchable etc\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnColumnOptions( oSettings, iCol, oOptions )\r\n    {\r\n        var oCol = oSettings.aoColumns[ iCol ];\r\n        var oClasses = oSettings.oClasses;\r\n        var th = $(oCol.nTh);\r\n    \r\n        // Try to get width information from the DOM. We can't get it from CSS\r\n        // as we'd need to parse the CSS stylesheet. `width` option can override\r\n        if ( ! oCol.sWidthOrig ) {\r\n            // Width attribute\r\n            oCol.sWidthOrig = th.attr('width') || null;\r\n    \r\n            // Style attribute\r\n            var t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\r\n            if ( t ) {\r\n                oCol.sWidthOrig = t[1];\r\n            }\r\n        }\r\n    \r\n        /* User specified column options */\r\n        if ( oOptions !== undefined && oOptions !== null )\r\n        {\r\n            // Backwards compatibility\r\n            _fnCompatCols( oOptions );\r\n    \r\n            // Map camel case parameters to their Hungarian counterparts\r\n            _fnCamelToHungarian( DataTable.defaults.column, oOptions, true );\r\n    \r\n            /* Backwards compatibility for mDataProp */\r\n            if ( oOptions.mDataProp !== undefined && !oOptions.mData )\r\n            {\r\n                oOptions.mData = oOptions.mDataProp;\r\n            }\r\n    \r\n            if ( oOptions.sType )\r\n            {\r\n                oCol._sManualType = oOptions.sType;\r\n            }\r\n    \r\n            // `class` is a reserved word in Javascript, so we need to provide\r\n            // the ability to use a valid name for the camel case input\r\n            if ( oOptions.className && ! oOptions.sClass )\r\n            {\r\n                oOptions.sClass = oOptions.className;\r\n            }\r\n            if ( oOptions.sClass ) {\r\n                th.addClass( oOptions.sClass );\r\n            }\r\n    \r\n            $.extend( oCol, oOptions );\r\n            _fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );\r\n    \r\n            /* iDataSort to be applied (backwards compatibility), but aDataSort will take\r\n             * priority if defined\r\n             */\r\n            if ( oOptions.iDataSort !== undefined )\r\n            {\r\n                oCol.aDataSort = [ oOptions.iDataSort ];\r\n            }\r\n            _fnMap( oCol, oOptions, \"aDataSort\" );\r\n        }\r\n    \r\n        /* Cache the data get and set functions for speed */\r\n        var mDataSrc = oCol.mData;\r\n        var mData = _fnGetObjectDataFn( mDataSrc );\r\n        var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;\r\n    \r\n        var attrTest = function( src ) {\r\n            return typeof src === 'string' && src.indexOf('@') !== -1;\r\n        };\r\n        oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (\r\n            attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)\r\n        );\r\n        oCol._setter = null;\r\n    \r\n        oCol.fnGetData = function (rowData, type, meta) {\r\n            var innerData = mData( rowData, type, undefined, meta );\r\n    \r\n            return mRender && type ?\r\n                mRender( innerData, type, rowData, meta ) :\r\n                innerData;\r\n        };\r\n        oCol.fnSetData = function ( rowData, val, meta ) {\r\n            return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );\r\n        };\r\n    \r\n        // Indicate if DataTables should read DOM data as an object or array\r\n        // Used in _fnGetRowElements\r\n        if ( typeof mDataSrc !== 'number' ) {\r\n            oSettings._rowReadObject = true;\r\n        }\r\n    \r\n        /* Feature sorting overrides column specific when off */\r\n        if ( !oSettings.oFeatures.bSort )\r\n        {\r\n            oCol.bSortable = false;\r\n            th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called\r\n        }\r\n    \r\n        /* Check that the class assignment is correct for sorting */\r\n        var bAsc = $.inArray('asc', oCol.asSorting) !== -1;\r\n        var bDesc = $.inArray('desc', oCol.asSorting) !== -1;\r\n        if ( !oCol.bSortable || (!bAsc && !bDesc) )\r\n        {\r\n            oCol.sSortingClass = oClasses.sSortableNone;\r\n            oCol.sSortingClassJUI = \"\";\r\n        }\r\n        else if ( bAsc && !bDesc )\r\n        {\r\n            oCol.sSortingClass = oClasses.sSortableAsc;\r\n            oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\r\n        }\r\n        else if ( !bAsc && bDesc )\r\n        {\r\n            oCol.sSortingClass = oClasses.sSortableDesc;\r\n            oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\r\n        }\r\n        else\r\n        {\r\n            oCol.sSortingClass = oClasses.sSortable;\r\n            oCol.sSortingClassJUI = oClasses.sSortJUI;\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Adjust the table column widths for new data. Note: you would probably want to\r\n     * do a redraw after calling this function!\r\n     *  @param {object} settings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAdjustColumnSizing ( settings )\r\n    {\r\n        /* Not interested in doing column width calculation if auto-width is disabled */\r\n        if ( settings.oFeatures.bAutoWidth !== false )\r\n        {\r\n            var columns = settings.aoColumns;\r\n    \r\n            _fnCalculateColumnWidths( settings );\r\n            for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )\r\n            {\r\n                columns[i].nTh.style.width = columns[i].sWidth;\r\n            }\r\n        }\r\n    \r\n        var scroll = settings.oScroll;\r\n        if ( scroll.sY !== '' || scroll.sX !== '')\r\n        {\r\n            _fnScrollDraw( settings );\r\n        }\r\n    \r\n        _fnCallbackFire( settings, null, 'column-sizing', [settings] );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Convert the index of a visible column to the index in the data array (take account\r\n     * of hidden columns)\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {int} iMatch Visible column index to lookup\r\n     *  @returns {int} i the data index\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnVisibleToColumnIndex( oSettings, iMatch )\r\n    {\r\n        var aiVis = _fnGetColumns( oSettings, 'bVisible' );\r\n    \r\n        return typeof aiVis[iMatch] === 'number' ?\r\n            aiVis[iMatch] :\r\n            null;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Convert the index of an index in the data array and convert it to the visible\r\n     *   column index (take account of hidden columns)\r\n     *  @param {int} iMatch Column index to lookup\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @returns {int} i the data index\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnColumnIndexToVisible( oSettings, iMatch )\r\n    {\r\n        var aiVis = _fnGetColumns( oSettings, 'bVisible' );\r\n        var iPos = $.inArray( iMatch, aiVis );\r\n    \r\n        return iPos !== -1 ? iPos : null;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get the number of visible columns\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @returns {int} i the number of visible columns\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnVisbleColumns( oSettings )\r\n    {\r\n        var vis = 0;\r\n    \r\n        // No reduce in IE8, use a loop for now\r\n        $.each( oSettings.aoColumns, function ( i, col ) {\r\n            if ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {\r\n                vis++;\r\n            }\r\n        } );\r\n    \r\n        return vis;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get an array of column indexes that match a given property\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {string} sParam Parameter in aoColumns to look for - typically\r\n     *    bVisible or bSearchable\r\n     *  @returns {array} Array of indexes with matched properties\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnGetColumns( oSettings, sParam )\r\n    {\r\n        var a = [];\r\n    \r\n        $.map( oSettings.aoColumns, function(val, i) {\r\n            if ( val[sParam] ) {\r\n                a.push( i );\r\n            }\r\n        } );\r\n    \r\n        return a;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Calculate the 'type' of a column\r\n     *  @param {object} settings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnColumnTypes ( settings )\r\n    {\r\n        var columns = settings.aoColumns;\r\n        var data = settings.aoData;\r\n        var types = DataTable.ext.type.detect;\r\n        var i, ien, j, jen, k, ken;\r\n        var col, cell, detectedType, cache;\r\n    \r\n        // For each column, spin over the \r\n        for ( i=0, ien=columns.length ; i<ien ; i++ ) {\r\n            col = columns[i];\r\n            cache = [];\r\n    \r\n            if ( ! col.sType && col._sManualType ) {\r\n                col.sType = col._sManualType;\r\n            }\r\n            else if ( ! col.sType ) {\r\n                for ( j=0, jen=types.length ; j<jen ; j++ ) {\r\n                    for ( k=0, ken=data.length ; k<ken ; k++ ) {\r\n                        // Use a cache array so we only need to get the type data\r\n                        // from the formatter once (when using multiple detectors)\r\n                        if ( cache[k] === undefined ) {\r\n                            cache[k] = _fnGetCellData( settings, k, i, 'type' );\r\n                        }\r\n    \r\n                        detectedType = types[j]( cache[k], settings );\r\n    \r\n                        // If null, then this type can't apply to this column, so\r\n                        // rather than testing all cells, break out. There is an\r\n                        // exception for the last type which is `html`. We need to\r\n                        // scan all rows since it is possible to mix string and HTML\r\n                        // types\r\n                        if ( ! detectedType && j !== types.length-1 ) {\r\n                            break;\r\n                        }\r\n    \r\n                        // Only a single match is needed for html type since it is\r\n                        // bottom of the pile and very similar to string - but it\r\n                        // must not be empty\r\n                        if ( detectedType === 'html' && ! _empty(cache[k]) ) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // Type is valid for all data points in the column - use this\r\n                    // type\r\n                    if ( detectedType ) {\r\n                        col.sType = detectedType;\r\n                        break;\r\n                    }\r\n                }\r\n    \r\n                // Fall back - if no type was detected, always use string\r\n                if ( ! col.sType ) {\r\n                    col.sType = 'string';\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Take the column definitions and static columns arrays and calculate how\r\n     * they relate to column indexes. The callback function will then apply the\r\n     * definition found for a column to a suitable configuration object.\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\r\n     *  @param {array} aoCols The aoColumns array that defines columns individually\r\n     *  @param {function} fn Callback function - takes two parameters, the calculated\r\n     *    column index and the definition for that column.\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )\r\n    {\r\n        var i, iLen, j, jLen, k, kLen, def;\r\n        var columns = oSettings.aoColumns;\r\n    \r\n        // Column definitions with aTargets\r\n        if ( aoColDefs )\r\n        {\r\n            /* Loop over the definitions array - loop in reverse so first instance has priority */\r\n            for ( i=aoColDefs.length-1 ; i>=0 ; i-- )\r\n            {\r\n                def = aoColDefs[i];\r\n    \r\n                /* Each definition can target multiple columns, as it is an array */\r\n                var aTargets = def.targets !== undefined ?\r\n                    def.targets :\r\n                    def.aTargets;\r\n    \r\n                if ( ! Array.isArray( aTargets ) )\r\n                {\r\n                    aTargets = [ aTargets ];\r\n                }\r\n    \r\n                for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )\r\n                {\r\n                    if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )\r\n                    {\r\n                        /* Add columns that we don't yet know about */\r\n                        while( columns.length <= aTargets[j] )\r\n                        {\r\n                            _fnAddColumn( oSettings );\r\n                        }\r\n    \r\n                        /* Integer, basic index */\r\n                        fn( aTargets[j], def );\r\n                    }\r\n                    else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )\r\n                    {\r\n                        /* Negative integer, right to left column counting */\r\n                        fn( columns.length+aTargets[j], def );\r\n                    }\r\n                    else if ( typeof aTargets[j] === 'string' )\r\n                    {\r\n                        /* Class name matching on TH element */\r\n                        for ( k=0, kLen=columns.length ; k<kLen ; k++ )\r\n                        {\r\n                            if ( aTargets[j] == \"_all\" ||\r\n                                 $(columns[k].nTh).hasClass( aTargets[j] ) )\r\n                            {\r\n                                fn( k, def );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        // Statically defined columns array\r\n        if ( aoCols )\r\n        {\r\n            for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )\r\n            {\r\n                fn( i, aoCols[i] );\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Add a data array to the table, creating DOM node etc. This is the parallel to\r\n     * _fnGatherData, but for adding rows from a Javascript source, rather than a\r\n     * DOM source.\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {array} aData data array to be added\r\n     *  @param {node} [nTr] TR element to add to the table - optional. If not given,\r\n     *    DataTables will create a row automatically\r\n     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\r\n     *    if nTr is.\r\n     *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAddData ( oSettings, aDataIn, nTr, anTds )\r\n    {\r\n        /* Create the object for storing information about this new row */\r\n        var iRow = oSettings.aoData.length;\r\n        var oData = $.extend( true, {}, DataTable.models.oRow, {\r\n            src: nTr ? 'dom' : 'data',\r\n            idx: iRow\r\n        } );\r\n    \r\n        oData._aData = aDataIn;\r\n        oSettings.aoData.push( oData );\r\n    \r\n        /* Create the cells */\r\n        var nTd, sThisType;\r\n        var columns = oSettings.aoColumns;\r\n    \r\n        // Invalidate the column types as the new data needs to be revalidated\r\n        for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\r\n        {\r\n            columns[i].sType = null;\r\n        }\r\n    \r\n        /* Add to the display array */\r\n        oSettings.aiDisplayMaster.push( iRow );\r\n    \r\n        var id = oSettings.rowIdFn( aDataIn );\r\n        if ( id !== undefined ) {\r\n            oSettings.aIds[ id ] = oData;\r\n        }\r\n    \r\n        /* Create the DOM information, or register it if already present */\r\n        if ( nTr || ! oSettings.oFeatures.bDeferRender )\r\n        {\r\n            _fnCreateTr( oSettings, iRow, nTr, anTds );\r\n        }\r\n    \r\n        return iRow;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Add one or more TR elements to the table. Generally we'd expect to\r\n     * use this for reading data from a DOM sourced table, but it could be\r\n     * used for an TR element. Note that if a TR is given, it is used (i.e.\r\n     * it is not cloned).\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {array|node|jQuery} trs The TR element(s) to add to the table\r\n     *  @returns {array} Array of indexes for the added rows\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAddTr( settings, trs )\r\n    {\r\n        var row;\r\n    \r\n        // Allow an individual node to be passed in\r\n        if ( ! (trs instanceof $) ) {\r\n            trs = $(trs);\r\n        }\r\n    \r\n        return trs.map( function (i, el) {\r\n            row = _fnGetRowElements( settings, el );\r\n            return _fnAddData( settings, row.data, el, row.cells );\r\n        } );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Take a TR element and convert it to an index in aoData\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {node} n the TR element to find\r\n     *  @returns {int} index if the node is found, null if not\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnNodeToDataIndex( oSettings, n )\r\n    {\r\n        return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Take a TD element and convert it into a column data index (not the visible index)\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {int} iRow The row number the TD/TH can be found in\r\n     *  @param {node} n The TD/TH element to find\r\n     *  @returns {int} index if the node is found, -1 if not\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnNodeToColumnIndex( oSettings, iRow, n )\r\n    {\r\n        return $.inArray( n, oSettings.aoData[ iRow ].anCells );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get the data for a given cell from the internal cache, taking into account data mapping\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {int} rowIdx aoData row id\r\n     *  @param {int} colIdx Column index\r\n     *  @param {string} type data get type ('display', 'type' 'filter|search' 'sort|order')\r\n     *  @returns {*} Cell data\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnGetCellData( settings, rowIdx, colIdx, type )\r\n    {\r\n        if (type === 'search') {\r\n            type = 'filter';\r\n        }\r\n        else if (type === 'order') {\r\n            type = 'sort';\r\n        }\r\n    \r\n        var draw           = settings.iDraw;\r\n        var col            = settings.aoColumns[colIdx];\r\n        var rowData        = settings.aoData[rowIdx]._aData;\r\n        var defaultContent = col.sDefaultContent;\r\n        var cellData       = col.fnGetData( rowData, type, {\r\n            settings: settings,\r\n            row:      rowIdx,\r\n            col:      colIdx\r\n        } );\r\n    \r\n        if ( cellData === undefined ) {\r\n            if ( settings.iDrawError != draw && defaultContent === null ) {\r\n                _fnLog( settings, 0, \"Requested unknown parameter \"+\r\n                    (typeof col.mData=='function' ? '{function}' : \"'\"+col.mData+\"'\")+\r\n                    \" for row \"+rowIdx+\", column \"+colIdx, 4 );\r\n                settings.iDrawError = draw;\r\n            }\r\n            return defaultContent;\r\n        }\r\n    \r\n        // When the data source is null and a specific data type is requested (i.e.\r\n        // not the original data), we can use default column data\r\n        if ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {\r\n            cellData = defaultContent;\r\n        }\r\n        else if ( typeof cellData === 'function' ) {\r\n            // If the data source is a function, then we run it and use the return,\r\n            // executing in the scope of the data object (for instances)\r\n            return cellData.call( rowData );\r\n        }\r\n    \r\n        if ( cellData === null && type === 'display' ) {\r\n            return '';\r\n        }\r\n    \r\n        if ( type === 'filter' ) {\r\n            var fomatters = DataTable.ext.type.search;\r\n    \r\n            if ( fomatters[ col.sType ] ) {\r\n                cellData = fomatters[ col.sType ]( cellData );\r\n            }\r\n        }\r\n    \r\n        return cellData;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Set the value for a specific cell, into the internal data cache\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {int} rowIdx aoData row id\r\n     *  @param {int} colIdx Column index\r\n     *  @param {*} val Value to set\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSetCellData( settings, rowIdx, colIdx, val )\r\n    {\r\n        var col     = settings.aoColumns[colIdx];\r\n        var rowData = settings.aoData[rowIdx]._aData;\r\n    \r\n        col.fnSetData( rowData, val, {\r\n            settings: settings,\r\n            row:      rowIdx,\r\n            col:      colIdx\r\n        }  );\r\n    }\r\n    \r\n    \r\n    // Private variable that is used to match action syntax in the data property object\r\n    var __reArray = /\\[.*?\\]$/;\r\n    var __reFn = /\\(\\)$/;\r\n    \r\n    /**\r\n     * Split string on periods, taking into account escaped periods\r\n     * @param  {string} str String to split\r\n     * @return {array} Split string\r\n     */\r\n    function _fnSplitObjNotation( str )\r\n    {\r\n        return $.map( str.match(/(\\\\.|[^\\.])+/g) || [''], function ( s ) {\r\n            return s.replace(/\\\\\\./g, '.');\r\n        } );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Return a function that can be used to get data from a source object, taking\r\n     * into account the ability to use nested objects as a source\r\n     *  @param {string|int|function} mSource The data source for the object\r\n     *  @returns {function} Data get function\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    var _fnGetObjectDataFn = DataTable.util.get;\r\n    \r\n    \r\n    /**\r\n     * Return a function that can be used to set data from a source object, taking\r\n     * into account the ability to use nested objects as a source\r\n     *  @param {string|int|function} mSource The data source for the object\r\n     *  @returns {function} Data set function\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    var _fnSetObjectDataFn = DataTable.util.set;\r\n    \r\n    \r\n    /**\r\n     * Return an array with the full table data\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @returns array {array} aData Master data array\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnGetDataMaster ( settings )\r\n    {\r\n        return _pluck( settings.aoData, '_aData' );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Nuke the table\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnClearTable( settings )\r\n    {\r\n        settings.aoData.length = 0;\r\n        settings.aiDisplayMaster.length = 0;\r\n        settings.aiDisplay.length = 0;\r\n        settings.aIds = {};\r\n    }\r\n    \r\n    \r\n     /**\r\n     * Take an array of integers (index array) and remove a target integer (value - not\r\n     * the key!)\r\n     *  @param {array} a Index array to target\r\n     *  @param {int} iTarget value to find\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnDeleteIndex( a, iTarget, splice )\r\n    {\r\n        var iTargetIndex = -1;\r\n    \r\n        for ( var i=0, iLen=a.length ; i<iLen ; i++ )\r\n        {\r\n            if ( a[i] == iTarget )\r\n            {\r\n                iTargetIndex = i;\r\n            }\r\n            else if ( a[i] > iTarget )\r\n            {\r\n                a[i]--;\r\n            }\r\n        }\r\n    \r\n        if ( iTargetIndex != -1 && splice === undefined )\r\n        {\r\n            a.splice( iTargetIndex, 1 );\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Mark cached data as invalid such that a re-read of the data will occur when\r\n     * the cached data is next requested. Also update from the data source object.\r\n     *\r\n     * @param {object} settings DataTables settings object\r\n     * @param {int}    rowIdx   Row index to invalidate\r\n     * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\r\n     *     or 'data'\r\n     * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\r\n     *     row will be invalidated\r\n     * @memberof DataTable#oApi\r\n     *\r\n     * @todo For the modularisation of v1.11 this will need to become a callback, so\r\n     *   the sort and filter methods can subscribe to it. That will required\r\n     *   initialisation options for sorting, which is why it is not already baked in\r\n     */\r\n    function _fnInvalidate( settings, rowIdx, src, colIdx )\r\n    {\r\n        var row = settings.aoData[ rowIdx ];\r\n        var i, ien;\r\n        var cellWrite = function ( cell, col ) {\r\n            // This is very frustrating, but in IE if you just write directly\r\n            // to innerHTML, and elements that are overwritten are GC'ed,\r\n            // even if there is a reference to them elsewhere\r\n            while ( cell.childNodes.length ) {\r\n                cell.removeChild( cell.firstChild );\r\n            }\r\n    \r\n            cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );\r\n        };\r\n    \r\n        // Are we reading last data from DOM or the data object?\r\n        if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {\r\n            // Read the data from the DOM\r\n            row._aData = _fnGetRowElements(\r\n                    settings, row, colIdx, colIdx === undefined ? undefined : row._aData\r\n                )\r\n                .data;\r\n        }\r\n        else {\r\n            // Reading from data object, update the DOM\r\n            var cells = row.anCells;\r\n    \r\n            if ( cells ) {\r\n                if ( colIdx !== undefined ) {\r\n                    cellWrite( cells[colIdx], colIdx );\r\n                }\r\n                else {\r\n                    for ( i=0, ien=cells.length ; i<ien ; i++ ) {\r\n                        cellWrite( cells[i], i );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        // For both row and cell invalidation, the cached data for sorting and\r\n        // filtering is nulled out\r\n        row._aSortData = null;\r\n        row._aFilterData = null;\r\n    \r\n        // Invalidate the type for a specific column (if given) or all columns since\r\n        // the data might have changed\r\n        var cols = settings.aoColumns;\r\n        if ( colIdx !== undefined ) {\r\n            cols[ colIdx ].sType = null;\r\n        }\r\n        else {\r\n            for ( i=0, ien=cols.length ; i<ien ; i++ ) {\r\n                cols[i].sType = null;\r\n            }\r\n    \r\n            // Update DataTables special `DT_*` attributes for the row\r\n            _fnRowAttributes( settings, row );\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Build a data source object from an HTML row, reading the contents of the\r\n     * cells that are in the row.\r\n     *\r\n     * @param {object} settings DataTables settings object\r\n     * @param {node|object} TR element from which to read data or existing row\r\n     *   object from which to re-read the data from the cells\r\n     * @param {int} [colIdx] Optional column index\r\n     * @param {array|object} [d] Data source object. If `colIdx` is given then this\r\n     *   parameter should also be given and will be used to write the data into.\r\n     *   Only the column in question will be written\r\n     * @returns {object} Object with two parameters: `data` the data read, in\r\n     *   document order, and `cells` and array of nodes (they can be useful to the\r\n     *   caller, so rather than needing a second traversal to get them, just return\r\n     *   them from here).\r\n     * @memberof DataTable#oApi\r\n     */\r\n    function _fnGetRowElements( settings, row, colIdx, d )\r\n    {\r\n        var\r\n            tds = [],\r\n            td = row.firstChild,\r\n            name, col, o, i=0, contents,\r\n            columns = settings.aoColumns,\r\n            objectRead = settings._rowReadObject;\r\n    \r\n        // Allow the data object to be passed in, or construct\r\n        d = d !== undefined ?\r\n            d :\r\n            objectRead ?\r\n                {} :\r\n                [];\r\n    \r\n        var attr = function ( str, td  ) {\r\n            if ( typeof str === 'string' ) {\r\n                var idx = str.indexOf('@');\r\n    \r\n                if ( idx !== -1 ) {\r\n                    var attr = str.substring( idx+1 );\r\n                    var setter = _fnSetObjectDataFn( str );\r\n                    setter( d, td.getAttribute( attr ) );\r\n                }\r\n            }\r\n        };\r\n    \r\n        // Read data from a cell and store into the data object\r\n        var cellProcess = function ( cell ) {\r\n            if ( colIdx === undefined || colIdx === i ) {\r\n                col = columns[i];\r\n                contents = (cell.innerHTML).trim();\r\n    \r\n                if ( col && col._bAttrSrc ) {\r\n                    var setter = _fnSetObjectDataFn( col.mData._ );\r\n                    setter( d, contents );\r\n    \r\n                    attr( col.mData.sort, cell );\r\n                    attr( col.mData.type, cell );\r\n                    attr( col.mData.filter, cell );\r\n                }\r\n                else {\r\n                    // Depending on the `data` option for the columns the data can\r\n                    // be read to either an object or an array.\r\n                    if ( objectRead ) {\r\n                        if ( ! col._setter ) {\r\n                            // Cache the setter function\r\n                            col._setter = _fnSetObjectDataFn( col.mData );\r\n                        }\r\n                        col._setter( d, contents );\r\n                    }\r\n                    else {\r\n                        d[i] = contents;\r\n                    }\r\n                }\r\n            }\r\n    \r\n            i++;\r\n        };\r\n    \r\n        if ( td ) {\r\n            // `tr` element was passed in\r\n            while ( td ) {\r\n                name = td.nodeName.toUpperCase();\r\n    \r\n                if ( name == \"TD\" || name == \"TH\" ) {\r\n                    cellProcess( td );\r\n                    tds.push( td );\r\n                }\r\n    \r\n                td = td.nextSibling;\r\n            }\r\n        }\r\n        else {\r\n            // Existing row object passed in\r\n            tds = row.anCells;\r\n    \r\n            for ( var j=0, jen=tds.length ; j<jen ; j++ ) {\r\n                cellProcess( tds[j] );\r\n            }\r\n        }\r\n    \r\n        // Read the ID from the DOM if present\r\n        var rowNode = row.firstChild ? row : row.nTr;\r\n    \r\n        if ( rowNode ) {\r\n            var id = rowNode.getAttribute( 'id' );\r\n    \r\n            if ( id ) {\r\n                _fnSetObjectDataFn( settings.rowId )( d, id );\r\n            }\r\n        }\r\n    \r\n        return {\r\n            data: d,\r\n            cells: tds\r\n        };\r\n    }\r\n    /**\r\n     * Create a new TR element (and it's TD children) for a row\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {int} iRow Row to consider\r\n     *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\r\n     *    DataTables will create a row automatically\r\n     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\r\n     *    if nTr is.\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )\r\n    {\r\n        var\r\n            row = oSettings.aoData[iRow],\r\n            rowData = row._aData,\r\n            cells = [],\r\n            nTr, nTd, oCol,\r\n            i, iLen, create;\r\n    \r\n        if ( row.nTr === null )\r\n        {\r\n            nTr = nTrIn || document.createElement('tr');\r\n    \r\n            row.nTr = nTr;\r\n            row.anCells = cells;\r\n    \r\n            /* Use a private property on the node to allow reserve mapping from the node\r\n             * to the aoData array for fast look up\r\n             */\r\n            nTr._DT_RowIndex = iRow;\r\n    \r\n            /* Special parameters can be given by the data source to be used on the row */\r\n            _fnRowAttributes( oSettings, row );\r\n    \r\n            /* Process each column */\r\n            for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )\r\n            {\r\n                oCol = oSettings.aoColumns[i];\r\n                create = nTrIn ? false : true;\r\n    \r\n                nTd = create ? document.createElement( oCol.sCellType ) : anTds[i];\r\n                nTd._DT_CellIndex = {\r\n                    row: iRow,\r\n                    column: i\r\n                };\r\n                \r\n                cells.push( nTd );\r\n    \r\n                // Need to create the HTML if new, or if a rendering function is defined\r\n                if ( create || ((oCol.mRender || oCol.mData !== i) &&\r\n                     (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')\r\n                )) {\r\n                    nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );\r\n                }\r\n    \r\n                /* Add user defined class */\r\n                if ( oCol.sClass )\r\n                {\r\n                    nTd.className += ' '+oCol.sClass;\r\n                }\r\n    \r\n                // Visibility - add or remove as required\r\n                if ( oCol.bVisible && ! nTrIn )\r\n                {\r\n                    nTr.appendChild( nTd );\r\n                }\r\n                else if ( ! oCol.bVisible && nTrIn )\r\n                {\r\n                    nTd.parentNode.removeChild( nTd );\r\n                }\r\n    \r\n                if ( oCol.fnCreatedCell )\r\n                {\r\n                    oCol.fnCreatedCell.call( oSettings.oInstance,\r\n                        nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i\r\n                    );\r\n                }\r\n            }\r\n    \r\n            _fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells] );\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Add attributes to a row based on the special `DT_*` parameters in a data\r\n     * source object.\r\n     *  @param {object} settings DataTables settings object\r\n     *  @param {object} DataTables row object for the row to be modified\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnRowAttributes( settings, row )\r\n    {\r\n        var tr = row.nTr;\r\n        var data = row._aData;\r\n    \r\n        if ( tr ) {\r\n            var id = settings.rowIdFn( data );\r\n    \r\n            if ( id ) {\r\n                tr.id = id;\r\n            }\r\n    \r\n            if ( data.DT_RowClass ) {\r\n                // Remove any classes added by DT_RowClass before\r\n                var a = data.DT_RowClass.split(' ');\r\n                row.__rowc = row.__rowc ?\r\n                    _unique( row.__rowc.concat( a ) ) :\r\n                    a;\r\n    \r\n                $(tr)\r\n                    .removeClass( row.__rowc.join(' ') )\r\n                    .addClass( data.DT_RowClass );\r\n            }\r\n    \r\n            if ( data.DT_RowAttr ) {\r\n                $(tr).attr( data.DT_RowAttr );\r\n            }\r\n    \r\n            if ( data.DT_RowData ) {\r\n                $(tr).data( data.DT_RowData );\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Create the HTML header for the table\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnBuildHead( oSettings )\r\n    {\r\n        var i, ien, cell, row, column;\r\n        var thead = oSettings.nTHead;\r\n        var tfoot = oSettings.nTFoot;\r\n        var createHeader = $('th, td', thead).length === 0;\r\n        var classes = oSettings.oClasses;\r\n        var columns = oSettings.aoColumns;\r\n    \r\n        if ( createHeader ) {\r\n            row = $('<tr/>').appendTo( thead );\r\n        }\r\n    \r\n        for ( i=0, ien=columns.length ; i<ien ; i++ ) {\r\n            column = columns[i];\r\n            cell = $( column.nTh ).addClass( column.sClass );\r\n    \r\n            if ( createHeader ) {\r\n                cell.appendTo( row );\r\n            }\r\n    \r\n            // 1.11 move into sorting\r\n            if ( oSettings.oFeatures.bSort ) {\r\n                cell.addClass( column.sSortingClass );\r\n    \r\n                if ( column.bSortable !== false ) {\r\n                    cell\r\n                        .attr( 'tabindex', oSettings.iTabIndex )\r\n                        .attr( 'aria-controls', oSettings.sTableId );\r\n    \r\n                    _fnSortAttachListener( oSettings, column.nTh, i );\r\n                }\r\n            }\r\n    \r\n            if ( column.sTitle != cell[0].innerHTML ) {\r\n                cell.html( column.sTitle );\r\n            }\r\n    \r\n            _fnRenderer( oSettings, 'header' )(\r\n                oSettings, cell, column, classes\r\n            );\r\n        }\r\n    \r\n        if ( createHeader ) {\r\n            _fnDetectHeader( oSettings.aoHeader, thead );\r\n        }\r\n    \r\n        /* Deal with the footer - add classes if required */\r\n        $(thead).children('tr').children('th, td').addClass( classes.sHeaderTH );\r\n        $(tfoot).children('tr').children('th, td').addClass( classes.sFooterTH );\r\n    \r\n        // Cache the footer cells. Note that we only take the cells from the first\r\n        // row in the footer. If there is more than one row the user wants to\r\n        // interact with, they need to use the table().foot() method. Note also this\r\n        // allows cells to be used for multiple columns using colspan\r\n        if ( tfoot !== null ) {\r\n            var cells = oSettings.aoFooter[0];\r\n    \r\n            for ( i=0, ien=cells.length ; i<ien ; i++ ) {\r\n                column = columns[i];\r\n                column.nTf = cells[i].cell;\r\n    \r\n                if ( column.sClass ) {\r\n                    $(column.nTf).addClass( column.sClass );\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Draw the header (or footer) element based on the column visibility states. The\r\n     * methodology here is to use the layout array from _fnDetectHeader, modified for\r\n     * the instantaneous column visibility, to construct the new layout. The grid is\r\n     * traversed over cell at a time in a rows x columns grid fashion, although each\r\n     * cell insert can cover multiple elements in the grid - which is tracks using the\r\n     * aApplied array. Cell inserts in the grid will only occur where there isn't\r\n     * already a cell in that position.\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param array {objects} aoSource Layout array from _fnDetectHeader\r\n     *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnDrawHead( oSettings, aoSource, bIncludeHidden )\r\n    {\r\n        var i, iLen, j, jLen, k, kLen, n, nLocalTr;\r\n        var aoLocal = [];\r\n        var aApplied = [];\r\n        var iColumns = oSettings.aoColumns.length;\r\n        var iRowspan, iColspan;\r\n    \r\n        if ( ! aoSource )\r\n        {\r\n            return;\r\n        }\r\n    \r\n        if (  bIncludeHidden === undefined )\r\n        {\r\n            bIncludeHidden = false;\r\n        }\r\n    \r\n        /* Make a copy of the master layout array, but without the visible columns in it */\r\n        for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )\r\n        {\r\n            aoLocal[i] = aoSource[i].slice();\r\n            aoLocal[i].nTr = aoSource[i].nTr;\r\n    \r\n            /* Remove any columns which are currently hidden */\r\n            for ( j=iColumns-1 ; j>=0 ; j-- )\r\n            {\r\n                if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )\r\n                {\r\n                    aoLocal[i].splice( j, 1 );\r\n                }\r\n            }\r\n    \r\n            /* Prep the applied array - it needs an element for each row */\r\n            aApplied.push( [] );\r\n        }\r\n    \r\n        for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )\r\n        {\r\n            nLocalTr = aoLocal[i].nTr;\r\n    \r\n            /* All cells are going to be replaced, so empty out the row */\r\n            if ( nLocalTr )\r\n            {\r\n                while( (n = nLocalTr.firstChild) )\r\n                {\r\n                    nLocalTr.removeChild( n );\r\n                }\r\n            }\r\n    \r\n            for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )\r\n            {\r\n                iRowspan = 1;\r\n                iColspan = 1;\r\n    \r\n                /* Check to see if there is already a cell (row/colspan) covering our target\r\n                 * insert point. If there is, then there is nothing to do.\r\n                 */\r\n                if ( aApplied[i][j] === undefined )\r\n                {\r\n                    nLocalTr.appendChild( aoLocal[i][j].cell );\r\n                    aApplied[i][j] = 1;\r\n    \r\n                    /* Expand the cell to cover as many rows as needed */\r\n                    while ( aoLocal[i+iRowspan] !== undefined &&\r\n                            aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )\r\n                    {\r\n                        aApplied[i+iRowspan][j] = 1;\r\n                        iRowspan++;\r\n                    }\r\n    \r\n                    /* Expand the cell to cover as many columns as needed */\r\n                    while ( aoLocal[i][j+iColspan] !== undefined &&\r\n                            aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )\r\n                    {\r\n                        /* Must update the applied array over the rows for the columns */\r\n                        for ( k=0 ; k<iRowspan ; k++ )\r\n                        {\r\n                            aApplied[i+k][j+iColspan] = 1;\r\n                        }\r\n                        iColspan++;\r\n                    }\r\n    \r\n                    /* Do the actual expansion in the DOM */\r\n                    $(aoLocal[i][j].cell)\r\n                        .attr('rowspan', iRowspan)\r\n                        .attr('colspan', iColspan);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Insert the required TR nodes into the table for display\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param ajaxComplete true after ajax call to complete rendering\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnDraw( oSettings, ajaxComplete )\r\n    {\r\n        // Allow for state saving and a custom start position\r\n        _fnStart( oSettings );\r\n    \r\n        /* Provide a pre-callback function which can be used to cancel the draw is false is returned */\r\n        var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );\r\n        if ( $.inArray( false, aPreDraw ) !== -1 )\r\n        {\r\n            _fnProcessingDisplay( oSettings, false );\r\n            return;\r\n        }\r\n    \r\n        var anRows = [];\r\n        var iRowCount = 0;\r\n        var asStripeClasses = oSettings.asStripeClasses;\r\n        var iStripes = asStripeClasses.length;\r\n        var oLang = oSettings.oLanguage;\r\n        var bServerSide = _fnDataSource( oSettings ) == 'ssp';\r\n        var aiDisplay = oSettings.aiDisplay;\r\n        var iDisplayStart = oSettings._iDisplayStart;\r\n        var iDisplayEnd = oSettings.fnDisplayEnd();\r\n    \r\n        oSettings.bDrawing = true;\r\n    \r\n        /* Server-side processing draw intercept */\r\n        if ( oSettings.bDeferLoading )\r\n        {\r\n            oSettings.bDeferLoading = false;\r\n            oSettings.iDraw++;\r\n            _fnProcessingDisplay( oSettings, false );\r\n        }\r\n        else if ( !bServerSide )\r\n        {\r\n            oSettings.iDraw++;\r\n        }\r\n        else if ( !oSettings.bDestroying && !ajaxComplete)\r\n        {\r\n            _fnAjaxUpdate( oSettings );\r\n            return;\r\n        }\r\n    \r\n        if ( aiDisplay.length !== 0 )\r\n        {\r\n            var iStart = bServerSide ? 0 : iDisplayStart;\r\n            var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\r\n    \r\n            for ( var j=iStart ; j<iEnd ; j++ )\r\n            {\r\n                var iDataIndex = aiDisplay[j];\r\n                var aoData = oSettings.aoData[ iDataIndex ];\r\n                if ( aoData.nTr === null )\r\n                {\r\n                    _fnCreateTr( oSettings, iDataIndex );\r\n                }\r\n    \r\n                var nRow = aoData.nTr;\r\n    \r\n                /* Remove the old striping classes and then add the new one */\r\n                if ( iStripes !== 0 )\r\n                {\r\n                    var sStripe = asStripeClasses[ iRowCount % iStripes ];\r\n                    if ( aoData._sRowStripe != sStripe )\r\n                    {\r\n                        $(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );\r\n                        aoData._sRowStripe = sStripe;\r\n                    }\r\n                }\r\n    \r\n                // Row callback functions - might want to manipulate the row\r\n                // iRowCount and j are not currently documented. Are they at all\r\n                // useful?\r\n                _fnCallbackFire( oSettings, 'aoRowCallback', null,\r\n                    [nRow, aoData._aData, iRowCount, j, iDataIndex] );\r\n    \r\n                anRows.push( nRow );\r\n                iRowCount++;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            /* Table is empty - create a row with an empty message in it */\r\n            var sZero = oLang.sZeroRecords;\r\n            if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )\r\n            {\r\n                sZero = oLang.sLoadingRecords;\r\n            }\r\n            else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )\r\n            {\r\n                sZero = oLang.sEmptyTable;\r\n            }\r\n    \r\n            anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )\r\n                .append( $('<td />', {\r\n                    'valign':  'top',\r\n                    'colSpan': _fnVisbleColumns( oSettings ),\r\n                    'class':   oSettings.oClasses.sRowEmpty\r\n                } ).html( sZero ) )[0];\r\n        }\r\n    \r\n        /* Header and footer callbacks */\r\n        _fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],\r\n            _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\r\n    \r\n        _fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],\r\n            _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\r\n    \r\n        var body = $(oSettings.nTBody);\r\n    \r\n        body.children().detach();\r\n        body.append( $(anRows) );\r\n    \r\n        /* Call all required callback functions for the end of a draw */\r\n        _fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );\r\n    \r\n        /* Draw is complete, sorting and filtering must be as well */\r\n        oSettings.bSorted = false;\r\n        oSettings.bFiltered = false;\r\n        oSettings.bDrawing = false;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Redraw the table - taking account of the various features which are enabled\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {boolean} [holdPosition] Keep the current paging position. By default\r\n     *    the paging is reset to the first page\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnReDraw( settings, holdPosition )\r\n    {\r\n        var\r\n            features = settings.oFeatures,\r\n            sort     = features.bSort,\r\n            filter   = features.bFilter;\r\n    \r\n        if ( sort ) {\r\n            _fnSort( settings );\r\n        }\r\n    \r\n        if ( filter ) {\r\n            _fnFilterComplete( settings, settings.oPreviousSearch );\r\n        }\r\n        else {\r\n            // No filtering, so we want to just use the display master\r\n            settings.aiDisplay = settings.aiDisplayMaster.slice();\r\n        }\r\n    \r\n        if ( holdPosition !== true ) {\r\n            settings._iDisplayStart = 0;\r\n        }\r\n    \r\n        // Let any modules know about the draw hold position state (used by\r\n        // scrolling internally)\r\n        settings._drawHold = holdPosition;\r\n    \r\n        _fnDraw( settings );\r\n    \r\n        settings._drawHold = false;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Add the options to the page HTML for the table\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAddOptionsHtml ( oSettings )\r\n    {\r\n        var classes = oSettings.oClasses;\r\n        var table = $(oSettings.nTable);\r\n        var holding = $('<div/>').insertBefore( table ); // Holding element for speed\r\n        var features = oSettings.oFeatures;\r\n    \r\n        // All DataTables are wrapped in a div\r\n        var insert = $('<div/>', {\r\n            id:      oSettings.sTableId+'_wrapper',\r\n            'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)\r\n        } );\r\n    \r\n        oSettings.nHolding = holding[0];\r\n        oSettings.nTableWrapper = insert[0];\r\n        oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\r\n    \r\n        /* Loop over the user set positioning and place the elements as needed */\r\n        var aDom = oSettings.sDom.split('');\r\n        var featureNode, cOption, nNewNode, cNext, sAttr, j;\r\n        for ( var i=0 ; i<aDom.length ; i++ )\r\n        {\r\n            featureNode = null;\r\n            cOption = aDom[i];\r\n    \r\n            if ( cOption == '<' )\r\n            {\r\n                /* New container div */\r\n                nNewNode = $('<div/>')[0];\r\n    \r\n                /* Check to see if we should append an id and/or a class name to the container */\r\n                cNext = aDom[i+1];\r\n                if ( cNext == \"'\" || cNext == '\"' )\r\n                {\r\n                    sAttr = \"\";\r\n                    j = 2;\r\n                    while ( aDom[i+j] != cNext )\r\n                    {\r\n                        sAttr += aDom[i+j];\r\n                        j++;\r\n                    }\r\n    \r\n                    /* Replace jQuery UI constants @todo depreciated */\r\n                    if ( sAttr == \"H\" )\r\n                    {\r\n                        sAttr = classes.sJUIHeader;\r\n                    }\r\n                    else if ( sAttr == \"F\" )\r\n                    {\r\n                        sAttr = classes.sJUIFooter;\r\n                    }\r\n    \r\n                    /* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\r\n                     * breaks the string into parts and applies them as needed\r\n                     */\r\n                    if ( sAttr.indexOf('.') != -1 )\r\n                    {\r\n                        var aSplit = sAttr.split('.');\r\n                        nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);\r\n                        nNewNode.className = aSplit[1];\r\n                    }\r\n                    else if ( sAttr.charAt(0) == \"#\" )\r\n                    {\r\n                        nNewNode.id = sAttr.substr(1, sAttr.length-1);\r\n                    }\r\n                    else\r\n                    {\r\n                        nNewNode.className = sAttr;\r\n                    }\r\n    \r\n                    i += j; /* Move along the position array */\r\n                }\r\n    \r\n                insert.append( nNewNode );\r\n                insert = $(nNewNode);\r\n            }\r\n            else if ( cOption == '>' )\r\n            {\r\n                /* End container div */\r\n                insert = insert.parent();\r\n            }\r\n            // @todo Move options into their own plugins?\r\n            else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )\r\n            {\r\n                /* Length */\r\n                featureNode = _fnFeatureHtmlLength( oSettings );\r\n            }\r\n            else if ( cOption == 'f' && features.bFilter )\r\n            {\r\n                /* Filter */\r\n                featureNode = _fnFeatureHtmlFilter( oSettings );\r\n            }\r\n            else if ( cOption == 'r' && features.bProcessing )\r\n            {\r\n                /* pRocessing */\r\n                featureNode = _fnFeatureHtmlProcessing( oSettings );\r\n            }\r\n            else if ( cOption == 't' )\r\n            {\r\n                /* Table */\r\n                featureNode = _fnFeatureHtmlTable( oSettings );\r\n            }\r\n            else if ( cOption ==  'i' && features.bInfo )\r\n            {\r\n                /* Info */\r\n                featureNode = _fnFeatureHtmlInfo( oSettings );\r\n            }\r\n            else if ( cOption == 'p' && features.bPaginate )\r\n            {\r\n                /* Pagination */\r\n                featureNode = _fnFeatureHtmlPaginate( oSettings );\r\n            }\r\n            else if ( DataTable.ext.feature.length !== 0 )\r\n            {\r\n                /* Plug-in features */\r\n                var aoFeatures = DataTable.ext.feature;\r\n                for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )\r\n                {\r\n                    if ( cOption == aoFeatures[k].cFeature )\r\n                    {\r\n                        featureNode = aoFeatures[k].fnInit( oSettings );\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n    \r\n            /* Add to the 2D features array */\r\n            if ( featureNode )\r\n            {\r\n                var aanFeatures = oSettings.aanFeatures;\r\n    \r\n                if ( ! aanFeatures[cOption] )\r\n                {\r\n                    aanFeatures[cOption] = [];\r\n                }\r\n    \r\n                aanFeatures[cOption].push( featureNode );\r\n                insert.append( featureNode );\r\n            }\r\n        }\r\n    \r\n        /* Built our DOM structure - replace the holding div with what we want */\r\n        holding.replaceWith( insert );\r\n        oSettings.nHolding = null;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Use the DOM source to create up an array of header cells. The idea here is to\r\n     * create a layout grid (array) of rows x columns, which contains a reference\r\n     * to the cell that that point in the grid (regardless of col/rowspan), such that\r\n     * any column / row could be removed and the new grid constructed\r\n     *  @param array {object} aLayout Array to store the calculated layout in\r\n     *  @param {node} nThead The header/footer element for the table\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnDetectHeader ( aLayout, nThead )\r\n    {\r\n        var nTrs = $(nThead).children('tr');\r\n        var nTr, nCell;\r\n        var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\r\n        var bUnique;\r\n        var fnShiftCol = function ( a, i, j ) {\r\n            var k = a[i];\r\n                    while ( k[j] ) {\r\n                j++;\r\n            }\r\n            return j;\r\n        };\r\n    \r\n        aLayout.splice( 0, aLayout.length );\r\n    \r\n        /* We know how many rows there are in the layout - so prep it */\r\n        for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\r\n        {\r\n            aLayout.push( [] );\r\n        }\r\n    \r\n        /* Calculate a layout array */\r\n        for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\r\n        {\r\n            nTr = nTrs[i];\r\n            iColumn = 0;\r\n    \r\n            /* For every cell in the row... */\r\n            nCell = nTr.firstChild;\r\n            while ( nCell ) {\r\n                if ( nCell.nodeName.toUpperCase() == \"TD\" ||\r\n                     nCell.nodeName.toUpperCase() == \"TH\" )\r\n                {\r\n                    /* Get the col and rowspan attributes from the DOM and sanitise them */\r\n                    iColspan = nCell.getAttribute('colspan') * 1;\r\n                    iRowspan = nCell.getAttribute('rowspan') * 1;\r\n                    iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;\r\n                    iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;\r\n    \r\n                    /* There might be colspan cells already in this row, so shift our target\r\n                     * accordingly\r\n                     */\r\n                    iColShifted = fnShiftCol( aLayout, i, iColumn );\r\n    \r\n                    /* Cache calculation for unique columns */\r\n                    bUnique = iColspan === 1 ? true : false;\r\n    \r\n                    /* If there is col / rowspan, copy the information into the layout grid */\r\n                    for ( l=0 ; l<iColspan ; l++ )\r\n                    {\r\n                        for ( k=0 ; k<iRowspan ; k++ )\r\n                        {\r\n                            aLayout[i+k][iColShifted+l] = {\r\n                                \"cell\": nCell,\r\n                                \"unique\": bUnique\r\n                            };\r\n                            aLayout[i+k].nTr = nTr;\r\n                        }\r\n                    }\r\n                }\r\n                nCell = nCell.nextSibling;\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get an array of unique th elements, one for each column\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {node} nHeader automatically detect the layout from this node - optional\r\n     *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\r\n     *  @returns array {node} aReturn list of unique th's\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnGetUniqueThs ( oSettings, nHeader, aLayout )\r\n    {\r\n        var aReturn = [];\r\n        if ( !aLayout )\r\n        {\r\n            aLayout = oSettings.aoHeader;\r\n            if ( nHeader )\r\n            {\r\n                aLayout = [];\r\n                _fnDetectHeader( aLayout, nHeader );\r\n            }\r\n        }\r\n    \r\n        for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )\r\n        {\r\n            for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )\r\n            {\r\n                if ( aLayout[i][j].unique &&\r\n                     (!aReturn[j] || !oSettings.bSortCellsTop) )\r\n                {\r\n                    aReturn[j] = aLayout[i][j].cell;\r\n                }\r\n            }\r\n        }\r\n    \r\n        return aReturn;\r\n    }\r\n    \r\n    /**\r\n     * Set the start position for draw\r\n     *  @param {object} oSettings dataTables settings object\r\n     */\r\n    function _fnStart( oSettings )\r\n    {\r\n        var bServerSide = _fnDataSource( oSettings ) == 'ssp';\r\n        var iInitDisplayStart = oSettings.iInitDisplayStart;\r\n    \r\n        // Check and see if we have an initial draw position from state saving\r\n        if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )\r\n        {\r\n            oSettings._iDisplayStart = bServerSide ?\r\n                iInitDisplayStart :\r\n                iInitDisplayStart >= oSettings.fnRecordsDisplay() ?\r\n                    0 :\r\n                    iInitDisplayStart;\r\n    \r\n            oSettings.iInitDisplayStart = -1;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Create an Ajax call based on the table's settings, taking into account that\r\n     * parameters can have multiple forms, and backwards compatibility.\r\n     *\r\n     * @param {object} oSettings dataTables settings object\r\n     * @param {array} data Data to send to the server, required by\r\n     *     DataTables - may be augmented by developer callbacks\r\n     * @param {function} fn Callback function to run when data is obtained\r\n     */\r\n    function _fnBuildAjax( oSettings, data, fn )\r\n    {\r\n        // Compatibility with 1.9-, allow fnServerData and event to manipulate\r\n        _fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );\r\n    \r\n        // Convert to object based for 1.10+ if using the old array scheme which can\r\n        // come from server-side processing or serverParams\r\n        if ( data && Array.isArray(data) ) {\r\n            var tmp = {};\r\n            var rbracket = /(.*?)\\[\\]$/;\r\n    \r\n            $.each( data, function (key, val) {\r\n                var match = val.name.match(rbracket);\r\n    \r\n                if ( match ) {\r\n                    // Support for arrays\r\n                    var name = match[0];\r\n    \r\n                    if ( ! tmp[ name ] ) {\r\n                        tmp[ name ] = [];\r\n                    }\r\n                    tmp[ name ].push( val.value );\r\n                }\r\n                else {\r\n                    tmp[val.name] = val.value;\r\n                }\r\n            } );\r\n            data = tmp;\r\n        }\r\n    \r\n        var ajaxData;\r\n        var ajax = oSettings.ajax;\r\n        var instance = oSettings.oInstance;\r\n        var callback = function ( json ) {\r\n            var status = oSettings.jqXHR\r\n                ? oSettings.jqXHR.status\r\n                : null;\r\n    \r\n            if ( json === null || (typeof status === 'number' && status == 204 ) ) {\r\n                json = {};\r\n                _fnAjaxDataSrc( oSettings, json, [] );\r\n            }\r\n    \r\n            var error = json.error || json.sError;\r\n            if ( error ) {\r\n                _fnLog( oSettings, 0, error );\r\n            }\r\n    \r\n            oSettings.json = json;\r\n    \r\n            _fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );\r\n            fn( json );\r\n        };\r\n    \r\n        if ( $.isPlainObject( ajax ) && ajax.data )\r\n        {\r\n            ajaxData = ajax.data;\r\n    \r\n            var newData = typeof ajaxData === 'function' ?\r\n                ajaxData( data, oSettings ) :  // fn can manipulate data or return\r\n                ajaxData;                      // an object object or array to merge\r\n    \r\n            // If the function returned something, use that alone\r\n            data = typeof ajaxData === 'function' && newData ?\r\n                newData :\r\n                $.extend( true, data, newData );\r\n    \r\n            // Remove the data property as we've resolved it already and don't want\r\n            // jQuery to do it again (it is restored at the end of the function)\r\n            delete ajax.data;\r\n        }\r\n    \r\n        var baseAjax = {\r\n            \"data\": data,\r\n            \"success\": callback,\r\n            \"dataType\": \"json\",\r\n            \"cache\": false,\r\n            \"type\": oSettings.sServerMethod,\r\n            \"error\": function (xhr, error, thrown) {\r\n                var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );\r\n    \r\n                if ( $.inArray( true, ret ) === -1 ) {\r\n                    if ( error == \"parsererror\" ) {\r\n                        _fnLog( oSettings, 0, 'Invalid JSON response', 1 );\r\n                    }\r\n                    else if ( xhr.readyState === 4 ) {\r\n                        _fnLog( oSettings, 0, 'Ajax error', 7 );\r\n                    }\r\n                }\r\n    \r\n                _fnProcessingDisplay( oSettings, false );\r\n            }\r\n        };\r\n    \r\n        // Store the data submitted for the API\r\n        oSettings.oAjaxData = data;\r\n    \r\n        // Allow plug-ins and external processes to modify the data\r\n        _fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );\r\n    \r\n        if ( oSettings.fnServerData )\r\n        {\r\n            // DataTables 1.9- compatibility\r\n            oSettings.fnServerData.call( instance,\r\n                oSettings.sAjaxSource,\r\n                $.map( data, function (val, key) { // Need to convert back to 1.9 trad format\r\n                    return { name: key, value: val };\r\n                } ),\r\n                callback,\r\n                oSettings\r\n            );\r\n        }\r\n        else if ( oSettings.sAjaxSource || typeof ajax === 'string' )\r\n        {\r\n            // DataTables 1.9- compatibility\r\n            oSettings.jqXHR = $.ajax( $.extend( baseAjax, {\r\n                url: ajax || oSettings.sAjaxSource\r\n            } ) );\r\n        }\r\n        else if ( typeof ajax === 'function' )\r\n        {\r\n            // Is a function - let the caller define what needs to be done\r\n            oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );\r\n        }\r\n        else\r\n        {\r\n            // Object to extend the base settings\r\n            oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );\r\n    \r\n            // Restore for next time around\r\n            ajax.data = ajaxData;\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Update the table using an Ajax call\r\n     *  @param {object} settings dataTables settings object\r\n     *  @returns {boolean} Block the table drawing or not\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAjaxUpdate( settings )\r\n    {\r\n        settings.iDraw++;\r\n        _fnProcessingDisplay( settings, true );\r\n    \r\n        _fnBuildAjax(\r\n            settings,\r\n            _fnAjaxParameters( settings ),\r\n            function(json) {\r\n                _fnAjaxUpdateDraw( settings, json );\r\n            }\r\n        );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Build up the parameters in an object needed for a server-side processing\r\n     * request. Note that this is basically done twice, is different ways - a modern\r\n     * method which is used by default in DataTables 1.10 which uses objects and\r\n     * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\r\n     * the sAjaxSource option is used in the initialisation, or the legacyAjax\r\n     * option is set.\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @returns {bool} block the table drawing or not\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAjaxParameters( settings )\r\n    {\r\n        var\r\n            columns = settings.aoColumns,\r\n            columnCount = columns.length,\r\n            features = settings.oFeatures,\r\n            preSearch = settings.oPreviousSearch,\r\n            preColSearch = settings.aoPreSearchCols,\r\n            i, data = [], dataProp, column, columnSearch,\r\n            sort = _fnSortFlatten( settings ),\r\n            displayStart = settings._iDisplayStart,\r\n            displayLength = features.bPaginate !== false ?\r\n                settings._iDisplayLength :\r\n                -1;\r\n    \r\n        var param = function ( name, value ) {\r\n            data.push( { 'name': name, 'value': value } );\r\n        };\r\n    \r\n        // DataTables 1.9- compatible method\r\n        param( 'sEcho',          settings.iDraw );\r\n        param( 'iColumns',       columnCount );\r\n        param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );\r\n        param( 'iDisplayStart',  displayStart );\r\n        param( 'iDisplayLength', displayLength );\r\n    \r\n        // DataTables 1.10+ method\r\n        var d = {\r\n            draw:    settings.iDraw,\r\n            columns: [],\r\n            order:   [],\r\n            start:   displayStart,\r\n            length:  displayLength,\r\n            search:  {\r\n                value: preSearch.sSearch,\r\n                regex: preSearch.bRegex\r\n            }\r\n        };\r\n    \r\n        for ( i=0 ; i<columnCount ; i++ ) {\r\n            column = columns[i];\r\n            columnSearch = preColSearch[i];\r\n            dataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;\r\n    \r\n            d.columns.push( {\r\n                data:       dataProp,\r\n                name:       column.sName,\r\n                searchable: column.bSearchable,\r\n                orderable:  column.bSortable,\r\n                search:     {\r\n                    value: columnSearch.sSearch,\r\n                    regex: columnSearch.bRegex\r\n                }\r\n            } );\r\n    \r\n            param( \"mDataProp_\"+i, dataProp );\r\n    \r\n            if ( features.bFilter ) {\r\n                param( 'sSearch_'+i,     columnSearch.sSearch );\r\n                param( 'bRegex_'+i,      columnSearch.bRegex );\r\n                param( 'bSearchable_'+i, column.bSearchable );\r\n            }\r\n    \r\n            if ( features.bSort ) {\r\n                param( 'bSortable_'+i, column.bSortable );\r\n            }\r\n        }\r\n    \r\n        if ( features.bFilter ) {\r\n            param( 'sSearch', preSearch.sSearch );\r\n            param( 'bRegex', preSearch.bRegex );\r\n        }\r\n    \r\n        if ( features.bSort ) {\r\n            $.each( sort, function ( i, val ) {\r\n                d.order.push( { column: val.col, dir: val.dir } );\r\n    \r\n                param( 'iSortCol_'+i, val.col );\r\n                param( 'sSortDir_'+i, val.dir );\r\n            } );\r\n    \r\n            param( 'iSortingCols', sort.length );\r\n        }\r\n    \r\n        // If the legacy.ajax parameter is null, then we automatically decide which\r\n        // form to use, based on sAjaxSource\r\n        var legacy = DataTable.ext.legacy.ajax;\r\n        if ( legacy === null ) {\r\n            return settings.sAjaxSource ? data : d;\r\n        }\r\n    \r\n        // Otherwise, if legacy has been specified then we use that to decide on the\r\n        // form\r\n        return legacy ? data : d;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Data the data from the server (nuking the old) and redraw the table\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {object} json json data return from the server.\r\n     *  @param {string} json.sEcho Tracking flag for DataTables to match requests\r\n     *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\r\n     *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\r\n     *  @param {array} json.aaData The data to display on this page\r\n     *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAjaxUpdateDraw ( settings, json )\r\n    {\r\n        // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\r\n        // Support both\r\n        var compat = function ( old, modern ) {\r\n            return json[old] !== undefined ? json[old] : json[modern];\r\n        };\r\n    \r\n        var data = _fnAjaxDataSrc( settings, json );\r\n        var draw            = compat( 'sEcho',                'draw' );\r\n        var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );\r\n        var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );\r\n    \r\n        if ( draw !== undefined ) {\r\n            // Protect against out of sequence returns\r\n            if ( draw*1 < settings.iDraw ) {\r\n                return;\r\n            }\r\n            settings.iDraw = draw * 1;\r\n        }\r\n    \r\n        // No data in returned object, so rather than an array, we show an empty table\r\n        if ( ! data ) {\r\n            data = [];\r\n        }\r\n    \r\n        _fnClearTable( settings );\r\n        settings._iRecordsTotal   = parseInt(recordsTotal, 10);\r\n        settings._iRecordsDisplay = parseInt(recordsFiltered, 10);\r\n    \r\n        for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n            _fnAddData( settings, data[i] );\r\n        }\r\n        settings.aiDisplay = settings.aiDisplayMaster.slice();\r\n    \r\n        _fnDraw( settings, true );\r\n    \r\n        if ( ! settings._bInitComplete ) {\r\n            _fnInitComplete( settings, json );\r\n        }\r\n    \r\n        _fnProcessingDisplay( settings, false );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get the data from the JSON data source to use for drawing a table. Using\r\n     * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\r\n     * source object, or from a processing function.\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param  {object} json Data source object / array from the server\r\n     *  @return {array} Array of data to use\r\n     */\r\n     function _fnAjaxDataSrc ( oSettings, json, write )\r\n     {\r\n        var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?\r\n            oSettings.ajax.dataSrc :\r\n            oSettings.sAjaxDataProp; // Compatibility with 1.9-.\r\n    \r\n        if ( ! write ) {\r\n            if ( dataSrc === 'data' ) {\r\n                // If the default, then we still want to support the old style, and safely ignore\r\n                // it if possible\r\n                return json.aaData || json[dataSrc];\r\n            }\r\n    \r\n            return dataSrc !== \"\" ?\r\n                _fnGetObjectDataFn( dataSrc )( json ) :\r\n                json;\r\n        }\r\n    \r\n        // set\r\n        _fnSetObjectDataFn( dataSrc )( json, write );\r\n    }\r\n    \r\n    /**\r\n     * Generate the node required for filtering text\r\n     *  @returns {node} Filter control element\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFeatureHtmlFilter ( settings )\r\n    {\r\n        var classes = settings.oClasses;\r\n        var tableId = settings.sTableId;\r\n        var language = settings.oLanguage;\r\n        var previousSearch = settings.oPreviousSearch;\r\n        var features = settings.aanFeatures;\r\n        var input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';\r\n    \r\n        var str = language.sSearch;\r\n        str = str.match(/_INPUT_/) ?\r\n            str.replace('_INPUT_', input) :\r\n            str+input;\r\n    \r\n        var filter = $('<div/>', {\r\n                'id': ! features.f ? tableId+'_filter' : null,\r\n                'class': classes.sFilter\r\n            } )\r\n            .append( $('<label/>' ).append( str ) );\r\n    \r\n        var searchFn = function(event) {\r\n            /* Update all other filter input elements for the new display */\r\n            var n = features.f;\r\n            var val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\r\n            if(previousSearch.return && event.key !== \"Enter\") {\r\n                return;\r\n            }\r\n            /* Now do the filter */\r\n            if ( val != previousSearch.sSearch ) {\r\n                _fnFilterComplete( settings, {\r\n                    \"sSearch\": val,\r\n                    \"bRegex\": previousSearch.bRegex,\r\n                    \"bSmart\": previousSearch.bSmart ,\r\n                    \"bCaseInsensitive\": previousSearch.bCaseInsensitive,\r\n                    \"return\": previousSearch.return\r\n                } );\r\n    \r\n                // Need to redraw, without resorting\r\n                settings._iDisplayStart = 0;\r\n                _fnDraw( settings );\r\n            }\r\n        };\r\n    \r\n        var searchDelay = settings.searchDelay !== null ?\r\n            settings.searchDelay :\r\n            _fnDataSource( settings ) === 'ssp' ?\r\n                400 :\r\n                0;\r\n    \r\n        var jqFilter = $('input', filter)\r\n            .val( previousSearch.sSearch )\r\n            .attr( 'placeholder', language.sSearchPlaceholder )\r\n            .on(\r\n                'keyup.DT search.DT input.DT paste.DT cut.DT',\r\n                searchDelay ?\r\n                    _fnThrottle( searchFn, searchDelay ) :\r\n                    searchFn\r\n            )\r\n            .on( 'mouseup', function(e) {\r\n                // Edge fix! Edge 17 does not trigger anything other than mouse events when clicking\r\n                // on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`\r\n                // checks the value to see if it has changed. In other browsers it won't have.\r\n                setTimeout( function () {\r\n                    searchFn.call(jqFilter[0], e);\r\n                }, 10);\r\n            } )\r\n            .on( 'keypress.DT', function(e) {\r\n                /* Prevent form submission */\r\n                if ( e.keyCode == 13 ) {\r\n                    return false;\r\n                }\r\n            } )\r\n            .attr('aria-controls', tableId);\r\n    \r\n        // Update the input elements whenever the table is filtered\r\n        $(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {\r\n            if ( settings === s ) {\r\n                // IE9 throws an 'unknown error' if document.activeElement is used\r\n                // inside an iframe or frame...\r\n                try {\r\n                    if ( jqFilter[0] !== document.activeElement ) {\r\n                        jqFilter.val( previousSearch.sSearch );\r\n                    }\r\n                }\r\n                catch ( e ) {}\r\n            }\r\n        } );\r\n    \r\n        return filter[0];\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Filter the table using both the global filter and column based filtering\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {object} oSearch search information\r\n     *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFilterComplete ( oSettings, oInput, iForce )\r\n    {\r\n        var oPrevSearch = oSettings.oPreviousSearch;\r\n        var aoPrevSearch = oSettings.aoPreSearchCols;\r\n        var fnSaveFilter = function ( oFilter ) {\r\n            /* Save the filtering values */\r\n            oPrevSearch.sSearch = oFilter.sSearch;\r\n            oPrevSearch.bRegex = oFilter.bRegex;\r\n            oPrevSearch.bSmart = oFilter.bSmart;\r\n            oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\r\n            oPrevSearch.return = oFilter.return;\r\n        };\r\n        var fnRegex = function ( o ) {\r\n            // Backwards compatibility with the bEscapeRegex option\r\n            return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\r\n        };\r\n    \r\n        // Resolve any column types that are unknown due to addition or invalidation\r\n        // @todo As per sort - can this be moved into an event handler?\r\n        _fnColumnTypes( oSettings );\r\n    \r\n        /* In server-side processing all filtering is done by the server, so no point hanging around here */\r\n        if ( _fnDataSource( oSettings ) != 'ssp' )\r\n        {\r\n            /* Global filter */\r\n            _fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive, oInput.return );\r\n            fnSaveFilter( oInput );\r\n    \r\n            /* Now do the individual column filter */\r\n            for ( var i=0 ; i<aoPrevSearch.length ; i++ )\r\n            {\r\n                _fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),\r\n                    aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );\r\n            }\r\n    \r\n            /* Custom filtering */\r\n            _fnFilterCustom( oSettings );\r\n        }\r\n        else\r\n        {\r\n            fnSaveFilter( oInput );\r\n        }\r\n    \r\n        /* Tell the draw function we have been filtering */\r\n        oSettings.bFiltered = true;\r\n        _fnCallbackFire( oSettings, null, 'search', [oSettings] );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Apply custom filtering functions\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFilterCustom( settings )\r\n    {\r\n        var filters = DataTable.ext.search;\r\n        var displayRows = settings.aiDisplay;\r\n        var row, rowIdx;\r\n    \r\n        for ( var i=0, ien=filters.length ; i<ien ; i++ ) {\r\n            var rows = [];\r\n    \r\n            // Loop over each row and see if it should be included\r\n            for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {\r\n                rowIdx = displayRows[ j ];\r\n                row = settings.aoData[ rowIdx ];\r\n    \r\n                if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {\r\n                    rows.push( rowIdx );\r\n                }\r\n            }\r\n    \r\n            // So the array reference doesn't break set the results into the\r\n            // existing array\r\n            displayRows.length = 0;\r\n            $.merge( displayRows, rows );\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Filter the table on a per-column basis\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {string} sInput string to filter on\r\n     *  @param {int} iColumn column to filter\r\n     *  @param {bool} bRegex treat search string as a regular expression or not\r\n     *  @param {bool} bSmart use smart filtering or not\r\n     *  @param {bool} bCaseInsensitive Do case insensitive matching or not\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )\r\n    {\r\n        if ( searchStr === '' ) {\r\n            return;\r\n        }\r\n    \r\n        var data;\r\n        var out = [];\r\n        var display = settings.aiDisplay;\r\n        var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );\r\n    \r\n        for ( var i=0 ; i<display.length ; i++ ) {\r\n            data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];\r\n    \r\n            if ( rpSearch.test( data ) ) {\r\n                out.push( display[i] );\r\n            }\r\n        }\r\n    \r\n        settings.aiDisplay = out;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Filter the data table based on user input and draw the table\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {string} input string to filter on\r\n     *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\r\n     *  @param {bool} regex treat as a regular expression or not\r\n     *  @param {bool} smart perform smart filtering or not\r\n     *  @param {bool} caseInsensitive Do case insensitive matching or not\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFilter( settings, input, force, regex, smart, caseInsensitive )\r\n    {\r\n        var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );\r\n        var prevSearch = settings.oPreviousSearch.sSearch;\r\n        var displayMaster = settings.aiDisplayMaster;\r\n        var display, invalidated, i;\r\n        var filtered = [];\r\n    \r\n        // Need to take account of custom filtering functions - always filter\r\n        if ( DataTable.ext.search.length !== 0 ) {\r\n            force = true;\r\n        }\r\n    \r\n        // Check if any of the rows were invalidated\r\n        invalidated = _fnFilterData( settings );\r\n    \r\n        // If the input is blank - we just want the full data set\r\n        if ( input.length <= 0 ) {\r\n            settings.aiDisplay = displayMaster.slice();\r\n        }\r\n        else {\r\n            // New search - start from the master array\r\n            if ( invalidated ||\r\n                 force ||\r\n                 regex ||\r\n                 prevSearch.length > input.length ||\r\n                 input.indexOf(prevSearch) !== 0 ||\r\n                 settings.bSorted // On resort, the display master needs to be\r\n                                  // re-filtered since indexes will have changed\r\n            ) {\r\n                settings.aiDisplay = displayMaster.slice();\r\n            }\r\n    \r\n            // Search the display array\r\n            display = settings.aiDisplay;\r\n    \r\n            for ( i=0 ; i<display.length ; i++ ) {\r\n                if ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {\r\n                    filtered.push( display[i] );\r\n                }\r\n            }\r\n    \r\n            settings.aiDisplay = filtered;\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Build a regular expression object suitable for searching a table\r\n     *  @param {string} sSearch string to search for\r\n     *  @param {bool} bRegex treat as a regular expression or not\r\n     *  @param {bool} bSmart perform smart filtering or not\r\n     *  @param {bool} bCaseInsensitive Do case insensitive matching or not\r\n     *  @returns {RegExp} constructed object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )\r\n    {\r\n        search = regex ?\r\n            search :\r\n            _fnEscapeRegex( search );\r\n        \r\n        if ( smart ) {\r\n            /* For smart filtering we want to allow the search to work regardless of\r\n             * word order. We also want double quoted text to be preserved, so word\r\n             * order is important - a la google. So this is what we want to\r\n             * generate:\r\n             * \r\n             * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\r\n             */\r\n            var a = $.map( search.match( /\"[^\"]+\"|[^ ]+/g ) || [''], function ( word ) {\r\n                if ( word.charAt(0) === '\"' ) {\r\n                    var m = word.match( /^\"(.*)\"$/ );\r\n                    word = m ? m[1] : word;\r\n                }\r\n    \r\n                return word.replace('\"', '');\r\n            } );\r\n    \r\n            search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';\r\n        }\r\n    \r\n        return new RegExp( search, caseInsensitive ? 'i' : '' );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Escape a string such that it can be used in a regular expression\r\n     *  @param {string} sVal string to escape\r\n     *  @returns {string} escaped string\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    var _fnEscapeRegex = DataTable.util.escapeRegex;\r\n    \r\n    var __filter_div = $('<div>')[0];\r\n    var __filter_div_textContent = __filter_div.textContent !== undefined;\r\n    \r\n    // Update the filtering data for each row if needed (by invalidation or first run)\r\n    function _fnFilterData ( settings )\r\n    {\r\n        var columns = settings.aoColumns;\r\n        var column;\r\n        var i, j, ien, jen, filterData, cellData, row;\r\n        var wasInvalidated = false;\r\n    \r\n        for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n            row = settings.aoData[i];\r\n    \r\n            if ( ! row._aFilterData ) {\r\n                filterData = [];\r\n    \r\n                for ( j=0, jen=columns.length ; j<jen ; j++ ) {\r\n                    column = columns[j];\r\n    \r\n                    if ( column.bSearchable ) {\r\n                        cellData = _fnGetCellData( settings, i, j, 'filter' );\r\n    \r\n                        // Search in DataTables 1.10 is string based. In 1.11 this\r\n                        // should be altered to also allow strict type checking.\r\n                        if ( cellData === null ) {\r\n                            cellData = '';\r\n                        }\r\n    \r\n                        if ( typeof cellData !== 'string' && cellData.toString ) {\r\n                            cellData = cellData.toString();\r\n                        }\r\n                    }\r\n                    else {\r\n                        cellData = '';\r\n                    }\r\n    \r\n                    // If it looks like there is an HTML entity in the string,\r\n                    // attempt to decode it so sorting works as expected. Note that\r\n                    // we could use a single line of jQuery to do this, but the DOM\r\n                    // method used here is much faster http://jsperf.com/html-decode\r\n                    if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {\r\n                        __filter_div.innerHTML = cellData;\r\n                        cellData = __filter_div_textContent ?\r\n                            __filter_div.textContent :\r\n                            __filter_div.innerText;\r\n                    }\r\n    \r\n                    if ( cellData.replace ) {\r\n                        cellData = cellData.replace(/[\\r\\n\\u2028]/g, '');\r\n                    }\r\n    \r\n                    filterData.push( cellData );\r\n                }\r\n    \r\n                row._aFilterData = filterData;\r\n                row._sFilterRow = filterData.join('  ');\r\n                wasInvalidated = true;\r\n            }\r\n        }\r\n    \r\n        return wasInvalidated;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Convert from the internal Hungarian notation to camelCase for external\r\n     * interaction\r\n     *  @param {object} obj Object to convert\r\n     *  @returns {object} Inverted object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSearchToCamel ( obj )\r\n    {\r\n        return {\r\n            search:          obj.sSearch,\r\n            smart:           obj.bSmart,\r\n            regex:           obj.bRegex,\r\n            caseInsensitive: obj.bCaseInsensitive\r\n        };\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * Convert from camelCase notation to the internal Hungarian. We could use the\r\n     * Hungarian convert function here, but this is cleaner\r\n     *  @param {object} obj Object to convert\r\n     *  @returns {object} Inverted object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSearchToHung ( obj )\r\n    {\r\n        return {\r\n            sSearch:          obj.search,\r\n            bSmart:           obj.smart,\r\n            bRegex:           obj.regex,\r\n            bCaseInsensitive: obj.caseInsensitive\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Generate the node required for the info display\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @returns {node} Information element\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFeatureHtmlInfo ( settings )\r\n    {\r\n        var\r\n            tid = settings.sTableId,\r\n            nodes = settings.aanFeatures.i,\r\n            n = $('<div/>', {\r\n                'class': settings.oClasses.sInfo,\r\n                'id': ! nodes ? tid+'_info' : null\r\n            } );\r\n    \r\n        if ( ! nodes ) {\r\n            // Update display on each draw\r\n            settings.aoDrawCallback.push( {\r\n                \"fn\": _fnUpdateInfo,\r\n                \"sName\": \"information\"\r\n            } );\r\n    \r\n            n\r\n                .attr( 'role', 'status' )\r\n                .attr( 'aria-live', 'polite' );\r\n    \r\n            // Table is described by our info div\r\n            $(settings.nTable).attr( 'aria-describedby', tid+'_info' );\r\n        }\r\n    \r\n        return n[0];\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Update the information elements in the display\r\n     *  @param {object} settings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnUpdateInfo ( settings )\r\n    {\r\n        /* Show information about the table */\r\n        var nodes = settings.aanFeatures.i;\r\n        if ( nodes.length === 0 ) {\r\n            return;\r\n        }\r\n    \r\n        var\r\n            lang  = settings.oLanguage,\r\n            start = settings._iDisplayStart+1,\r\n            end   = settings.fnDisplayEnd(),\r\n            max   = settings.fnRecordsTotal(),\r\n            total = settings.fnRecordsDisplay(),\r\n            out   = total ?\r\n                lang.sInfo :\r\n                lang.sInfoEmpty;\r\n    \r\n        if ( total !== max ) {\r\n            /* Record set after filtering */\r\n            out += ' ' + lang.sInfoFiltered;\r\n        }\r\n    \r\n        // Convert the macros\r\n        out += lang.sInfoPostFix;\r\n        out = _fnInfoMacros( settings, out );\r\n    \r\n        var callback = lang.fnInfoCallback;\r\n        if ( callback !== null ) {\r\n            out = callback.call( settings.oInstance,\r\n                settings, start, end, max, total, out\r\n            );\r\n        }\r\n    \r\n        $(nodes).html( out );\r\n    }\r\n    \r\n    \r\n    function _fnInfoMacros ( settings, str )\r\n    {\r\n        // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\r\n        // internally\r\n        var\r\n            formatter  = settings.fnFormatNumber,\r\n            start      = settings._iDisplayStart+1,\r\n            len        = settings._iDisplayLength,\r\n            vis        = settings.fnRecordsDisplay(),\r\n            all        = len === -1;\r\n    \r\n        return str.\r\n            replace(/_START_/g, formatter.call( settings, start ) ).\r\n            replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).\r\n            replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).\r\n            replace(/_TOTAL_/g, formatter.call( settings, vis ) ).\r\n            replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).\r\n            replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * Draw the table for the first time, adding all required features\r\n     *  @param {object} settings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnInitialise ( settings )\r\n    {\r\n        var i, iLen, iAjaxStart=settings.iInitDisplayStart;\r\n        var columns = settings.aoColumns, column;\r\n        var features = settings.oFeatures;\r\n        var deferLoading = settings.bDeferLoading; // value modified by the draw\r\n    \r\n        /* Ensure that the table data is fully initialised */\r\n        if ( ! settings.bInitialised ) {\r\n            setTimeout( function(){ _fnInitialise( settings ); }, 200 );\r\n            return;\r\n        }\r\n    \r\n        /* Show the display HTML options */\r\n        _fnAddOptionsHtml( settings );\r\n    \r\n        /* Build and draw the header / footer for the table */\r\n        _fnBuildHead( settings );\r\n        _fnDrawHead( settings, settings.aoHeader );\r\n        _fnDrawHead( settings, settings.aoFooter );\r\n    \r\n        /* Okay to show that something is going on now */\r\n        _fnProcessingDisplay( settings, true );\r\n    \r\n        /* Calculate sizes for columns */\r\n        if ( features.bAutoWidth ) {\r\n            _fnCalculateColumnWidths( settings );\r\n        }\r\n    \r\n        for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {\r\n            column = columns[i];\r\n    \r\n            if ( column.sWidth ) {\r\n                column.nTh.style.width = _fnStringToCss( column.sWidth );\r\n            }\r\n        }\r\n    \r\n        _fnCallbackFire( settings, null, 'preInit', [settings] );\r\n    \r\n        // If there is default sorting required - let's do it. The sort function\r\n        // will do the drawing for us. Otherwise we draw the table regardless of the\r\n        // Ajax source - this allows the table to look initialised for Ajax sourcing\r\n        // data (show 'loading' message possibly)\r\n        _fnReDraw( settings );\r\n    \r\n        // Server-side processing init complete is done by _fnAjaxUpdateDraw\r\n        var dataSrc = _fnDataSource( settings );\r\n        if ( dataSrc != 'ssp' || deferLoading ) {\r\n            // if there is an ajax source load the data\r\n            if ( dataSrc == 'ajax' ) {\r\n                _fnBuildAjax( settings, [], function(json) {\r\n                    var aData = _fnAjaxDataSrc( settings, json );\r\n    \r\n                    // Got the data - add it to the table\r\n                    for ( i=0 ; i<aData.length ; i++ ) {\r\n                        _fnAddData( settings, aData[i] );\r\n                    }\r\n    \r\n                    // Reset the init display for cookie saving. We've already done\r\n                    // a filter, and therefore cleared it before. So we need to make\r\n                    // it appear 'fresh'\r\n                    settings.iInitDisplayStart = iAjaxStart;\r\n    \r\n                    _fnReDraw( settings );\r\n    \r\n                    _fnProcessingDisplay( settings, false );\r\n                    _fnInitComplete( settings, json );\r\n                }, settings );\r\n            }\r\n            else {\r\n                _fnProcessingDisplay( settings, false );\r\n                _fnInitComplete( settings );\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Draw the table for the first time, adding all required features\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\r\n     *    with client-side processing (optional)\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnInitComplete ( settings, json )\r\n    {\r\n        settings._bInitComplete = true;\r\n    \r\n        // When data was added after the initialisation (data or Ajax) we need to\r\n        // calculate the column sizing\r\n        if ( json || settings.oInit.aaData ) {\r\n            _fnAdjustColumnSizing( settings );\r\n        }\r\n    \r\n        _fnCallbackFire( settings, null, 'plugin-init', [settings, json] );\r\n        _fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );\r\n    }\r\n    \r\n    \r\n    function _fnLengthChange ( settings, val )\r\n    {\r\n        var len = parseInt( val, 10 );\r\n        settings._iDisplayLength = len;\r\n    \r\n        _fnLengthOverflow( settings );\r\n    \r\n        // Fire length change event\r\n        _fnCallbackFire( settings, null, 'length', [settings, len] );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Generate the node required for user display length changing\r\n     *  @param {object} settings dataTables settings object\r\n     *  @returns {node} Display length feature node\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFeatureHtmlLength ( settings )\r\n    {\r\n        var\r\n            classes  = settings.oClasses,\r\n            tableId  = settings.sTableId,\r\n            menu     = settings.aLengthMenu,\r\n            d2       = Array.isArray( menu[0] ),\r\n            lengths  = d2 ? menu[0] : menu,\r\n            language = d2 ? menu[1] : menu;\r\n    \r\n        var select = $('<select/>', {\r\n            'name':          tableId+'_length',\r\n            'aria-controls': tableId,\r\n            'class':         classes.sLengthSelect\r\n        } );\r\n    \r\n        for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {\r\n            select[0][ i ] = new Option(\r\n                typeof language[i] === 'number' ?\r\n                    settings.fnFormatNumber( language[i] ) :\r\n                    language[i],\r\n                lengths[i]\r\n            );\r\n        }\r\n    \r\n        var div = $('<div><label/></div>').addClass( classes.sLength );\r\n        if ( ! settings.aanFeatures.l ) {\r\n            div[0].id = tableId+'_length';\r\n        }\r\n    \r\n        div.children().append(\r\n            settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )\r\n        );\r\n    \r\n        // Can't use `select` variable as user might provide their own and the\r\n        // reference is broken by the use of outerHTML\r\n        $('select', div)\r\n            .val( settings._iDisplayLength )\r\n            .on( 'change.DT', function(e) {\r\n                _fnLengthChange( settings, $(this).val() );\r\n                _fnDraw( settings );\r\n            } );\r\n    \r\n        // Update node value whenever anything changes the table's length\r\n        $(settings.nTable).on( 'length.dt.DT', function (e, s, len) {\r\n            if ( settings === s ) {\r\n                $('select', div).val( len );\r\n            }\r\n        } );\r\n    \r\n        return div[0];\r\n    }\r\n    \r\n    \r\n    \r\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n     * Note that most of the paging logic is done in\r\n     * DataTable.ext.pager\r\n     */\r\n    \r\n    /**\r\n     * Generate the node required for default pagination\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @returns {node} Pagination feature node\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFeatureHtmlPaginate ( settings )\r\n    {\r\n        var\r\n            type   = settings.sPaginationType,\r\n            plugin = DataTable.ext.pager[ type ],\r\n            modern = typeof plugin === 'function',\r\n            redraw = function( settings ) {\r\n                _fnDraw( settings );\r\n            },\r\n            node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],\r\n            features = settings.aanFeatures;\r\n    \r\n        if ( ! modern ) {\r\n            plugin.fnInit( settings, node, redraw );\r\n        }\r\n    \r\n        /* Add a draw callback for the pagination on first instance, to update the paging display */\r\n        if ( ! features.p )\r\n        {\r\n            node.id = settings.sTableId+'_paginate';\r\n    \r\n            settings.aoDrawCallback.push( {\r\n                \"fn\": function( settings ) {\r\n                    if ( modern ) {\r\n                        var\r\n                            start      = settings._iDisplayStart,\r\n                            len        = settings._iDisplayLength,\r\n                            visRecords = settings.fnRecordsDisplay(),\r\n                            all        = len === -1,\r\n                            page = all ? 0 : Math.ceil( start / len ),\r\n                            pages = all ? 1 : Math.ceil( visRecords / len ),\r\n                            buttons = plugin(page, pages),\r\n                            i, ien;\r\n    \r\n                        for ( i=0, ien=features.p.length ; i<ien ; i++ ) {\r\n                            _fnRenderer( settings, 'pageButton' )(\r\n                                settings, features.p[i], i, buttons, page, pages\r\n                            );\r\n                        }\r\n                    }\r\n                    else {\r\n                        plugin.fnUpdate( settings, redraw );\r\n                    }\r\n                },\r\n                \"sName\": \"pagination\"\r\n            } );\r\n        }\r\n    \r\n        return node;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Alter the display settings to change the page\r\n     *  @param {object} settings DataTables settings object\r\n     *  @param {string|int} action Paging action to take: \"first\", \"previous\",\r\n     *    \"next\" or \"last\" or page number to jump to (integer)\r\n     *  @param [bool] redraw Automatically draw the update or not\r\n     *  @returns {bool} true page has changed, false - no change\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnPageChange ( settings, action, redraw )\r\n    {\r\n        var\r\n            start     = settings._iDisplayStart,\r\n            len       = settings._iDisplayLength,\r\n            records   = settings.fnRecordsDisplay();\r\n    \r\n        if ( records === 0 || len === -1 )\r\n        {\r\n            start = 0;\r\n        }\r\n        else if ( typeof action === \"number\" )\r\n        {\r\n            start = action * len;\r\n    \r\n            if ( start > records )\r\n            {\r\n                start = 0;\r\n            }\r\n        }\r\n        else if ( action == \"first\" )\r\n        {\r\n            start = 0;\r\n        }\r\n        else if ( action == \"previous\" )\r\n        {\r\n            start = len >= 0 ?\r\n                start - len :\r\n                0;\r\n    \r\n            if ( start < 0 )\r\n            {\r\n              start = 0;\r\n            }\r\n        }\r\n        else if ( action == \"next\" )\r\n        {\r\n            if ( start + len < records )\r\n            {\r\n                start += len;\r\n            }\r\n        }\r\n        else if ( action == \"last\" )\r\n        {\r\n            start = Math.floor( (records-1) / len) * len;\r\n        }\r\n        else\r\n        {\r\n            _fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );\r\n        }\r\n    \r\n        var changed = settings._iDisplayStart !== start;\r\n        settings._iDisplayStart = start;\r\n    \r\n        if ( changed ) {\r\n            _fnCallbackFire( settings, null, 'page', [settings] );\r\n    \r\n            if ( redraw ) {\r\n                _fnDraw( settings );\r\n            }\r\n        }\r\n    \r\n        return changed;\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * Generate the node required for the processing node\r\n     *  @param {object} settings dataTables settings object\r\n     *  @returns {node} Processing element\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFeatureHtmlProcessing ( settings )\r\n    {\r\n        return $('<div/>', {\r\n                'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,\r\n                'class': settings.oClasses.sProcessing\r\n            } )\r\n            .html( settings.oLanguage.sProcessing )\r\n            .insertBefore( settings.nTable )[0];\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Display or hide the processing indicator\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {bool} show Show the processing indicator (true) or not (false)\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnProcessingDisplay ( settings, show )\r\n    {\r\n        if ( settings.oFeatures.bProcessing ) {\r\n            $(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );\r\n        }\r\n    \r\n        _fnCallbackFire( settings, null, 'processing', [settings, show] );\r\n    }\r\n    \r\n    /**\r\n     * Add any control elements for the table - specifically scrolling\r\n     *  @param {object} settings dataTables settings object\r\n     *  @returns {node} Node to add to the DOM\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFeatureHtmlTable ( settings )\r\n    {\r\n        var table = $(settings.nTable);\r\n    \r\n        // Scrolling from here on in\r\n        var scroll = settings.oScroll;\r\n    \r\n        if ( scroll.sX === '' && scroll.sY === '' ) {\r\n            return settings.nTable;\r\n        }\r\n    \r\n        var scrollX = scroll.sX;\r\n        var scrollY = scroll.sY;\r\n        var classes = settings.oClasses;\r\n        var caption = table.children('caption');\r\n        var captionSide = caption.length ? caption[0]._captionSide : null;\r\n        var headerClone = $( table[0].cloneNode(false) );\r\n        var footerClone = $( table[0].cloneNode(false) );\r\n        var footer = table.children('tfoot');\r\n        var _div = '<div/>';\r\n        var size = function ( s ) {\r\n            return !s ? null : _fnStringToCss( s );\r\n        };\r\n    \r\n        if ( ! footer.length ) {\r\n            footer = null;\r\n        }\r\n    \r\n        /*\r\n         * The HTML structure that we want to generate in this function is:\r\n         *  div - scroller\r\n         *    div - scroll head\r\n         *      div - scroll head inner\r\n         *        table - scroll head table\r\n         *          thead - thead\r\n         *    div - scroll body\r\n         *      table - table (master table)\r\n         *        thead - thead clone for sizing\r\n         *        tbody - tbody\r\n         *    div - scroll foot\r\n         *      div - scroll foot inner\r\n         *        table - scroll foot table\r\n         *          tfoot - tfoot\r\n         */\r\n        var scroller = $( _div, { 'class': classes.sScrollWrapper } )\r\n            .append(\r\n                $(_div, { 'class': classes.sScrollHead } )\r\n                    .css( {\r\n                        overflow: 'hidden',\r\n                        position: 'relative',\r\n                        border: 0,\r\n                        width: scrollX ? size(scrollX) : '100%'\r\n                    } )\r\n                    .append(\r\n                        $(_div, { 'class': classes.sScrollHeadInner } )\r\n                            .css( {\r\n                                'box-sizing': 'content-box',\r\n                                width: scroll.sXInner || '100%'\r\n                            } )\r\n                            .append(\r\n                                headerClone\r\n                                    .removeAttr('id')\r\n                                    .css( 'margin-left', 0 )\r\n                                    .append( captionSide === 'top' ? caption : null )\r\n                                    .append(\r\n                                        table.children('thead')\r\n                                    )\r\n                            )\r\n                    )\r\n            )\r\n            .append(\r\n                $(_div, { 'class': classes.sScrollBody } )\r\n                    .css( {\r\n                        position: 'relative',\r\n                        overflow: 'auto',\r\n                        width: size( scrollX )\r\n                    } )\r\n                    .append( table )\r\n            );\r\n    \r\n        if ( footer ) {\r\n            scroller.append(\r\n                $(_div, { 'class': classes.sScrollFoot } )\r\n                    .css( {\r\n                        overflow: 'hidden',\r\n                        border: 0,\r\n                        width: scrollX ? size(scrollX) : '100%'\r\n                    } )\r\n                    .append(\r\n                        $(_div, { 'class': classes.sScrollFootInner } )\r\n                            .append(\r\n                                footerClone\r\n                                    .removeAttr('id')\r\n                                    .css( 'margin-left', 0 )\r\n                                    .append( captionSide === 'bottom' ? caption : null )\r\n                                    .append(\r\n                                        table.children('tfoot')\r\n                                    )\r\n                            )\r\n                    )\r\n            );\r\n        }\r\n    \r\n        var children = scroller.children();\r\n        var scrollHead = children[0];\r\n        var scrollBody = children[1];\r\n        var scrollFoot = footer ? children[2] : null;\r\n    \r\n        // When the body is scrolled, then we also want to scroll the headers\r\n        if ( scrollX ) {\r\n            $(scrollBody).on( 'scroll.DT', function (e) {\r\n                var scrollLeft = this.scrollLeft;\r\n    \r\n                scrollHead.scrollLeft = scrollLeft;\r\n    \r\n                if ( footer ) {\r\n                    scrollFoot.scrollLeft = scrollLeft;\r\n                }\r\n            } );\r\n        }\r\n    \r\n        $(scrollBody).css('max-height', scrollY);\r\n        if (! scroll.bCollapse) {\r\n            $(scrollBody).css('height', scrollY);\r\n        }\r\n    \r\n        settings.nScrollHead = scrollHead;\r\n        settings.nScrollBody = scrollBody;\r\n        settings.nScrollFoot = scrollFoot;\r\n    \r\n        // On redraw - align columns\r\n        settings.aoDrawCallback.push( {\r\n            \"fn\": _fnScrollDraw,\r\n            \"sName\": \"scrolling\"\r\n        } );\r\n    \r\n        return scroller[0];\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * Update the header, footer and body tables for resizing - i.e. column\r\n     * alignment.\r\n     *\r\n     * Welcome to the most horrible function DataTables. The process that this\r\n     * function follows is basically:\r\n     *   1. Re-create the table inside the scrolling div\r\n     *   2. Take live measurements from the DOM\r\n     *   3. Apply the measurements to align the columns\r\n     *   4. Clean up\r\n     *\r\n     *  @param {object} settings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnScrollDraw ( settings )\r\n    {\r\n        // Given that this is such a monster function, a lot of variables are use\r\n        // to try and keep the minimised size as small as possible\r\n        var\r\n            scroll         = settings.oScroll,\r\n            scrollX        = scroll.sX,\r\n            scrollXInner   = scroll.sXInner,\r\n            scrollY        = scroll.sY,\r\n            barWidth       = scroll.iBarWidth,\r\n            divHeader      = $(settings.nScrollHead),\r\n            divHeaderStyle = divHeader[0].style,\r\n            divHeaderInner = divHeader.children('div'),\r\n            divHeaderInnerStyle = divHeaderInner[0].style,\r\n            divHeaderTable = divHeaderInner.children('table'),\r\n            divBodyEl      = settings.nScrollBody,\r\n            divBody        = $(divBodyEl),\r\n            divBodyStyle   = divBodyEl.style,\r\n            divFooter      = $(settings.nScrollFoot),\r\n            divFooterInner = divFooter.children('div'),\r\n            divFooterTable = divFooterInner.children('table'),\r\n            header         = $(settings.nTHead),\r\n            table          = $(settings.nTable),\r\n            tableEl        = table[0],\r\n            tableStyle     = tableEl.style,\r\n            footer         = settings.nTFoot ? $(settings.nTFoot) : null,\r\n            browser        = settings.oBrowser,\r\n            ie67           = browser.bScrollOversize,\r\n            dtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),\r\n            headerTrgEls, footerTrgEls,\r\n            headerSrcEls, footerSrcEls,\r\n            headerCopy, footerCopy,\r\n            headerWidths=[], footerWidths=[],\r\n            headerContent=[], footerContent=[],\r\n            idx, correction, sanityWidth,\r\n            zeroOut = function(nSizer) {\r\n                var style = nSizer.style;\r\n                style.paddingTop = \"0\";\r\n                style.paddingBottom = \"0\";\r\n                style.borderTopWidth = \"0\";\r\n                style.borderBottomWidth = \"0\";\r\n                style.height = 0;\r\n            };\r\n    \r\n        // If the scrollbar visibility has changed from the last draw, we need to\r\n        // adjust the column sizes as the table width will have changed to account\r\n        // for the scrollbar\r\n        var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\r\n        \r\n        if ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {\r\n            settings.scrollBarVis = scrollBarVis;\r\n            _fnAdjustColumnSizing( settings );\r\n            return; // adjust column sizing will call this function again\r\n        }\r\n        else {\r\n            settings.scrollBarVis = scrollBarVis;\r\n        }\r\n    \r\n        /*\r\n         * 1. Re-create the table inside the scrolling div\r\n         */\r\n    \r\n        // Remove the old minimised thead and tfoot elements in the inner table\r\n        table.children('thead, tfoot').remove();\r\n    \r\n        if ( footer ) {\r\n            footerCopy = footer.clone().prependTo( table );\r\n            footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\r\n            footerSrcEls = footerCopy.find('tr');\r\n        }\r\n    \r\n        // Clone the current header and footer elements and then place it into the inner table\r\n        headerCopy = header.clone().prependTo( table );\r\n        headerTrgEls = header.find('tr'); // original header is in its own table\r\n        headerSrcEls = headerCopy.find('tr');\r\n        headerCopy.find('th, td').removeAttr('tabindex');\r\n    \r\n    \r\n        /*\r\n         * 2. Take live measurements from the DOM - do not alter the DOM itself!\r\n         */\r\n    \r\n        // Remove old sizing and apply the calculated column widths\r\n        // Get the unique column headers in the newly created (cloned) header. We want to apply the\r\n        // calculated sizes to this header\r\n        if ( ! scrollX )\r\n        {\r\n            divBodyStyle.width = '100%';\r\n            divHeader[0].style.width = '100%';\r\n        }\r\n    \r\n        $.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {\r\n            idx = _fnVisibleToColumnIndex( settings, i );\r\n            el.style.width = settings.aoColumns[idx].sWidth;\r\n        } );\r\n    \r\n        if ( footer ) {\r\n            _fnApplyToChildren( function(n) {\r\n                n.style.width = \"\";\r\n            }, footerSrcEls );\r\n        }\r\n    \r\n        // Size the table as a whole\r\n        sanityWidth = table.outerWidth();\r\n        if ( scrollX === \"\" ) {\r\n            // No x scrolling\r\n            tableStyle.width = \"100%\";\r\n    \r\n            // IE7 will make the width of the table when 100% include the scrollbar\r\n            // - which is shouldn't. When there is a scrollbar we need to take this\r\n            // into account.\r\n            if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||\r\n                divBody.css('overflow-y') == \"scroll\")\r\n            ) {\r\n                tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);\r\n            }\r\n    \r\n            // Recalculate the sanity width\r\n            sanityWidth = table.outerWidth();\r\n        }\r\n        else if ( scrollXInner !== \"\" ) {\r\n            // legacy x scroll inner has been given - use it\r\n            tableStyle.width = _fnStringToCss(scrollXInner);\r\n    \r\n            // Recalculate the sanity width\r\n            sanityWidth = table.outerWidth();\r\n        }\r\n    \r\n        // Hidden header should have zero height, so remove padding and borders. Then\r\n        // set the width based on the real headers\r\n    \r\n        // Apply all styles in one pass\r\n        _fnApplyToChildren( zeroOut, headerSrcEls );\r\n    \r\n        // Read all widths in next pass\r\n        _fnApplyToChildren( function(nSizer) {\r\n            var style = window.getComputedStyle ?\r\n                window.getComputedStyle(nSizer).width :\r\n                _fnStringToCss( $(nSizer).width() );\r\n    \r\n            headerContent.push( nSizer.innerHTML );\r\n            headerWidths.push( style );\r\n        }, headerSrcEls );\r\n    \r\n        // Apply all widths in final pass\r\n        _fnApplyToChildren( function(nToSize, i) {\r\n            nToSize.style.width = headerWidths[i];\r\n        }, headerTrgEls );\r\n    \r\n        $(headerSrcEls).css('height', 0);\r\n    \r\n        /* Same again with the footer if we have one */\r\n        if ( footer )\r\n        {\r\n            _fnApplyToChildren( zeroOut, footerSrcEls );\r\n    \r\n            _fnApplyToChildren( function(nSizer) {\r\n                footerContent.push( nSizer.innerHTML );\r\n                footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\r\n            }, footerSrcEls );\r\n    \r\n            _fnApplyToChildren( function(nToSize, i) {\r\n                nToSize.style.width = footerWidths[i];\r\n            }, footerTrgEls );\r\n    \r\n            $(footerSrcEls).height(0);\r\n        }\r\n    \r\n    \r\n        /*\r\n         * 3. Apply the measurements\r\n         */\r\n    \r\n        // \"Hide\" the header and footer that we used for the sizing. We need to keep\r\n        // the content of the cell so that the width applied to the header and body\r\n        // both match, but we want to hide it completely. We want to also fix their\r\n        // width to what they currently are\r\n        _fnApplyToChildren( function(nSizer, i) {\r\n            nSizer.innerHTML = '<div class=\"dataTables_sizing\">'+headerContent[i]+'</div>';\r\n            nSizer.childNodes[0].style.height = \"0\";\r\n            nSizer.childNodes[0].style.overflow = \"hidden\";\r\n            nSizer.style.width = headerWidths[i];\r\n        }, headerSrcEls );\r\n    \r\n        if ( footer )\r\n        {\r\n            _fnApplyToChildren( function(nSizer, i) {\r\n                nSizer.innerHTML = '<div class=\"dataTables_sizing\">'+footerContent[i]+'</div>';\r\n                nSizer.childNodes[0].style.height = \"0\";\r\n                nSizer.childNodes[0].style.overflow = \"hidden\";\r\n                nSizer.style.width = footerWidths[i];\r\n            }, footerSrcEls );\r\n        }\r\n    \r\n        // Sanity check that the table is of a sensible width. If not then we are going to get\r\n        // misalignment - try to prevent this by not allowing the table to shrink below its min width\r\n        if ( Math.round(table.outerWidth()) < Math.round(sanityWidth) )\r\n        {\r\n            // The min width depends upon if we have a vertical scrollbar visible or not */\r\n            correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||\r\n                divBody.css('overflow-y') == \"scroll\")) ?\r\n                    sanityWidth+barWidth :\r\n                    sanityWidth;\r\n    \r\n            // IE6/7 are a law unto themselves...\r\n            if ( ie67 && (divBodyEl.scrollHeight >\r\n                divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")\r\n            ) {\r\n                tableStyle.width = _fnStringToCss( correction-barWidth );\r\n            }\r\n    \r\n            // And give the user a warning that we've stopped the table getting too small\r\n            if ( scrollX === \"\" || scrollXInner !== \"\" ) {\r\n                _fnLog( settings, 1, 'Possible column misalignment', 6 );\r\n            }\r\n        }\r\n        else\r\n        {\r\n            correction = '100%';\r\n        }\r\n    \r\n        // Apply to the container elements\r\n        divBodyStyle.width = _fnStringToCss( correction );\r\n        divHeaderStyle.width = _fnStringToCss( correction );\r\n    \r\n        if ( footer ) {\r\n            settings.nScrollFoot.style.width = _fnStringToCss( correction );\r\n        }\r\n    \r\n    \r\n        /*\r\n         * 4. Clean up\r\n         */\r\n        if ( ! scrollY ) {\r\n            /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\r\n             * the scrollbar height from the visible display, rather than adding it on. We need to\r\n             * set the height in order to sort this. Don't want to do it in any other browsers.\r\n             */\r\n            if ( ie67 ) {\r\n                divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );\r\n            }\r\n        }\r\n    \r\n        /* Finally set the width's of the header and footer tables */\r\n        var iOuterWidth = table.outerWidth();\r\n        divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );\r\n        divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );\r\n    \r\n        // Figure out if there are scrollbar present - if so then we need a the header and footer to\r\n        // provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\r\n        var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\r\n        var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );\r\n        divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+\"px\" : \"0px\";\r\n    \r\n        if ( footer ) {\r\n            divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );\r\n            divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );\r\n            divFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\r\n        }\r\n    \r\n        // Correct DOM ordering for colgroup - comes before the thead\r\n        table.children('colgroup').insertBefore( table.children('thead') );\r\n    \r\n        /* Adjust the position of the header in case we loose the y-scrollbar */\r\n        divBody.trigger('scroll');\r\n    \r\n        // If sorting or filtering has occurred, jump the scrolling back to the top\r\n        // only if we aren't holding the position\r\n        if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {\r\n            divBodyEl.scrollTop = 0;\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * Apply a given function to the display child nodes of an element array (typically\r\n     * TD children of TR rows\r\n     *  @param {function} fn Method to apply to the objects\r\n     *  @param array {nodes} an1 List of elements to look through for display children\r\n     *  @param array {nodes} an2 Another list (identical structure to the first) - optional\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnApplyToChildren( fn, an1, an2 )\r\n    {\r\n        var index=0, i=0, iLen=an1.length;\r\n        var nNode1, nNode2;\r\n    \r\n        while ( i < iLen ) {\r\n            nNode1 = an1[i].firstChild;\r\n            nNode2 = an2 ? an2[i].firstChild : null;\r\n    \r\n            while ( nNode1 ) {\r\n                if ( nNode1.nodeType === 1 ) {\r\n                    if ( an2 ) {\r\n                        fn( nNode1, nNode2, index );\r\n                    }\r\n                    else {\r\n                        fn( nNode1, index );\r\n                    }\r\n    \r\n                    index++;\r\n                }\r\n    \r\n                nNode1 = nNode1.nextSibling;\r\n                nNode2 = an2 ? nNode2.nextSibling : null;\r\n            }\r\n    \r\n            i++;\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    var __re_html_remove = /<.*?>/g;\r\n    \r\n    \r\n    /**\r\n     * Calculate the width of columns for the table\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnCalculateColumnWidths ( oSettings )\r\n    {\r\n        var\r\n            table = oSettings.nTable,\r\n            columns = oSettings.aoColumns,\r\n            scroll = oSettings.oScroll,\r\n            scrollY = scroll.sY,\r\n            scrollX = scroll.sX,\r\n            scrollXInner = scroll.sXInner,\r\n            columnCount = columns.length,\r\n            visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),\r\n            headerCells = $('th', oSettings.nTHead),\r\n            tableWidthAttr = table.getAttribute('width'), // from DOM element\r\n            tableContainer = table.parentNode,\r\n            userInputs = false,\r\n            i, column, columnIdx, width, outerWidth,\r\n            browser = oSettings.oBrowser,\r\n            ie67 = browser.bScrollOversize;\r\n    \r\n        var styleWidth = table.style.width;\r\n        if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {\r\n            tableWidthAttr = styleWidth;\r\n        }\r\n    \r\n        /* Convert any user input sizes into pixel sizes */\r\n        for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n            column = columns[ visibleColumns[i] ];\r\n    \r\n            if ( column.sWidth !== null ) {\r\n                column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );\r\n    \r\n                userInputs = true;\r\n            }\r\n        }\r\n    \r\n        /* If the number of columns in the DOM equals the number that we have to\r\n         * process in DataTables, then we can use the offsets that are created by\r\n         * the web- browser. No custom sizes can be set in order for this to happen,\r\n         * nor scrolling used\r\n         */\r\n        if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&\r\n             columnCount == _fnVisbleColumns( oSettings ) &&\r\n             columnCount == headerCells.length\r\n        ) {\r\n            for ( i=0 ; i<columnCount ; i++ ) {\r\n                var colIdx = _fnVisibleToColumnIndex( oSettings, i );\r\n    \r\n                if ( colIdx !== null ) {\r\n                    columns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            // Otherwise construct a single row, worst case, table with the widest\r\n            // node in the data, assign any user defined widths, then insert it into\r\n            // the DOM and allow the browser to do all the hard work of calculating\r\n            // table widths\r\n            var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\r\n                .css( 'visibility', 'hidden' )\r\n                .removeAttr( 'id' );\r\n    \r\n            // Clean up the table body\r\n            tmpTable.find('tbody tr').remove();\r\n            var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );\r\n    \r\n            // Clone the table header and footer - we can't use the header / footer\r\n            // from the cloned table, since if scrolling is active, the table's\r\n            // real header and footer are contained in different table tags\r\n            tmpTable.find('thead, tfoot').remove();\r\n            tmpTable\r\n                .append( $(oSettings.nTHead).clone() )\r\n                .append( $(oSettings.nTFoot).clone() );\r\n    \r\n            // Remove any assigned widths from the footer (from scrolling)\r\n            tmpTable.find('tfoot th, tfoot td').css('width', '');\r\n    \r\n            // Apply custom sizing to the cloned header\r\n            headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );\r\n    \r\n            for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                column = columns[ visibleColumns[i] ];\r\n    \r\n                headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?\r\n                    _fnStringToCss( column.sWidthOrig ) :\r\n                    '';\r\n    \r\n                // For scrollX we need to force the column width otherwise the\r\n                // browser will collapse it. If this width is smaller than the\r\n                // width the column requires, then it will have no effect\r\n                if ( column.sWidthOrig && scrollX ) {\r\n                    $( headerCells[i] ).append( $('<div/>').css( {\r\n                        width: column.sWidthOrig,\r\n                        margin: 0,\r\n                        padding: 0,\r\n                        border: 0,\r\n                        height: 1\r\n                    } ) );\r\n                }\r\n            }\r\n    \r\n            // Find the widest cell for each column and put it into the table\r\n            if ( oSettings.aoData.length ) {\r\n                for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                    columnIdx = visibleColumns[i];\r\n                    column = columns[ columnIdx ];\r\n    \r\n                    $( _fnGetWidestNode( oSettings, columnIdx ) )\r\n                        .clone( false )\r\n                        .append( column.sContentPadding )\r\n                        .appendTo( tr );\r\n                }\r\n            }\r\n    \r\n            // Tidy the temporary table - remove name attributes so there aren't\r\n            // duplicated in the dom (radio elements for example)\r\n            $('[name]', tmpTable).removeAttr('name');\r\n    \r\n            // Table has been built, attach to the document so we can work with it.\r\n            // A holding element is used, positioned at the top of the container\r\n            // with minimal height, so it has no effect on if the container scrolls\r\n            // or not. Otherwise it might trigger scrolling when it actually isn't\r\n            // needed\r\n            var holder = $('<div/>').css( scrollX || scrollY ?\r\n                    {\r\n                        position: 'absolute',\r\n                        top: 0,\r\n                        left: 0,\r\n                        height: 1,\r\n                        right: 0,\r\n                        overflow: 'hidden'\r\n                    } :\r\n                    {}\r\n                )\r\n                .append( tmpTable )\r\n                .appendTo( tableContainer );\r\n    \r\n            // When scrolling (X or Y) we want to set the width of the table as \r\n            // appropriate. However, when not scrolling leave the table width as it\r\n            // is. This results in slightly different, but I think correct behaviour\r\n            if ( scrollX && scrollXInner ) {\r\n                tmpTable.width( scrollXInner );\r\n            }\r\n            else if ( scrollX ) {\r\n                tmpTable.css( 'width', 'auto' );\r\n                tmpTable.removeAttr('width');\r\n    \r\n                // If there is no width attribute or style, then allow the table to\r\n                // collapse\r\n                if ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {\r\n                    tmpTable.width( tableContainer.clientWidth );\r\n                }\r\n            }\r\n            else if ( scrollY ) {\r\n                tmpTable.width( tableContainer.clientWidth );\r\n            }\r\n            else if ( tableWidthAttr ) {\r\n                tmpTable.width( tableWidthAttr );\r\n            }\r\n    \r\n            // Get the width of each column in the constructed table - we need to\r\n            // know the inner width (so it can be assigned to the other table's\r\n            // cells) and the outer width so we can calculate the full width of the\r\n            // table. This is safe since DataTables requires a unique cell for each\r\n            // column, but if ever a header can span multiple columns, this will\r\n            // need to be modified.\r\n            var total = 0;\r\n            for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                var cell = $(headerCells[i]);\r\n                var border = cell.outerWidth() - cell.width();\r\n    \r\n                // Use getBounding... where possible (not IE8-) because it can give\r\n                // sub-pixel accuracy, which we then want to round up!\r\n                var bounding = browser.bBounding ?\r\n                    Math.ceil( headerCells[i].getBoundingClientRect().width ) :\r\n                    cell.outerWidth();\r\n    \r\n                // Total is tracked to remove any sub-pixel errors as the outerWidth\r\n                // of the table might not equal the total given here (IE!).\r\n                total += bounding;\r\n    \r\n                // Width for each column to use\r\n                columns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );\r\n            }\r\n    \r\n            table.style.width = _fnStringToCss( total );\r\n    \r\n            // Finished with the table - ditch it\r\n            holder.remove();\r\n        }\r\n    \r\n        // If there is a width attr, we want to attach an event listener which\r\n        // allows the table sizing to automatically adjust when the window is\r\n        // resized. Use the width attr rather than CSS, since we can't know if the\r\n        // CSS is a relative value or absolute - DOM read is always px.\r\n        if ( tableWidthAttr ) {\r\n            table.style.width = _fnStringToCss( tableWidthAttr );\r\n        }\r\n    \r\n        if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {\r\n            var bindResize = function () {\r\n                $(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {\r\n                    _fnAdjustColumnSizing( oSettings );\r\n                } ) );\r\n            };\r\n    \r\n            // IE6/7 will crash if we bind a resize event handler on page load.\r\n            // To be removed in 1.11 which drops IE6/7 support\r\n            if ( ie67 ) {\r\n                setTimeout( bindResize, 1000 );\r\n            }\r\n            else {\r\n                bindResize();\r\n            }\r\n    \r\n            oSettings._reszEvt = true;\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Throttle the calls to a function. Arguments and context are maintained for\r\n     * the throttled function\r\n     *  @param {function} fn Function to be called\r\n     *  @param {int} [freq=200] call frequency in mS\r\n     *  @returns {function} wrapped function\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    var _fnThrottle = DataTable.util.throttle;\r\n    \r\n    \r\n    /**\r\n     * Convert a CSS unit width to pixels (e.g. 2em)\r\n     *  @param {string} width width to be converted\r\n     *  @param {node} parent parent to get the with for (required for relative widths) - optional\r\n     *  @returns {int} width in pixels\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnConvertToWidth ( width, parent )\r\n    {\r\n        if ( ! width ) {\r\n            return 0;\r\n        }\r\n    \r\n        var n = $('<div/>')\r\n            .css( 'width', _fnStringToCss( width ) )\r\n            .appendTo( parent || document.body );\r\n    \r\n        var val = n[0].offsetWidth;\r\n        n.remove();\r\n    \r\n        return val;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get the widest node\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {int} colIdx column of interest\r\n     *  @returns {node} widest table node\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnGetWidestNode( settings, colIdx )\r\n    {\r\n        var idx = _fnGetMaxLenString( settings, colIdx );\r\n        if ( idx < 0 ) {\r\n            return null;\r\n        }\r\n    \r\n        var data = settings.aoData[ idx ];\r\n        return ! data.nTr ? // Might not have been created when deferred rendering\r\n            $('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :\r\n            data.anCells[ colIdx ];\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get the maximum strlen for each data column\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {int} colIdx column of interest\r\n     *  @returns {string} max string length for each column\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnGetMaxLenString( settings, colIdx )\r\n    {\r\n        var s, max=-1, maxIdx = -1;\r\n    \r\n        for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n            s = _fnGetCellData( settings, i, colIdx, 'display' )+'';\r\n            s = s.replace( __re_html_remove, '' );\r\n            s = s.replace( /&nbsp;/g, ' ' );\r\n    \r\n            if ( s.length > max ) {\r\n                max = s.length;\r\n                maxIdx = i;\r\n            }\r\n        }\r\n    \r\n        return maxIdx;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Append a CSS unit (only if required) to a string\r\n     *  @param {string} value to css-ify\r\n     *  @returns {string} value with css unit\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnStringToCss( s )\r\n    {\r\n        if ( s === null ) {\r\n            return '0px';\r\n        }\r\n    \r\n        if ( typeof s == 'number' ) {\r\n            return s < 0 ?\r\n                '0px' :\r\n                s+'px';\r\n        }\r\n    \r\n        // Check it has a unit character already\r\n        return s.match(/\\d$/) ?\r\n            s+'px' :\r\n            s;\r\n    }\r\n    \r\n    \r\n    \r\n    function _fnSortFlatten ( settings )\r\n    {\r\n        var\r\n            i, iLen, k, kLen,\r\n            aSort = [],\r\n            aiOrig = [],\r\n            aoColumns = settings.aoColumns,\r\n            aDataSort, iCol, sType, srcCol,\r\n            fixed = settings.aaSortingFixed,\r\n            fixedObj = $.isPlainObject( fixed ),\r\n            nestedSort = [],\r\n            add = function ( a ) {\r\n                if ( a.length && ! Array.isArray( a[0] ) ) {\r\n                    // 1D array\r\n                    nestedSort.push( a );\r\n                }\r\n                else {\r\n                    // 2D array\r\n                    $.merge( nestedSort, a );\r\n                }\r\n            };\r\n    \r\n        // Build the sort array, with pre-fix and post-fix options if they have been\r\n        // specified\r\n        if ( Array.isArray( fixed ) ) {\r\n            add( fixed );\r\n        }\r\n    \r\n        if ( fixedObj && fixed.pre ) {\r\n            add( fixed.pre );\r\n        }\r\n    \r\n        add( settings.aaSorting );\r\n    \r\n        if (fixedObj && fixed.post ) {\r\n            add( fixed.post );\r\n        }\r\n    \r\n        for ( i=0 ; i<nestedSort.length ; i++ )\r\n        {\r\n            srcCol = nestedSort[i][0];\r\n            aDataSort = aoColumns[ srcCol ].aDataSort;\r\n    \r\n            for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )\r\n            {\r\n                iCol = aDataSort[k];\r\n                sType = aoColumns[ iCol ].sType || 'string';\r\n    \r\n                if ( nestedSort[i]._idx === undefined ) {\r\n                    nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );\r\n                }\r\n    \r\n                aSort.push( {\r\n                    src:       srcCol,\r\n                    col:       iCol,\r\n                    dir:       nestedSort[i][1],\r\n                    index:     nestedSort[i]._idx,\r\n                    type:      sType,\r\n                    formatter: DataTable.ext.type.order[ sType+\"-pre\" ]\r\n                } );\r\n            }\r\n        }\r\n    \r\n        return aSort;\r\n    }\r\n    \r\n    /**\r\n     * Change the order of the table\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     *  @todo This really needs split up!\r\n     */\r\n    function _fnSort ( oSettings )\r\n    {\r\n        var\r\n            i, ien, iLen, j, jLen, k, kLen,\r\n            sDataType, nTh,\r\n            aiOrig = [],\r\n            oExtSort = DataTable.ext.type.order,\r\n            aoData = oSettings.aoData,\r\n            aoColumns = oSettings.aoColumns,\r\n            aDataSort, data, iCol, sType, oSort,\r\n            formatters = 0,\r\n            sortCol,\r\n            displayMaster = oSettings.aiDisplayMaster,\r\n            aSort;\r\n    \r\n        // Resolve any column types that are unknown due to addition or invalidation\r\n        // @todo Can this be moved into a 'data-ready' handler which is called when\r\n        //   data is going to be used in the table?\r\n        _fnColumnTypes( oSettings );\r\n    \r\n        aSort = _fnSortFlatten( oSettings );\r\n    \r\n        for ( i=0, ien=aSort.length ; i<ien ; i++ ) {\r\n            sortCol = aSort[i];\r\n    \r\n            // Track if we can use the fast sort algorithm\r\n            if ( sortCol.formatter ) {\r\n                formatters++;\r\n            }\r\n    \r\n            // Load the data needed for the sort, for each cell\r\n            _fnSortData( oSettings, sortCol.col );\r\n        }\r\n    \r\n        /* No sorting required if server-side or no sorting array */\r\n        if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )\r\n        {\r\n            // Create a value - key array of the current row positions such that we can use their\r\n            // current position during the sort, if values match, in order to perform stable sorting\r\n            for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {\r\n                aiOrig[ displayMaster[i] ] = i;\r\n            }\r\n    \r\n            /* Do the sort - here we want multi-column sorting based on a given data source (column)\r\n             * and sorting function (from oSort) in a certain direction. It's reasonably complex to\r\n             * follow on it's own, but this is what we want (example two column sorting):\r\n             *  fnLocalSorting = function(a,b){\r\n             *    var iTest;\r\n             *    iTest = oSort['string-asc']('data11', 'data12');\r\n             *      if (iTest !== 0)\r\n             *        return iTest;\r\n             *    iTest = oSort['numeric-desc']('data21', 'data22');\r\n             *    if (iTest !== 0)\r\n             *      return iTest;\r\n             *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\r\n             *  }\r\n             * Basically we have a test for each sorting column, if the data in that column is equal,\r\n             * test the next column. If all columns match, then we use a numeric sort on the row\r\n             * positions in the original data array to provide a stable sort.\r\n             *\r\n             * Note - I know it seems excessive to have two sorting methods, but the first is around\r\n             * 15% faster, so the second is only maintained for backwards compatibility with sorting\r\n             * methods which do not have a pre-sort formatting function.\r\n             */\r\n            if ( formatters === aSort.length ) {\r\n                // All sort types have formatting functions\r\n                displayMaster.sort( function ( a, b ) {\r\n                    var\r\n                        x, y, k, test, sort,\r\n                        len=aSort.length,\r\n                        dataA = aoData[a]._aSortData,\r\n                        dataB = aoData[b]._aSortData;\r\n    \r\n                    for ( k=0 ; k<len ; k++ ) {\r\n                        sort = aSort[k];\r\n    \r\n                        x = dataA[ sort.col ];\r\n                        y = dataB[ sort.col ];\r\n    \r\n                        test = x<y ? -1 : x>y ? 1 : 0;\r\n                        if ( test !== 0 ) {\r\n                            return sort.dir === 'asc' ? test : -test;\r\n                        }\r\n                    }\r\n    \r\n                    x = aiOrig[a];\r\n                    y = aiOrig[b];\r\n                    return x<y ? -1 : x>y ? 1 : 0;\r\n                } );\r\n            }\r\n            else {\r\n                // Depreciated - remove in 1.11 (providing a plug-in option)\r\n                // Not all sort types have formatting methods, so we have to call their sorting\r\n                // methods.\r\n                displayMaster.sort( function ( a, b ) {\r\n                    var\r\n                        x, y, k, l, test, sort, fn,\r\n                        len=aSort.length,\r\n                        dataA = aoData[a]._aSortData,\r\n                        dataB = aoData[b]._aSortData;\r\n    \r\n                    for ( k=0 ; k<len ; k++ ) {\r\n                        sort = aSort[k];\r\n    \r\n                        x = dataA[ sort.col ];\r\n                        y = dataB[ sort.col ];\r\n    \r\n                        fn = oExtSort[ sort.type+\"-\"+sort.dir ] || oExtSort[ \"string-\"+sort.dir ];\r\n                        test = fn( x, y );\r\n                        if ( test !== 0 ) {\r\n                            return test;\r\n                        }\r\n                    }\r\n    \r\n                    x = aiOrig[a];\r\n                    y = aiOrig[b];\r\n                    return x<y ? -1 : x>y ? 1 : 0;\r\n                } );\r\n            }\r\n        }\r\n    \r\n        /* Tell the draw function that we have sorted the data */\r\n        oSettings.bSorted = true;\r\n    }\r\n    \r\n    \r\n    function _fnSortAria ( settings )\r\n    {\r\n        var label;\r\n        var nextSort;\r\n        var columns = settings.aoColumns;\r\n        var aSort = _fnSortFlatten( settings );\r\n        var oAria = settings.oLanguage.oAria;\r\n    \r\n        // ARIA attributes - need to loop all columns, to update all (removing old\r\n        // attributes as needed)\r\n        for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\r\n        {\r\n            var col = columns[i];\r\n            var asSorting = col.asSorting;\r\n            var sTitle = col.ariaTitle || col.sTitle.replace( /<.*?>/g, \"\" );\r\n            var th = col.nTh;\r\n    \r\n            // IE7 is throwing an error when setting these properties with jQuery's\r\n            // attr() and removeAttr() methods...\r\n            th.removeAttribute('aria-sort');\r\n    \r\n            /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\r\n            if ( col.bSortable ) {\r\n                if ( aSort.length > 0 && aSort[0].col == i ) {\r\n                    th.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );\r\n                    nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];\r\n                }\r\n                else {\r\n                    nextSort = asSorting[0];\r\n                }\r\n    \r\n                label = sTitle + ( nextSort === \"asc\" ?\r\n                    oAria.sSortAscending :\r\n                    oAria.sSortDescending\r\n                );\r\n            }\r\n            else {\r\n                label = sTitle;\r\n            }\r\n    \r\n            th.setAttribute('aria-label', label);\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Function to run on user sort request\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {node} attachTo node to attach the handler to\r\n     *  @param {int} colIdx column sorting index\r\n     *  @param {boolean} [append=false] Append the requested sort to the existing\r\n     *    sort if true (i.e. multi-column sort)\r\n     *  @param {function} [callback] callback function\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSortListener ( settings, colIdx, append, callback )\r\n    {\r\n        var col = settings.aoColumns[ colIdx ];\r\n        var sorting = settings.aaSorting;\r\n        var asSorting = col.asSorting;\r\n        var nextSortIdx;\r\n        var next = function ( a, overflow ) {\r\n            var idx = a._idx;\r\n            if ( idx === undefined ) {\r\n                idx = $.inArray( a[1], asSorting );\r\n            }\r\n    \r\n            return idx+1 < asSorting.length ?\r\n                idx+1 :\r\n                overflow ?\r\n                    null :\r\n                    0;\r\n        };\r\n    \r\n        // Convert to 2D array if needed\r\n        if ( typeof sorting[0] === 'number' ) {\r\n            sorting = settings.aaSorting = [ sorting ];\r\n        }\r\n    \r\n        // If appending the sort then we are multi-column sorting\r\n        if ( append && settings.oFeatures.bSortMulti ) {\r\n            // Are we already doing some kind of sort on this column?\r\n            var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );\r\n    \r\n            if ( sortIdx !== -1 ) {\r\n                // Yes, modify the sort\r\n                nextSortIdx = next( sorting[sortIdx], true );\r\n    \r\n                if ( nextSortIdx === null && sorting.length === 1 ) {\r\n                    nextSortIdx = 0; // can't remove sorting completely\r\n                }\r\n    \r\n                if ( nextSortIdx === null ) {\r\n                    sorting.splice( sortIdx, 1 );\r\n                }\r\n                else {\r\n                    sorting[sortIdx][1] = asSorting[ nextSortIdx ];\r\n                    sorting[sortIdx]._idx = nextSortIdx;\r\n                }\r\n            }\r\n            else {\r\n                // No sort on this column yet\r\n                sorting.push( [ colIdx, asSorting[0], 0 ] );\r\n                sorting[sorting.length-1]._idx = 0;\r\n            }\r\n        }\r\n        else if ( sorting.length && sorting[0][0] == colIdx ) {\r\n            // Single column - already sorting on this column, modify the sort\r\n            nextSortIdx = next( sorting[0] );\r\n    \r\n            sorting.length = 1;\r\n            sorting[0][1] = asSorting[ nextSortIdx ];\r\n            sorting[0]._idx = nextSortIdx;\r\n        }\r\n        else {\r\n            // Single column - sort only on this column\r\n            sorting.length = 0;\r\n            sorting.push( [ colIdx, asSorting[0] ] );\r\n            sorting[0]._idx = 0;\r\n        }\r\n    \r\n        // Run the sort by calling a full redraw\r\n        _fnReDraw( settings );\r\n    \r\n        // callback used for async user interaction\r\n        if ( typeof callback == 'function' ) {\r\n            callback( settings );\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Attach a sort handler (click) to a node\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {node} attachTo node to attach the handler to\r\n     *  @param {int} colIdx column sorting index\r\n     *  @param {function} [callback] callback function\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSortAttachListener ( settings, attachTo, colIdx, callback )\r\n    {\r\n        var col = settings.aoColumns[ colIdx ];\r\n    \r\n        _fnBindAction( attachTo, {}, function (e) {\r\n            /* If the column is not sortable - don't to anything */\r\n            if ( col.bSortable === false ) {\r\n                return;\r\n            }\r\n    \r\n            // If processing is enabled use a timeout to allow the processing\r\n            // display to be shown - otherwise to it synchronously\r\n            if ( settings.oFeatures.bProcessing ) {\r\n                _fnProcessingDisplay( settings, true );\r\n    \r\n                setTimeout( function() {\r\n                    _fnSortListener( settings, colIdx, e.shiftKey, callback );\r\n    \r\n                    // In server-side processing, the draw callback will remove the\r\n                    // processing display\r\n                    if ( _fnDataSource( settings ) !== 'ssp' ) {\r\n                        _fnProcessingDisplay( settings, false );\r\n                    }\r\n                }, 0 );\r\n            }\r\n            else {\r\n                _fnSortListener( settings, colIdx, e.shiftKey, callback );\r\n            }\r\n        } );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Set the sorting classes on table's body, Note: it is safe to call this function\r\n     * when bSort and bSortClasses are false\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSortingClasses( settings )\r\n    {\r\n        var oldSort = settings.aLastSort;\r\n        var sortClass = settings.oClasses.sSortColumn;\r\n        var sort = _fnSortFlatten( settings );\r\n        var features = settings.oFeatures;\r\n        var i, ien, colIdx;\r\n    \r\n        if ( features.bSort && features.bSortClasses ) {\r\n            // Remove old sorting classes\r\n            for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {\r\n                colIdx = oldSort[i].src;\r\n    \r\n                // Remove column sorting\r\n                $( _pluck( settings.aoData, 'anCells', colIdx ) )\r\n                    .removeClass( sortClass + (i<2 ? i+1 : 3) );\r\n            }\r\n    \r\n            // Add new column sorting\r\n            for ( i=0, ien=sort.length ; i<ien ; i++ ) {\r\n                colIdx = sort[i].src;\r\n    \r\n                $( _pluck( settings.aoData, 'anCells', colIdx ) )\r\n                    .addClass( sortClass + (i<2 ? i+1 : 3) );\r\n            }\r\n        }\r\n    \r\n        settings.aLastSort = sort;\r\n    }\r\n    \r\n    \r\n    // Get the data to sort a column, be it from cache, fresh (populating the\r\n    // cache), or from a sort formatter\r\n    function _fnSortData( settings, idx )\r\n    {\r\n        // Custom sorting function - provided by the sort data type\r\n        var column = settings.aoColumns[ idx ];\r\n        var customSort = DataTable.ext.order[ column.sSortDataType ];\r\n        var customData;\r\n    \r\n        if ( customSort ) {\r\n            customData = customSort.call( settings.oInstance, settings, idx,\r\n                _fnColumnIndexToVisible( settings, idx )\r\n            );\r\n        }\r\n    \r\n        // Use / populate cache\r\n        var row, cellData;\r\n        var formatter = DataTable.ext.type.order[ column.sType+\"-pre\" ];\r\n    \r\n        for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n            row = settings.aoData[i];\r\n    \r\n            if ( ! row._aSortData ) {\r\n                row._aSortData = [];\r\n            }\r\n    \r\n            if ( ! row._aSortData[idx] || customSort ) {\r\n                cellData = customSort ?\r\n                    customData[i] : // If there was a custom sort function, use data from there\r\n                    _fnGetCellData( settings, i, idx, 'sort' );\r\n    \r\n                row._aSortData[ idx ] = formatter ?\r\n                    formatter( cellData ) :\r\n                    cellData;\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * Save the state of a table\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSaveState ( settings )\r\n    {\r\n        if (settings._bLoadingState) {\r\n            return;\r\n        }\r\n    \r\n        /* Store the interesting variables */\r\n        var state = {\r\n            time:    +new Date(),\r\n            start:   settings._iDisplayStart,\r\n            length:  settings._iDisplayLength,\r\n            order:   $.extend( true, [], settings.aaSorting ),\r\n            search:  _fnSearchToCamel( settings.oPreviousSearch ),\r\n            columns: $.map( settings.aoColumns, function ( col, i ) {\r\n                return {\r\n                    visible: col.bVisible,\r\n                    search: _fnSearchToCamel( settings.aoPreSearchCols[i] )\r\n                };\r\n            } )\r\n        };\r\n    \r\n        settings.oSavedState = state;\r\n        _fnCallbackFire( settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state] );\r\n        \r\n        if ( settings.oFeatures.bStateSave && !settings.bDestroying )\r\n        {\r\n            settings.fnStateSaveCallback.call( settings.oInstance, settings, state );\r\n        }   \r\n    }\r\n    \r\n    \r\n    /**\r\n     * Attempt to load a saved table state\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {object} oInit DataTables init object so we can override settings\r\n     *  @param {function} callback Callback to execute when the state has been loaded\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnLoadState ( settings, oInit, callback )\r\n    {\r\n        if ( ! settings.oFeatures.bStateSave ) {\r\n            callback();\r\n            return;\r\n        }\r\n    \r\n        var loaded = function(state) {\r\n            _fnImplementState(settings, state, callback);\r\n        }\r\n    \r\n        var state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );\r\n    \r\n        if ( state !== undefined ) {\r\n            _fnImplementState( settings, state, callback );\r\n        }\r\n        // otherwise, wait for the loaded callback to be executed\r\n    \r\n        return true;\r\n    }\r\n    \r\n    function _fnImplementState ( settings, s, callback) {\r\n        var i, ien;\r\n        var columns = settings.aoColumns;\r\n        settings._bLoadingState = true;\r\n    \r\n        // When StateRestore was introduced the state could now be implemented at any time\r\n        // Not just initialisation. To do this an api instance is required in some places\r\n        var api = settings._bInitComplete ? new DataTable.Api(settings) : null;\r\n    \r\n        if ( ! s || ! s.time ) {\r\n            settings._bLoadingState = false;\r\n            callback();\r\n            return;\r\n        }\r\n    \r\n        // Allow custom and plug-in manipulation functions to alter the saved data set and\r\n        // cancelling of loading by returning false\r\n        var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );\r\n        if ( $.inArray( false, abStateLoad ) !== -1 ) {\r\n            settings._bLoadingState = false;\r\n            callback();\r\n            return;\r\n        }\r\n    \r\n        // Reject old data\r\n        var duration = settings.iStateDuration;\r\n        if ( duration > 0 && s.time < +new Date() - (duration*1000) ) {\r\n            settings._bLoadingState = false;\r\n            callback();\r\n            return;\r\n        }\r\n    \r\n        // Number of columns have changed - all bets are off, no restore of settings\r\n        if ( s.columns && columns.length !== s.columns.length ) {\r\n            settings._bLoadingState = false;\r\n            callback();\r\n            return;\r\n        }\r\n    \r\n        // Store the saved state so it might be accessed at any time\r\n        settings.oLoadedState = $.extend( true, {}, s );\r\n    \r\n        // Restore key features - todo - for 1.11 this needs to be done by\r\n        // subscribed events\r\n        if ( s.start !== undefined ) {\r\n            if(api === null) {\r\n                settings._iDisplayStart    = s.start;\r\n                settings.iInitDisplayStart = s.start;\r\n            }\r\n            else {\r\n                _fnPageChange(settings, s.start/s.length);\r\n    \r\n            }\r\n        }\r\n        if ( s.length !== undefined ) {\r\n            settings._iDisplayLength   = s.length;\r\n        }\r\n    \r\n        // Order\r\n        if ( s.order !== undefined ) {\r\n            settings.aaSorting = [];\r\n            $.each( s.order, function ( i, col ) {\r\n                settings.aaSorting.push( col[0] >= columns.length ?\r\n                    [ 0, col[1] ] :\r\n                    col\r\n                );\r\n            } );\r\n        }\r\n    \r\n        // Search\r\n        if ( s.search !== undefined ) {\r\n            $.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );\r\n        }\r\n    \r\n        // Columns\r\n        if ( s.columns ) {\r\n            for ( i=0, ien=s.columns.length ; i<ien ; i++ ) {\r\n                var col = s.columns[i];\r\n    \r\n                // Visibility\r\n                if ( col.visible !== undefined ) {\r\n                    // If the api is defined, the table has been initialised so we need to use it rather than internal settings\r\n                    if (api) {\r\n                        // Don't redraw the columns on every iteration of this loop, we will do this at the end instead\r\n                        api.column(i).visible(col.visible, false);\r\n                    }\r\n                    else {\r\n                        columns[i].bVisible = col.visible;\r\n                    }\r\n                }\r\n    \r\n                // Search\r\n                if ( col.search !== undefined ) {\r\n                    $.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );\r\n                }\r\n            }\r\n            \r\n            // If the api is defined then we need to adjust the columns once the visibility has been changed\r\n            if (api) {\r\n                api.columns.adjust();\r\n            }\r\n        }\r\n    \r\n        settings._bLoadingState = false;\r\n        _fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );\r\n        callback();\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Return the settings object for a particular table\r\n     *  @param {node} table table we are using as a dataTable\r\n     *  @returns {object} Settings object - or null if not found\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSettingsFromNode ( table )\r\n    {\r\n        var settings = DataTable.settings;\r\n        var idx = $.inArray( table, _pluck( settings, 'nTable' ) );\r\n    \r\n        return idx !== -1 ?\r\n            settings[ idx ] :\r\n            null;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Log an error message\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {int} level log error messages, or display them to the user\r\n     *  @param {string} msg error message\r\n     *  @param {int} tn Technical note id to get more information about the error.\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnLog( settings, level, msg, tn )\r\n    {\r\n        msg = 'DataTables warning: '+\r\n            (settings ? 'table id='+settings.sTableId+' - ' : '')+msg;\r\n    \r\n        if ( tn ) {\r\n            msg += '. For more information about this error, please see '+\r\n            'http://datatables.net/tn/'+tn;\r\n        }\r\n    \r\n        if ( ! level  ) {\r\n            // Backwards compatibility pre 1.10\r\n            var ext = DataTable.ext;\r\n            var type = ext.sErrMode || ext.errMode;\r\n    \r\n            if ( settings ) {\r\n                _fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );\r\n            }\r\n    \r\n            if ( type == 'alert' ) {\r\n                alert( msg );\r\n            }\r\n            else if ( type == 'throw' ) {\r\n                throw new Error(msg);\r\n            }\r\n            else if ( typeof type == 'function' ) {\r\n                type( settings, tn, msg );\r\n            }\r\n        }\r\n        else if ( window.console && console.log ) {\r\n            console.log( msg );\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * See if a property is defined on one object, if so assign it to the other object\r\n     *  @param {object} ret target object\r\n     *  @param {object} src source object\r\n     *  @param {string} name property\r\n     *  @param {string} [mappedName] name to map too - optional, name used if not given\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnMap( ret, src, name, mappedName )\r\n    {\r\n        if ( Array.isArray( name ) ) {\r\n            $.each( name, function (i, val) {\r\n                if ( Array.isArray( val ) ) {\r\n                    _fnMap( ret, src, val[0], val[1] );\r\n                }\r\n                else {\r\n                    _fnMap( ret, src, val );\r\n                }\r\n            } );\r\n    \r\n            return;\r\n        }\r\n    \r\n        if ( mappedName === undefined ) {\r\n            mappedName = name;\r\n        }\r\n    \r\n        if ( src[name] !== undefined ) {\r\n            ret[mappedName] = src[name];\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Extend objects - very similar to jQuery.extend, but deep copy objects, and\r\n     * shallow copy arrays. The reason we need to do this, is that we don't want to\r\n     * deep copy array init values (such as aaSorting) since the dev wouldn't be\r\n     * able to override them, but we do want to deep copy arrays.\r\n     *  @param {object} out Object to extend\r\n     *  @param {object} extender Object from which the properties will be applied to\r\n     *      out\r\n     *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\r\n     *      independent copy with the exception of the `data` or `aaData` parameters\r\n     *      if they are present. This is so you can pass in a collection to\r\n     *      DataTables and have that used as your data source without breaking the\r\n     *      references\r\n     *  @returns {object} out Reference, just for convenience - out === the return.\r\n     *  @memberof DataTable#oApi\r\n     *  @todo This doesn't take account of arrays inside the deep copied objects.\r\n     */\r\n    function _fnExtend( out, extender, breakRefs )\r\n    {\r\n        var val;\r\n    \r\n        for ( var prop in extender ) {\r\n            if ( extender.hasOwnProperty(prop) ) {\r\n                val = extender[prop];\r\n    \r\n                if ( $.isPlainObject( val ) ) {\r\n                    if ( ! $.isPlainObject( out[prop] ) ) {\r\n                        out[prop] = {};\r\n                    }\r\n                    $.extend( true, out[prop], val );\r\n                }\r\n                else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && Array.isArray(val) ) {\r\n                    out[prop] = val.slice();\r\n                }\r\n                else {\r\n                    out[prop] = val;\r\n                }\r\n            }\r\n        }\r\n    \r\n        return out;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Bind an event handers to allow a click or return key to activate the callback.\r\n     * This is good for accessibility since a return on the keyboard will have the\r\n     * same effect as a click, if the element has focus.\r\n     *  @param {element} n Element to bind the action to\r\n     *  @param {object} oData Data object to pass to the triggered function\r\n     *  @param {function} fn Callback function for when the event is triggered\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnBindAction( n, oData, fn )\r\n    {\r\n        $(n)\r\n            .on( 'click.DT', oData, function (e) {\r\n                    $(n).trigger('blur'); // Remove focus outline for mouse users\r\n                    fn(e);\r\n                } )\r\n            .on( 'keypress.DT', oData, function (e){\r\n                    if ( e.which === 13 ) {\r\n                        e.preventDefault();\r\n                        fn(e);\r\n                    }\r\n                } )\r\n            .on( 'selectstart.DT', function () {\r\n                    /* Take the brutal approach to cancelling text selection */\r\n                    return false;\r\n                } );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Register a callback function. Easily allows a callback function to be added to\r\n     * an array store of callback functions that can then all be called together.\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {string} sStore Name of the array storage for the callbacks in oSettings\r\n     *  @param {function} fn Function to be called back\r\n     *  @param {string} sName Identifying name for the callback (i.e. a label)\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnCallbackReg( oSettings, sStore, fn, sName )\r\n    {\r\n        if ( fn )\r\n        {\r\n            oSettings[sStore].push( {\r\n                \"fn\": fn,\r\n                \"sName\": sName\r\n            } );\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Fire callback functions and trigger events. Note that the loop over the\r\n     * callback array store is done backwards! Further note that you do not want to\r\n     * fire off triggers in time sensitive applications (for example cell creation)\r\n     * as its slow.\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {string} callbackArr Name of the array storage for the callbacks in\r\n     *      oSettings\r\n     *  @param {string} eventName Name of the jQuery custom event to trigger. If\r\n     *      null no trigger is fired\r\n     *  @param {array} args Array of arguments to pass to the callback function /\r\n     *      trigger\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnCallbackFire( settings, callbackArr, eventName, args )\r\n    {\r\n        var ret = [];\r\n    \r\n        if ( callbackArr ) {\r\n            ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {\r\n                return val.fn.apply( settings.oInstance, args );\r\n            } );\r\n        }\r\n    \r\n        if ( eventName !== null ) {\r\n            var e = $.Event( eventName+'.dt' );\r\n    \r\n            $(settings.nTable).trigger( e, args );\r\n    \r\n            ret.push( e.result );\r\n        }\r\n    \r\n        return ret;\r\n    }\r\n    \r\n    \r\n    function _fnLengthOverflow ( settings )\r\n    {\r\n        var\r\n            start = settings._iDisplayStart,\r\n            end = settings.fnDisplayEnd(),\r\n            len = settings._iDisplayLength;\r\n    \r\n        /* If we have space to show extra rows (backing up from the end point - then do so */\r\n        if ( start >= end )\r\n        {\r\n            start = end - len;\r\n        }\r\n    \r\n        // Keep the start record on the current page\r\n        start -= (start % len);\r\n    \r\n        if ( len === -1 || start < 0 )\r\n        {\r\n            start = 0;\r\n        }\r\n    \r\n        settings._iDisplayStart = start;\r\n    }\r\n    \r\n    \r\n    function _fnRenderer( settings, type )\r\n    {\r\n        var renderer = settings.renderer;\r\n        var host = DataTable.ext.renderer[type];\r\n    \r\n        if ( $.isPlainObject( renderer ) && renderer[type] ) {\r\n            // Specific renderer for this type. If available use it, otherwise use\r\n            // the default.\r\n            return host[renderer[type]] || host._;\r\n        }\r\n        else if ( typeof renderer === 'string' ) {\r\n            // Common renderer - if there is one available for this type use it,\r\n            // otherwise use the default\r\n            return host[renderer] || host._;\r\n        }\r\n    \r\n        // Use the default\r\n        return host._;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Detect the data source being used for the table. Used to simplify the code\r\n     * a little (ajax) and to make it compress a little smaller.\r\n     *\r\n     *  @param {object} settings dataTables settings object\r\n     *  @returns {string} Data source\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnDataSource ( settings )\r\n    {\r\n        if ( settings.oFeatures.bServerSide ) {\r\n            return 'ssp';\r\n        }\r\n        else if ( settings.ajax || settings.sAjaxSource ) {\r\n            return 'ajax';\r\n        }\r\n        return 'dom';\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    /**\r\n     * Computed structure of the DataTables API, defined by the options passed to\r\n     * `DataTable.Api.register()` when building the API.\r\n     *\r\n     * The structure is built in order to speed creation and extension of the Api\r\n     * objects since the extensions are effectively pre-parsed.\r\n     *\r\n     * The array is an array of objects with the following structure, where this\r\n     * base array represents the Api prototype base:\r\n     *\r\n     *     [\r\n     *       {\r\n     *         name:      'data'                -- string   - Property name\r\n     *         val:       function () {},       -- function - Api method (or undefined if just an object\r\n     *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\r\n     *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\r\n     *       },\r\n     *       {\r\n     *         name:     'row'\r\n     *         val:       {},\r\n     *         methodExt: [ ... ],\r\n     *         propExt:   [\r\n     *           {\r\n     *             name:      'data'\r\n     *             val:       function () {},\r\n     *             methodExt: [ ... ],\r\n     *             propExt:   [ ... ]\r\n     *           },\r\n     *           ...\r\n     *         ]\r\n     *       }\r\n     *     ]\r\n     *\r\n     * @type {Array}\r\n     * @ignore\r\n     */\r\n    var __apiStruct = [];\r\n    \r\n    \r\n    /**\r\n     * `Array.prototype` reference.\r\n     *\r\n     * @type object\r\n     * @ignore\r\n     */\r\n    var __arrayProto = Array.prototype;\r\n    \r\n    \r\n    /**\r\n     * Abstraction for `context` parameter of the `Api` constructor to allow it to\r\n     * take several different forms for ease of use.\r\n     *\r\n     * Each of the input parameter types will be converted to a DataTables settings\r\n     * object where possible.\r\n     *\r\n     * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\r\n     *   of:\r\n     *\r\n     *   * `string` - jQuery selector. Any DataTables' matching the given selector\r\n     *     with be found and used.\r\n     *   * `node` - `TABLE` node which has already been formed into a DataTable.\r\n     *   * `jQuery` - A jQuery object of `TABLE` nodes.\r\n     *   * `object` - DataTables settings object\r\n     *   * `DataTables.Api` - API instance\r\n     * @return {array|null} Matching DataTables settings objects. `null` or\r\n     *   `undefined` is returned if no matching DataTable is found.\r\n     * @ignore\r\n     */\r\n    var _toSettings = function ( mixed )\r\n    {\r\n        var idx, jq;\r\n        var settings = DataTable.settings;\r\n        var tables = $.map( settings, function (el, i) {\r\n            return el.nTable;\r\n        } );\r\n    \r\n        if ( ! mixed ) {\r\n            return [];\r\n        }\r\n        else if ( mixed.nTable && mixed.oApi ) {\r\n            // DataTables settings object\r\n            return [ mixed ];\r\n        }\r\n        else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {\r\n            // Table node\r\n            idx = $.inArray( mixed, tables );\r\n            return idx !== -1 ? [ settings[idx] ] : null;\r\n        }\r\n        else if ( mixed && typeof mixed.settings === 'function' ) {\r\n            return mixed.settings().toArray();\r\n        }\r\n        else if ( typeof mixed === 'string' ) {\r\n            // jQuery selector\r\n            jq = $(mixed);\r\n        }\r\n        else if ( mixed instanceof $ ) {\r\n            // jQuery object (also DataTables instance)\r\n            jq = mixed;\r\n        }\r\n    \r\n        if ( jq ) {\r\n            return jq.map( function(i) {\r\n                idx = $.inArray( this, tables );\r\n                return idx !== -1 ? settings[idx] : null;\r\n            } ).toArray();\r\n        }\r\n    };\r\n    \r\n    \r\n    /**\r\n     * DataTables API class - used to control and interface with  one or more\r\n     * DataTables enhanced tables.\r\n     *\r\n     * The API class is heavily based on jQuery, presenting a chainable interface\r\n     * that you can use to interact with tables. Each instance of the API class has\r\n     * a \"context\" - i.e. the tables that it will operate on. This could be a single\r\n     * table, all tables on a page or a sub-set thereof.\r\n     *\r\n     * Additionally the API is designed to allow you to easily work with the data in\r\n     * the tables, retrieving and manipulating it as required. This is done by\r\n     * presenting the API class as an array like interface. The contents of the\r\n     * array depend upon the actions requested by each method (for example\r\n     * `rows().nodes()` will return an array of nodes, while `rows().data()` will\r\n     * return an array of objects or arrays depending upon your table's\r\n     * configuration). The API object has a number of array like methods (`push`,\r\n     * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\r\n     * `unique` etc) to assist your working with the data held in a table.\r\n     *\r\n     * Most methods (those which return an Api instance) are chainable, which means\r\n     * the return from a method call also has all of the methods available that the\r\n     * top level object had. For example, these two calls are equivalent:\r\n     *\r\n     *     // Not chained\r\n     *     api.row.add( {...} );\r\n     *     api.draw();\r\n     *\r\n     *     // Chained\r\n     *     api.row.add( {...} ).draw();\r\n     *\r\n     * @class DataTable.Api\r\n     * @param {array|object|string|jQuery} context DataTable identifier. This is\r\n     *   used to define which DataTables enhanced tables this API will operate on.\r\n     *   Can be one of:\r\n     *\r\n     *   * `string` - jQuery selector. Any DataTables' matching the given selector\r\n     *     with be found and used.\r\n     *   * `node` - `TABLE` node which has already been formed into a DataTable.\r\n     *   * `jQuery` - A jQuery object of `TABLE` nodes.\r\n     *   * `object` - DataTables settings object\r\n     * @param {array} [data] Data to initialise the Api instance with.\r\n     *\r\n     * @example\r\n     *   // Direct initialisation during DataTables construction\r\n     *   var api = $('#example').DataTable();\r\n     *\r\n     * @example\r\n     *   // Initialisation using a DataTables jQuery object\r\n     *   var api = $('#example').dataTable().api();\r\n     *\r\n     * @example\r\n     *   // Initialisation as a constructor\r\n     *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\r\n     */\r\n    _Api = function ( context, data )\r\n    {\r\n        if ( ! (this instanceof _Api) ) {\r\n            return new _Api( context, data );\r\n        }\r\n    \r\n        var settings = [];\r\n        var ctxSettings = function ( o ) {\r\n            var a = _toSettings( o );\r\n            if ( a ) {\r\n                settings.push.apply( settings, a );\r\n            }\r\n        };\r\n    \r\n        if ( Array.isArray( context ) ) {\r\n            for ( var i=0, ien=context.length ; i<ien ; i++ ) {\r\n                ctxSettings( context[i] );\r\n            }\r\n        }\r\n        else {\r\n            ctxSettings( context );\r\n        }\r\n    \r\n        // Remove duplicates\r\n        this.context = _unique( settings );\r\n    \r\n        // Initial data\r\n        if ( data ) {\r\n            $.merge( this, data );\r\n        }\r\n    \r\n        // selector\r\n        this.selector = {\r\n            rows: null,\r\n            cols: null,\r\n            opts: null\r\n        };\r\n    \r\n        _Api.extend( this, this, __apiStruct );\r\n    };\r\n    \r\n    DataTable.Api = _Api;\r\n    \r\n    // Don't destroy the existing prototype, just extend it. Required for jQuery 2's\r\n    // isPlainObject.\r\n    $.extend( _Api.prototype, {\r\n        any: function ()\r\n        {\r\n            return this.count() !== 0;\r\n        },\r\n    \r\n    \r\n        concat:  __arrayProto.concat,\r\n    \r\n    \r\n        context: [], // array of table settings objects\r\n    \r\n    \r\n        count: function ()\r\n        {\r\n            return this.flatten().length;\r\n        },\r\n    \r\n    \r\n        each: function ( fn )\r\n        {\r\n            for ( var i=0, ien=this.length ; i<ien; i++ ) {\r\n                fn.call( this, this[i], i, this );\r\n            }\r\n    \r\n            return this;\r\n        },\r\n    \r\n    \r\n        eq: function ( idx )\r\n        {\r\n            var ctx = this.context;\r\n    \r\n            return ctx.length > idx ?\r\n                new _Api( ctx[idx], this[idx] ) :\r\n                null;\r\n        },\r\n    \r\n    \r\n        filter: function ( fn )\r\n        {\r\n            var a = [];\r\n    \r\n            if ( __arrayProto.filter ) {\r\n                a = __arrayProto.filter.call( this, fn, this );\r\n            }\r\n            else {\r\n                // Compatibility for browsers without EMCA-252-5 (JS 1.6)\r\n                for ( var i=0, ien=this.length ; i<ien ; i++ ) {\r\n                    if ( fn.call( this, this[i], i, this ) ) {\r\n                        a.push( this[i] );\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return new _Api( this.context, a );\r\n        },\r\n    \r\n    \r\n        flatten: function ()\r\n        {\r\n            var a = [];\r\n            return new _Api( this.context, a.concat.apply( a, this.toArray() ) );\r\n        },\r\n    \r\n    \r\n        join:    __arrayProto.join,\r\n    \r\n    \r\n        indexOf: __arrayProto.indexOf || function (obj, start)\r\n        {\r\n            for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {\r\n                if ( this[i] === obj ) {\r\n                    return i;\r\n                }\r\n            }\r\n            return -1;\r\n        },\r\n    \r\n        iterator: function ( flatten, type, fn, alwaysNew ) {\r\n            var\r\n                a = [], ret,\r\n                i, ien, j, jen,\r\n                context = this.context,\r\n                rows, items, item,\r\n                selector = this.selector;\r\n    \r\n            // Argument shifting\r\n            if ( typeof flatten === 'string' ) {\r\n                alwaysNew = fn;\r\n                fn = type;\r\n                type = flatten;\r\n                flatten = false;\r\n            }\r\n    \r\n            for ( i=0, ien=context.length ; i<ien ; i++ ) {\r\n                var apiInst = new _Api( context[i] );\r\n    \r\n                if ( type === 'table' ) {\r\n                    ret = fn.call( apiInst, context[i], i );\r\n    \r\n                    if ( ret !== undefined ) {\r\n                        a.push( ret );\r\n                    }\r\n                }\r\n                else if ( type === 'columns' || type === 'rows' ) {\r\n                    // this has same length as context - one entry for each table\r\n                    ret = fn.call( apiInst, context[i], this[i], i );\r\n    \r\n                    if ( ret !== undefined ) {\r\n                        a.push( ret );\r\n                    }\r\n                }\r\n                else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {\r\n                    // columns and rows share the same structure.\r\n                    // 'this' is an array of column indexes for each context\r\n                    items = this[i];\r\n    \r\n                    if ( type === 'column-rows' ) {\r\n                        rows = _selector_row_indexes( context[i], selector.opts );\r\n                    }\r\n    \r\n                    for ( j=0, jen=items.length ; j<jen ; j++ ) {\r\n                        item = items[j];\r\n    \r\n                        if ( type === 'cell' ) {\r\n                            ret = fn.call( apiInst, context[i], item.row, item.column, i, j );\r\n                        }\r\n                        else {\r\n                            ret = fn.call( apiInst, context[i], item, i, j, rows );\r\n                        }\r\n    \r\n                        if ( ret !== undefined ) {\r\n                            a.push( ret );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            if ( a.length || alwaysNew ) {\r\n                var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );\r\n                var apiSelector = api.selector;\r\n                apiSelector.rows = selector.rows;\r\n                apiSelector.cols = selector.cols;\r\n                apiSelector.opts = selector.opts;\r\n                return api;\r\n            }\r\n            return this;\r\n        },\r\n    \r\n    \r\n        lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)\r\n        {\r\n            // Bit cheeky...\r\n            return this.indexOf.apply( this.toArray.reverse(), arguments );\r\n        },\r\n    \r\n    \r\n        length:  0,\r\n    \r\n    \r\n        map: function ( fn )\r\n        {\r\n            var a = [];\r\n    \r\n            if ( __arrayProto.map ) {\r\n                a = __arrayProto.map.call( this, fn, this );\r\n            }\r\n            else {\r\n                // Compatibility for browsers without EMCA-252-5 (JS 1.6)\r\n                for ( var i=0, ien=this.length ; i<ien ; i++ ) {\r\n                    a.push( fn.call( this, this[i], i ) );\r\n                }\r\n            }\r\n    \r\n            return new _Api( this.context, a );\r\n        },\r\n    \r\n    \r\n        pluck: function ( prop )\r\n        {\r\n            return this.map( function ( el ) {\r\n                return el[ prop ];\r\n            } );\r\n        },\r\n    \r\n        pop:     __arrayProto.pop,\r\n    \r\n    \r\n        push:    __arrayProto.push,\r\n    \r\n    \r\n        // Does not return an API instance\r\n        reduce: __arrayProto.reduce || function ( fn, init )\r\n        {\r\n            return _fnReduce( this, fn, init, 0, this.length, 1 );\r\n        },\r\n    \r\n    \r\n        reduceRight: __arrayProto.reduceRight || function ( fn, init )\r\n        {\r\n            return _fnReduce( this, fn, init, this.length-1, -1, -1 );\r\n        },\r\n    \r\n    \r\n        reverse: __arrayProto.reverse,\r\n    \r\n    \r\n        // Object with rows, columns and opts\r\n        selector: null,\r\n    \r\n    \r\n        shift:   __arrayProto.shift,\r\n    \r\n    \r\n        slice: function () {\r\n            return new _Api( this.context, this );\r\n        },\r\n    \r\n    \r\n        sort:    __arrayProto.sort, // ? name - order?\r\n    \r\n    \r\n        splice:  __arrayProto.splice,\r\n    \r\n    \r\n        toArray: function ()\r\n        {\r\n            return __arrayProto.slice.call( this );\r\n        },\r\n    \r\n    \r\n        to$: function ()\r\n        {\r\n            return $( this );\r\n        },\r\n    \r\n    \r\n        toJQuery: function ()\r\n        {\r\n            return $( this );\r\n        },\r\n    \r\n    \r\n        unique: function ()\r\n        {\r\n            return new _Api( this.context, _unique(this) );\r\n        },\r\n    \r\n    \r\n        unshift: __arrayProto.unshift\r\n    } );\r\n    \r\n    \r\n    _Api.extend = function ( scope, obj, ext )\r\n    {\r\n        // Only extend API instances and static properties of the API\r\n        if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {\r\n            return;\r\n        }\r\n    \r\n        var\r\n            i, ien,\r\n            struct,\r\n            methodScoping = function ( scope, fn, struc ) {\r\n                return function () {\r\n                    var ret = fn.apply( scope, arguments );\r\n    \r\n                    // Method extension\r\n                    _Api.extend( ret, ret, struc.methodExt );\r\n                    return ret;\r\n                };\r\n            };\r\n    \r\n        for ( i=0, ien=ext.length ; i<ien ; i++ ) {\r\n            struct = ext[i];\r\n    \r\n            // Value\r\n            obj[ struct.name ] = struct.type === 'function' ?\r\n                methodScoping( scope, struct.val, struct ) :\r\n                struct.type === 'object' ?\r\n                    {} :\r\n                    struct.val;\r\n    \r\n            obj[ struct.name ].__dt_wrapper = true;\r\n    \r\n            // Property extension\r\n            _Api.extend( scope, obj[ struct.name ], struct.propExt );\r\n        }\r\n    };\r\n    \r\n    \r\n    // @todo - Is there need for an augment function?\r\n    // _Api.augment = function ( inst, name )\r\n    // {\r\n    //  // Find src object in the structure from the name\r\n    //  var parts = name.split('.');\r\n    \r\n    //  _Api.extend( inst, obj );\r\n    // };\r\n    \r\n    \r\n    //     [\r\n    //       {\r\n    //         name:      'data'                -- string   - Property name\r\n    //         val:       function () {},       -- function - Api method (or undefined if just an object\r\n    //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\r\n    //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\r\n    //       },\r\n    //       {\r\n    //         name:     'row'\r\n    //         val:       {},\r\n    //         methodExt: [ ... ],\r\n    //         propExt:   [\r\n    //           {\r\n    //             name:      'data'\r\n    //             val:       function () {},\r\n    //             methodExt: [ ... ],\r\n    //             propExt:   [ ... ]\r\n    //           },\r\n    //           ...\r\n    //         ]\r\n    //       }\r\n    //     ]\r\n    \r\n    _Api.register = _api_register = function ( name, val )\r\n    {\r\n        if ( Array.isArray( name ) ) {\r\n            for ( var j=0, jen=name.length ; j<jen ; j++ ) {\r\n                _Api.register( name[j], val );\r\n            }\r\n            return;\r\n        }\r\n    \r\n        var\r\n            i, ien,\r\n            heir = name.split('.'),\r\n            struct = __apiStruct,\r\n            key, method;\r\n    \r\n        var find = function ( src, name ) {\r\n            for ( var i=0, ien=src.length ; i<ien ; i++ ) {\r\n                if ( src[i].name === name ) {\r\n                    return src[i];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n    \r\n        for ( i=0, ien=heir.length ; i<ien ; i++ ) {\r\n            method = heir[i].indexOf('()') !== -1;\r\n            key = method ?\r\n                heir[i].replace('()', '') :\r\n                heir[i];\r\n    \r\n            var src = find( struct, key );\r\n            if ( ! src ) {\r\n                src = {\r\n                    name:      key,\r\n                    val:       {},\r\n                    methodExt: [],\r\n                    propExt:   [],\r\n                    type:      'object'\r\n                };\r\n                struct.push( src );\r\n            }\r\n    \r\n            if ( i === ien-1 ) {\r\n                src.val = val;\r\n                src.type = typeof val === 'function' ?\r\n                    'function' :\r\n                    $.isPlainObject( val ) ?\r\n                        'object' :\r\n                        'other';\r\n            }\r\n            else {\r\n                struct = method ?\r\n                    src.methodExt :\r\n                    src.propExt;\r\n            }\r\n        }\r\n    };\r\n    \r\n    _Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {\r\n        _Api.register( pluralName, val );\r\n    \r\n        _Api.register( singularName, function () {\r\n            var ret = val.apply( this, arguments );\r\n    \r\n            if ( ret === this ) {\r\n                // Returned item is the API instance that was passed in, return it\r\n                return this;\r\n            }\r\n            else if ( ret instanceof _Api ) {\r\n                // New API instance returned, want the value from the first item\r\n                // in the returned array for the singular result.\r\n                return ret.length ?\r\n                    Array.isArray( ret[0] ) ?\r\n                        new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'\r\n                        ret[0] :\r\n                    undefined;\r\n            }\r\n    \r\n            // Non-API return - just fire it back\r\n            return ret;\r\n        } );\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Selector for HTML tables. Apply the given selector to the give array of\r\n     * DataTables settings objects.\r\n     *\r\n     * @param {string|integer} [selector] jQuery selector string or integer\r\n     * @param  {array} Array of DataTables settings objects to be filtered\r\n     * @return {array}\r\n     * @ignore\r\n     */\r\n    var __table_selector = function ( selector, a )\r\n    {\r\n        if ( Array.isArray(selector) ) {\r\n            return $.map( selector, function (item) {\r\n                return __table_selector(item, a);\r\n            } );\r\n        }\r\n    \r\n        // Integer is used to pick out a table by index\r\n        if ( typeof selector === 'number' ) {\r\n            return [ a[ selector ] ];\r\n        }\r\n    \r\n        // Perform a jQuery selector on the table nodes\r\n        var nodes = $.map( a, function (el, i) {\r\n            return el.nTable;\r\n        } );\r\n    \r\n        return $(nodes)\r\n            .filter( selector )\r\n            .map( function (i) {\r\n                // Need to translate back from the table node to the settings\r\n                var idx = $.inArray( this, nodes );\r\n                return a[ idx ];\r\n            } )\r\n            .toArray();\r\n    };\r\n    \r\n    \r\n    \r\n    /**\r\n     * Context selector for the API's context (i.e. the tables the API instance\r\n     * refers to.\r\n     *\r\n     * @name    DataTable.Api#tables\r\n     * @param {string|integer} [selector] Selector to pick which tables the iterator\r\n     *   should operate on. If not given, all tables in the current context are\r\n     *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\r\n     *   select multiple tables or as an integer to select a single table.\r\n     * @returns {DataTable.Api} Returns a new API instance if a selector is given.\r\n     */\r\n    _api_register( 'tables()', function ( selector ) {\r\n        // A new instance is created if there was a selector specified\r\n        return selector !== undefined && selector !== null ?\r\n            new _Api( __table_selector( selector, this.context ) ) :\r\n            this;\r\n    } );\r\n    \r\n    \r\n    _api_register( 'table()', function ( selector ) {\r\n        var tables = this.tables( selector );\r\n        var ctx = tables.context;\r\n    \r\n        // Truncate to the first matched table\r\n        return ctx.length ?\r\n            new _Api( ctx[0] ) :\r\n            tables;\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'tables().nodes()', 'table().node()' , function () {\r\n        return this.iterator( 'table', function ( ctx ) {\r\n            return ctx.nTable;\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'tables().body()', 'table().body()' , function () {\r\n        return this.iterator( 'table', function ( ctx ) {\r\n            return ctx.nTBody;\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'tables().header()', 'table().header()' , function () {\r\n        return this.iterator( 'table', function ( ctx ) {\r\n            return ctx.nTHead;\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'tables().footer()', 'table().footer()' , function () {\r\n        return this.iterator( 'table', function ( ctx ) {\r\n            return ctx.nTFoot;\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'tables().containers()', 'table().container()' , function () {\r\n        return this.iterator( 'table', function ( ctx ) {\r\n            return ctx.nTableWrapper;\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    \r\n    /**\r\n     * Redraw the tables in the current context.\r\n     */\r\n    _api_register( 'draw()', function ( paging ) {\r\n        return this.iterator( 'table', function ( settings ) {\r\n            if ( paging === 'page' ) {\r\n                _fnDraw( settings );\r\n            }\r\n            else {\r\n                if ( typeof paging === 'string' ) {\r\n                    paging = paging === 'full-hold' ?\r\n                        false :\r\n                        true;\r\n                }\r\n    \r\n                _fnReDraw( settings, paging===false );\r\n            }\r\n        } );\r\n    } );\r\n    \r\n    \r\n    \r\n    /**\r\n     * Get the current page index.\r\n     *\r\n     * @return {integer} Current page index (zero based)\r\n     *//**\r\n     * Set the current page.\r\n     *\r\n     * Note that if you attempt to show a page which does not exist, DataTables will\r\n     * not throw an error, but rather reset the paging.\r\n     *\r\n     * @param {integer|string} action The paging action to take. This can be one of:\r\n     *  * `integer` - The page index to jump to\r\n     *  * `string` - An action to take:\r\n     *    * `first` - Jump to first page.\r\n     *    * `next` - Jump to the next page\r\n     *    * `previous` - Jump to previous page\r\n     *    * `last` - Jump to the last page.\r\n     * @returns {DataTables.Api} this\r\n     */\r\n    _api_register( 'page()', function ( action ) {\r\n        if ( action === undefined ) {\r\n            return this.page.info().page; // not an expensive call\r\n        }\r\n    \r\n        // else, have an action to take on all tables\r\n        return this.iterator( 'table', function ( settings ) {\r\n            _fnPageChange( settings, action );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    /**\r\n     * Paging information for the first table in the current context.\r\n     *\r\n     * If you require paging information for another table, use the `table()` method\r\n     * with a suitable selector.\r\n     *\r\n     * @return {object} Object with the following properties set:\r\n     *  * `page` - Current page index (zero based - i.e. the first page is `0`)\r\n     *  * `pages` - Total number of pages\r\n     *  * `start` - Display index for the first record shown on the current page\r\n     *  * `end` - Display index for the last record shown on the current page\r\n     *  * `length` - Display length (number of records). Note that generally `start\r\n     *    + length = end`, but this is not always true, for example if there are\r\n     *    only 2 records to show on the final page, with a length of 10.\r\n     *  * `recordsTotal` - Full data set length\r\n     *  * `recordsDisplay` - Data set length once the current filtering criterion\r\n     *    are applied.\r\n     */\r\n    _api_register( 'page.info()', function ( action ) {\r\n        if ( this.context.length === 0 ) {\r\n            return undefined;\r\n        }\r\n    \r\n        var\r\n            settings   = this.context[0],\r\n            start      = settings._iDisplayStart,\r\n            len        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,\r\n            visRecords = settings.fnRecordsDisplay(),\r\n            all        = len === -1;\r\n    \r\n        return {\r\n            \"page\":           all ? 0 : Math.floor( start / len ),\r\n            \"pages\":          all ? 1 : Math.ceil( visRecords / len ),\r\n            \"start\":          start,\r\n            \"end\":            settings.fnDisplayEnd(),\r\n            \"length\":         len,\r\n            \"recordsTotal\":   settings.fnRecordsTotal(),\r\n            \"recordsDisplay\": visRecords,\r\n            \"serverSide\":     _fnDataSource( settings ) === 'ssp'\r\n        };\r\n    } );\r\n    \r\n    \r\n    /**\r\n     * Get the current page length.\r\n     *\r\n     * @return {integer} Current page length. Note `-1` indicates that all records\r\n     *   are to be shown.\r\n     *//**\r\n     * Set the current page length.\r\n     *\r\n     * @param {integer} Page length to set. Use `-1` to show all records.\r\n     * @returns {DataTables.Api} this\r\n     */\r\n    _api_register( 'page.len()', function ( len ) {\r\n        // Note that we can't call this function 'length()' because `length`\r\n        // is a Javascript property of functions which defines how many arguments\r\n        // the function expects.\r\n        if ( len === undefined ) {\r\n            return this.context.length !== 0 ?\r\n                this.context[0]._iDisplayLength :\r\n                undefined;\r\n        }\r\n    \r\n        // else, set the page length\r\n        return this.iterator( 'table', function ( settings ) {\r\n            _fnLengthChange( settings, len );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    \r\n    var __reload = function ( settings, holdPosition, callback ) {\r\n        // Use the draw event to trigger a callback\r\n        if ( callback ) {\r\n            var api = new _Api( settings );\r\n    \r\n            api.one( 'draw', function () {\r\n                callback( api.ajax.json() );\r\n            } );\r\n        }\r\n    \r\n        if ( _fnDataSource( settings ) == 'ssp' ) {\r\n            _fnReDraw( settings, holdPosition );\r\n        }\r\n        else {\r\n            _fnProcessingDisplay( settings, true );\r\n    \r\n            // Cancel an existing request\r\n            var xhr = settings.jqXHR;\r\n            if ( xhr && xhr.readyState !== 4 ) {\r\n                xhr.abort();\r\n            }\r\n    \r\n            // Trigger xhr\r\n            _fnBuildAjax( settings, [], function( json ) {\r\n                _fnClearTable( settings );\r\n    \r\n                var data = _fnAjaxDataSrc( settings, json );\r\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                    _fnAddData( settings, data[i] );\r\n                }\r\n    \r\n                _fnReDraw( settings, holdPosition );\r\n                _fnProcessingDisplay( settings, false );\r\n            } );\r\n        }\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Get the JSON response from the last Ajax request that DataTables made to the\r\n     * server. Note that this returns the JSON from the first table in the current\r\n     * context.\r\n     *\r\n     * @return {object} JSON received from the server.\r\n     */\r\n    _api_register( 'ajax.json()', function () {\r\n        var ctx = this.context;\r\n    \r\n        if ( ctx.length > 0 ) {\r\n            return ctx[0].json;\r\n        }\r\n    \r\n        // else return undefined;\r\n    } );\r\n    \r\n    \r\n    /**\r\n     * Get the data submitted in the last Ajax request\r\n     */\r\n    _api_register( 'ajax.params()', function () {\r\n        var ctx = this.context;\r\n    \r\n        if ( ctx.length > 0 ) {\r\n            return ctx[0].oAjaxData;\r\n        }\r\n    \r\n        // else return undefined;\r\n    } );\r\n    \r\n    \r\n    /**\r\n     * Reload tables from the Ajax data source. Note that this function will\r\n     * automatically re-draw the table when the remote data has been loaded.\r\n     *\r\n     * @param {boolean} [reset=true] Reset (default) or hold the current paging\r\n     *   position. A full re-sort and re-filter is performed when this method is\r\n     *   called, which is why the pagination reset is the default action.\r\n     * @returns {DataTables.Api} this\r\n     */\r\n    _api_register( 'ajax.reload()', function ( callback, resetPaging ) {\r\n        return this.iterator( 'table', function (settings) {\r\n            __reload( settings, resetPaging===false, callback );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    /**\r\n     * Get the current Ajax URL. Note that this returns the URL from the first\r\n     * table in the current context.\r\n     *\r\n     * @return {string} Current Ajax source URL\r\n     *//**\r\n     * Set the Ajax URL. Note that this will set the URL for all tables in the\r\n     * current context.\r\n     *\r\n     * @param {string} url URL to set.\r\n     * @returns {DataTables.Api} this\r\n     */\r\n    _api_register( 'ajax.url()', function ( url ) {\r\n        var ctx = this.context;\r\n    \r\n        if ( url === undefined ) {\r\n            // get\r\n            if ( ctx.length === 0 ) {\r\n                return undefined;\r\n            }\r\n            ctx = ctx[0];\r\n    \r\n            return ctx.ajax ?\r\n                $.isPlainObject( ctx.ajax ) ?\r\n                    ctx.ajax.url :\r\n                    ctx.ajax :\r\n                ctx.sAjaxSource;\r\n        }\r\n    \r\n        // set\r\n        return this.iterator( 'table', function ( settings ) {\r\n            if ( $.isPlainObject( settings.ajax ) ) {\r\n                settings.ajax.url = url;\r\n            }\r\n            else {\r\n                settings.ajax = url;\r\n            }\r\n            // No need to consider sAjaxSource here since DataTables gives priority\r\n            // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\r\n            // value of `sAjaxSource` redundant.\r\n        } );\r\n    } );\r\n    \r\n    \r\n    /**\r\n     * Load data from the newly set Ajax URL. Note that this method is only\r\n     * available when `ajax.url()` is used to set a URL. Additionally, this method\r\n     * has the same effect as calling `ajax.reload()` but is provided for\r\n     * convenience when setting a new URL. Like `ajax.reload()` it will\r\n     * automatically redraw the table once the remote data has been loaded.\r\n     *\r\n     * @returns {DataTables.Api} this\r\n     */\r\n    _api_register( 'ajax.url().load()', function ( callback, resetPaging ) {\r\n        // Same as a reload, but makes sense to present it for easy access after a\r\n        // url change\r\n        return this.iterator( 'table', function ( ctx ) {\r\n            __reload( ctx, resetPaging===false, callback );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    \r\n    \r\n    var _selector_run = function ( type, selector, selectFn, settings, opts )\r\n    {\r\n        var\r\n            out = [], res,\r\n            a, i, ien, j, jen,\r\n            selectorType = typeof selector;\r\n    \r\n        // Can't just check for isArray here, as an API or jQuery instance might be\r\n        // given with their array like look\r\n        if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {\r\n            selector = [ selector ];\r\n        }\r\n    \r\n        for ( i=0, ien=selector.length ; i<ien ; i++ ) {\r\n            // Only split on simple strings - complex expressions will be jQuery selectors\r\n            a = selector[i] && selector[i].split && ! selector[i].match(/[\\[\\(:]/) ?\r\n                selector[i].split(',') :\r\n                [ selector[i] ];\r\n    \r\n            for ( j=0, jen=a.length ; j<jen ; j++ ) {\r\n                res = selectFn( typeof a[j] === 'string' ? (a[j]).trim() : a[j] );\r\n    \r\n                if ( res && res.length ) {\r\n                    out = out.concat( res );\r\n                }\r\n            }\r\n        }\r\n    \r\n        // selector extensions\r\n        var ext = _ext.selector[ type ];\r\n        if ( ext.length ) {\r\n            for ( i=0, ien=ext.length ; i<ien ; i++ ) {\r\n                out = ext[i]( settings, opts, out );\r\n            }\r\n        }\r\n    \r\n        return _unique( out );\r\n    };\r\n    \r\n    \r\n    var _selector_opts = function ( opts )\r\n    {\r\n        if ( ! opts ) {\r\n            opts = {};\r\n        }\r\n    \r\n        // Backwards compatibility for 1.9- which used the terminology filter rather\r\n        // than search\r\n        if ( opts.filter && opts.search === undefined ) {\r\n            opts.search = opts.filter;\r\n        }\r\n    \r\n        return $.extend( {\r\n            search: 'none',\r\n            order: 'current',\r\n            page: 'all'\r\n        }, opts );\r\n    };\r\n    \r\n    \r\n    var _selector_first = function ( inst )\r\n    {\r\n        // Reduce the API instance to the first item found\r\n        for ( var i=0, ien=inst.length ; i<ien ; i++ ) {\r\n            if ( inst[i].length > 0 ) {\r\n                // Assign the first element to the first item in the instance\r\n                // and truncate the instance and context\r\n                inst[0] = inst[i];\r\n                inst[0].length = 1;\r\n                inst.length = 1;\r\n                inst.context = [ inst.context[i] ];\r\n    \r\n                return inst;\r\n            }\r\n        }\r\n    \r\n        // Not found - return an empty instance\r\n        inst.length = 0;\r\n        return inst;\r\n    };\r\n    \r\n    \r\n    var _selector_row_indexes = function ( settings, opts )\r\n    {\r\n        var\r\n            i, ien, tmp, a=[],\r\n            displayFiltered = settings.aiDisplay,\r\n            displayMaster = settings.aiDisplayMaster;\r\n    \r\n        var\r\n            search = opts.search,  // none, applied, removed\r\n            order  = opts.order,   // applied, current, index (original - compatibility with 1.9)\r\n            page   = opts.page;    // all, current\r\n    \r\n        if ( _fnDataSource( settings ) == 'ssp' ) {\r\n            // In server-side processing mode, most options are irrelevant since\r\n            // rows not shown don't exist and the index order is the applied order\r\n            // Removed is a special case - for consistency just return an empty\r\n            // array\r\n            return search === 'removed' ?\r\n                [] :\r\n                _range( 0, displayMaster.length );\r\n        }\r\n        else if ( page == 'current' ) {\r\n            // Current page implies that order=current and filter=applied, since it is\r\n            // fairly senseless otherwise, regardless of what order and search actually\r\n            // are\r\n            for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {\r\n                a.push( displayFiltered[i] );\r\n            }\r\n        }\r\n        else if ( order == 'current' || order == 'applied' ) {\r\n            if ( search == 'none') {\r\n                a = displayMaster.slice();\r\n            }\r\n            else if ( search == 'applied' ) {\r\n                a = displayFiltered.slice();\r\n            }\r\n            else if ( search == 'removed' ) {\r\n                // O(n+m) solution by creating a hash map\r\n                var displayFilteredMap = {};\r\n    \r\n                for ( var i=0, ien=displayFiltered.length ; i<ien ; i++ ) {\r\n                    displayFilteredMap[displayFiltered[i]] = null;\r\n                }\r\n    \r\n                a = $.map( displayMaster, function (el) {\r\n                    return ! displayFilteredMap.hasOwnProperty(el) ?\r\n                        el :\r\n                        null;\r\n                } );\r\n            }\r\n        }\r\n        else if ( order == 'index' || order == 'original' ) {\r\n            for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                if ( search == 'none' ) {\r\n                    a.push( i );\r\n                }\r\n                else { // applied | removed\r\n                    tmp = $.inArray( i, displayFiltered );\r\n    \r\n                    if ((tmp === -1 && search == 'removed') ||\r\n                        (tmp >= 0   && search == 'applied') )\r\n                    {\r\n                        a.push( i );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        return a;\r\n    };\r\n    \r\n    \r\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n     * Rows\r\n     *\r\n     * {}          - no selector - use all available rows\r\n     * {integer}   - row aoData index\r\n     * {node}      - TR node\r\n     * {string}    - jQuery selector to apply to the TR elements\r\n     * {array}     - jQuery array of nodes, or simply an array of TR nodes\r\n     *\r\n     */\r\n    var __row_selector = function ( settings, selector, opts )\r\n    {\r\n        var rows;\r\n        var run = function ( sel ) {\r\n            var selInt = _intVal( sel );\r\n            var i, ien;\r\n            var aoData = settings.aoData;\r\n    \r\n            // Short cut - selector is a number and no options provided (default is\r\n            // all records, so no need to check if the index is in there, since it\r\n            // must be - dev error if the index doesn't exist).\r\n            if ( selInt !== null && ! opts ) {\r\n                return [ selInt ];\r\n            }\r\n    \r\n            if ( ! rows ) {\r\n                rows = _selector_row_indexes( settings, opts );\r\n            }\r\n    \r\n            if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {\r\n                // Selector - integer\r\n                return [ selInt ];\r\n            }\r\n            else if ( sel === null || sel === undefined || sel === '' ) {\r\n                // Selector - none\r\n                return rows;\r\n            }\r\n    \r\n            // Selector - function\r\n            if ( typeof sel === 'function' ) {\r\n                return $.map( rows, function (idx) {\r\n                    var row = aoData[ idx ];\r\n                    return sel( idx, row._aData, row.nTr ) ? idx : null;\r\n                } );\r\n            }\r\n    \r\n            // Selector - node\r\n            if ( sel.nodeName ) {\r\n                var rowIdx = sel._DT_RowIndex;  // Property added by DT for fast lookup\r\n                var cellIdx = sel._DT_CellIndex;\r\n    \r\n                if ( rowIdx !== undefined ) {\r\n                    // Make sure that the row is actually still present in the table\r\n                    return aoData[ rowIdx ] && aoData[ rowIdx ].nTr === sel ?\r\n                        [ rowIdx ] :\r\n                        [];\r\n                }\r\n                else if ( cellIdx ) {\r\n                    return aoData[ cellIdx.row ] && aoData[ cellIdx.row ].nTr === sel.parentNode ?\r\n                        [ cellIdx.row ] :\r\n                        [];\r\n                }\r\n                else {\r\n                    var host = $(sel).closest('*[data-dt-row]');\r\n                    return host.length ?\r\n                        [ host.data('dt-row') ] :\r\n                        [];\r\n                }\r\n            }\r\n    \r\n            // ID selector. Want to always be able to select rows by id, regardless\r\n            // of if the tr element has been created or not, so can't rely upon\r\n            // jQuery here - hence a custom implementation. This does not match\r\n            // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\r\n            // but to select it using a CSS selector engine (like Sizzle or\r\n            // querySelect) it would need to need to be escaped for some characters.\r\n            // DataTables simplifies this for row selectors since you can select\r\n            // only a row. A # indicates an id any anything that follows is the id -\r\n            // unescaped.\r\n            if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {\r\n                // get row index from id\r\n                var rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];\r\n                if ( rowObj !== undefined ) {\r\n                    return [ rowObj.idx ];\r\n                }\r\n    \r\n                // need to fall through to jQuery in case there is DOM id that\r\n                // matches\r\n            }\r\n            \r\n            // Get nodes in the order from the `rows` array with null values removed\r\n            var nodes = _removeEmpty(\r\n                _pluck_order( settings.aoData, rows, 'nTr' )\r\n            );\r\n    \r\n            // Selector - jQuery selector string, array of nodes or jQuery object/\r\n            // As jQuery's .filter() allows jQuery objects to be passed in filter,\r\n            // it also allows arrays, so this will cope with all three options\r\n            return $(nodes)\r\n                .filter( sel )\r\n                .map( function () {\r\n                    return this._DT_RowIndex;\r\n                } )\r\n                .toArray();\r\n        };\r\n    \r\n        return _selector_run( 'row', selector, run, settings, opts );\r\n    };\r\n    \r\n    \r\n    _api_register( 'rows()', function ( selector, opts ) {\r\n        // argument shifting\r\n        if ( selector === undefined ) {\r\n            selector = '';\r\n        }\r\n        else if ( $.isPlainObject( selector ) ) {\r\n            opts = selector;\r\n            selector = '';\r\n        }\r\n    \r\n        opts = _selector_opts( opts );\r\n    \r\n        var inst = this.iterator( 'table', function ( settings ) {\r\n            return __row_selector( settings, selector, opts );\r\n        }, 1 );\r\n    \r\n        // Want argument shifting here and in __row_selector?\r\n        inst.selector.rows = selector;\r\n        inst.selector.opts = opts;\r\n    \r\n        return inst;\r\n    } );\r\n    \r\n    _api_register( 'rows().nodes()', function () {\r\n        return this.iterator( 'row', function ( settings, row ) {\r\n            return settings.aoData[ row ].nTr || undefined;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_register( 'rows().data()', function () {\r\n        return this.iterator( true, 'rows', function ( settings, rows ) {\r\n            return _pluck_order( settings.aoData, rows, '_aData' );\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {\r\n        return this.iterator( 'row', function ( settings, row ) {\r\n            var r = settings.aoData[ row ];\r\n            return type === 'search' ? r._aFilterData : r._aSortData;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {\r\n        return this.iterator( 'row', function ( settings, row ) {\r\n            _fnInvalidate( settings, row, src );\r\n        } );\r\n    } );\r\n    \r\n    _api_registerPlural( 'rows().indexes()', 'row().index()', function () {\r\n        return this.iterator( 'row', function ( settings, row ) {\r\n            return row;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {\r\n        var a = [];\r\n        var context = this.context;\r\n    \r\n        // `iterator` will drop undefined values, but in this case we want them\r\n        for ( var i=0, ien=context.length ; i<ien ; i++ ) {\r\n            for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {\r\n                var id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );\r\n                a.push( (hash === true ? '#' : '' )+ id );\r\n            }\r\n        }\r\n    \r\n        return new _Api( context, a );\r\n    } );\r\n    \r\n    _api_registerPlural( 'rows().remove()', 'row().remove()', function () {\r\n        var that = this;\r\n    \r\n        this.iterator( 'row', function ( settings, row, thatIdx ) {\r\n            var data = settings.aoData;\r\n            var rowData = data[ row ];\r\n            var i, ien, j, jen;\r\n            var loopRow, loopCells;\r\n    \r\n            data.splice( row, 1 );\r\n    \r\n            // Update the cached indexes\r\n            for ( i=0, ien=data.length ; i<ien ; i++ ) {\r\n                loopRow = data[i];\r\n                loopCells = loopRow.anCells;\r\n    \r\n                // Rows\r\n                if ( loopRow.nTr !== null ) {\r\n                    loopRow.nTr._DT_RowIndex = i;\r\n                }\r\n    \r\n                // Cells\r\n                if ( loopCells !== null ) {\r\n                    for ( j=0, jen=loopCells.length ; j<jen ; j++ ) {\r\n                        loopCells[j]._DT_CellIndex.row = i;\r\n                    }\r\n                }\r\n            }\r\n    \r\n            // Delete from the display arrays\r\n            _fnDeleteIndex( settings.aiDisplayMaster, row );\r\n            _fnDeleteIndex( settings.aiDisplay, row );\r\n            _fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes\r\n    \r\n            // For server-side processing tables - subtract the deleted row from the count\r\n            if ( settings._iRecordsDisplay > 0 ) {\r\n                settings._iRecordsDisplay--;\r\n            }\r\n    \r\n            // Check for an 'overflow' they case for displaying the table\r\n            _fnLengthOverflow( settings );\r\n    \r\n            // Remove the row's ID reference if there is one\r\n            var id = settings.rowIdFn( rowData._aData );\r\n            if ( id !== undefined ) {\r\n                delete settings.aIds[ id ];\r\n            }\r\n        } );\r\n    \r\n        this.iterator( 'table', function ( settings ) {\r\n            for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                settings.aoData[i].idx = i;\r\n            }\r\n        } );\r\n    \r\n        return this;\r\n    } );\r\n    \r\n    \r\n    _api_register( 'rows.add()', function ( rows ) {\r\n        var newRows = this.iterator( 'table', function ( settings ) {\r\n                var row, i, ien;\r\n                var out = [];\r\n    \r\n                for ( i=0, ien=rows.length ; i<ien ; i++ ) {\r\n                    row = rows[i];\r\n    \r\n                    if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\r\n                        out.push( _fnAddTr( settings, row )[0] );\r\n                    }\r\n                    else {\r\n                        out.push( _fnAddData( settings, row ) );\r\n                    }\r\n                }\r\n    \r\n                return out;\r\n            }, 1 );\r\n    \r\n        // Return an Api.rows() extended instance, so rows().nodes() etc can be used\r\n        var modRows = this.rows( -1 );\r\n        modRows.pop();\r\n        $.merge( modRows, newRows );\r\n    \r\n        return modRows;\r\n    } );\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    /**\r\n     *\r\n     */\r\n    _api_register( 'row()', function ( selector, opts ) {\r\n        return _selector_first( this.rows( selector, opts ) );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'row().data()', function ( data ) {\r\n        var ctx = this.context;\r\n    \r\n        if ( data === undefined ) {\r\n            // Get\r\n            return ctx.length && this.length ?\r\n                ctx[0].aoData[ this[0] ]._aData :\r\n                undefined;\r\n        }\r\n    \r\n        // Set\r\n        var row = ctx[0].aoData[ this[0] ];\r\n        row._aData = data;\r\n    \r\n        // If the DOM has an id, and the data source is an array\r\n        if ( Array.isArray( data ) && row.nTr && row.nTr.id ) {\r\n            _fnSetObjectDataFn( ctx[0].rowId )( data, row.nTr.id );\r\n        }\r\n    \r\n        // Automatically invalidate\r\n        _fnInvalidate( ctx[0], this[0], 'data' );\r\n    \r\n        return this;\r\n    } );\r\n    \r\n    \r\n    _api_register( 'row().node()', function () {\r\n        var ctx = this.context;\r\n    \r\n        return ctx.length && this.length ?\r\n            ctx[0].aoData[ this[0] ].nTr || null :\r\n            null;\r\n    } );\r\n    \r\n    \r\n    _api_register( 'row.add()', function ( row ) {\r\n        // Allow a jQuery object to be passed in - only a single row is added from\r\n        // it though - the first element in the set\r\n        if ( row instanceof $ && row.length ) {\r\n            row = row[0];\r\n        }\r\n    \r\n        var rows = this.iterator( 'table', function ( settings ) {\r\n            if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\r\n                return _fnAddTr( settings, row )[0];\r\n            }\r\n            return _fnAddData( settings, row );\r\n        } );\r\n    \r\n        // Return an Api.rows() extended instance, with the newly added row selected\r\n        return this.row( rows[0] );\r\n    } );\r\n    \r\n    \r\n    $(document).on('plugin-init.dt', function (e, context) {\r\n        var api = new _Api( context );\r\n    \r\n        api.on( 'stateSaveParams', function ( e, settings, d ) {\r\n            // This could be more compact with the API, but it is a lot faster as a simple\r\n            // internal loop\r\n            var idFn = settings.rowIdFn;\r\n            var data = settings.aoData;\r\n            var ids = [];\r\n    \r\n            for (var i=0 ; i<data.length ; i++) {\r\n                if (data[i]._detailsShow) {\r\n                    ids.push( '#' + idFn(data[i]._aData) );\r\n                }\r\n            }\r\n    \r\n            d.childRows = ids;\r\n        })\r\n    \r\n        var loaded = api.state.loaded();\r\n    \r\n        if ( loaded && loaded.childRows ) {\r\n            api\r\n                .rows( $.map(loaded.childRows, function (id){\r\n                    return id.replace(/:/g, '\\\\:')\r\n                }) )\r\n                .every( function () {\r\n                    _fnCallbackFire( context, null, 'requestChild', [ this ] )\r\n                });\r\n        }\r\n    });\r\n    \r\n    var __details_add = function ( ctx, row, data, klass )\r\n    {\r\n        // Convert to array of TR elements\r\n        var rows = [];\r\n        var addRow = function ( r, k ) {\r\n            // Recursion to allow for arrays of jQuery objects\r\n            if ( Array.isArray( r ) || r instanceof $ ) {\r\n                for ( var i=0, ien=r.length ; i<ien ; i++ ) {\r\n                    addRow( r[i], k );\r\n                }\r\n                return;\r\n            }\r\n    \r\n            // If we get a TR element, then just add it directly - up to the dev\r\n            // to add the correct number of columns etc\r\n            if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {\r\n                rows.push( r );\r\n            }\r\n            else {\r\n                // Otherwise create a row with a wrapper\r\n                var created = $('<tr><td></td></tr>').addClass( k );\r\n                $('td', created)\r\n                    .addClass( k )\r\n                    .html( r )\r\n                    [0].colSpan = _fnVisbleColumns( ctx );\r\n    \r\n                rows.push( created[0] );\r\n            }\r\n        };\r\n    \r\n        addRow( data, klass );\r\n    \r\n        if ( row._details ) {\r\n            row._details.detach();\r\n        }\r\n    \r\n        row._details = $(rows);\r\n    \r\n        // If the children were already shown, that state should be retained\r\n        if ( row._detailsShow ) {\r\n            row._details.insertAfter( row.nTr );\r\n        }\r\n    };\r\n    \r\n    \r\n    // Make state saving of child row details async to allow them to be batch processed\r\n    var __details_state = DataTable.util.throttle(\r\n        function (ctx) {\r\n            _fnSaveState( ctx[0] )\r\n        },\r\n        500\r\n    );\r\n    \r\n    \r\n    var __details_remove = function ( api, idx )\r\n    {\r\n        var ctx = api.context;\r\n    \r\n        if ( ctx.length ) {\r\n            var row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];\r\n    \r\n            if ( row && row._details ) {\r\n                row._details.remove();\r\n    \r\n                row._detailsShow = undefined;\r\n                row._details = undefined;\r\n                $( row.nTr ).removeClass( 'dt-hasChild' );\r\n                __details_state( ctx );\r\n            }\r\n        }\r\n    };\r\n    \r\n    \r\n    var __details_display = function ( api, show ) {\r\n        var ctx = api.context;\r\n    \r\n        if ( ctx.length && api.length ) {\r\n            var row = ctx[0].aoData[ api[0] ];\r\n    \r\n            if ( row._details ) {\r\n                row._detailsShow = show;\r\n    \r\n                if ( show ) {\r\n                    row._details.insertAfter( row.nTr );\r\n                    $( row.nTr ).addClass( 'dt-hasChild' );\r\n                }\r\n                else {\r\n                    row._details.detach();\r\n                    $( row.nTr ).removeClass( 'dt-hasChild' );\r\n                }\r\n    \r\n                _fnCallbackFire( ctx[0], null, 'childRow', [ show, api.row( api[0] ) ] )\r\n    \r\n                __details_events( ctx[0] );\r\n                __details_state( ctx );\r\n            }\r\n        }\r\n    };\r\n    \r\n    \r\n    var __details_events = function ( settings )\r\n    {\r\n        var api = new _Api( settings );\r\n        var namespace = '.dt.DT_details';\r\n        var drawEvent = 'draw'+namespace;\r\n        var colvisEvent = 'column-visibility'+namespace;\r\n        var destroyEvent = 'destroy'+namespace;\r\n        var data = settings.aoData;\r\n    \r\n        api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );\r\n    \r\n        if ( _pluck( data, '_details' ).length > 0 ) {\r\n            // On each draw, insert the required elements into the document\r\n            api.on( drawEvent, function ( e, ctx ) {\r\n                if ( settings !== ctx ) {\r\n                    return;\r\n                }\r\n    \r\n                api.rows( {page:'current'} ).eq(0).each( function (idx) {\r\n                    // Internal data grab\r\n                    var row = data[ idx ];\r\n    \r\n                    if ( row._detailsShow ) {\r\n                        row._details.insertAfter( row.nTr );\r\n                    }\r\n                } );\r\n            } );\r\n    \r\n            // Column visibility change - update the colspan\r\n            api.on( colvisEvent, function ( e, ctx, idx, vis ) {\r\n                if ( settings !== ctx ) {\r\n                    return;\r\n                }\r\n    \r\n                // Update the colspan for the details rows (note, only if it already has\r\n                // a colspan)\r\n                var row, visible = _fnVisbleColumns( ctx );\r\n    \r\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                    row = data[i];\r\n    \r\n                    if ( row._details ) {\r\n                        row._details.children('td[colspan]').attr('colspan', visible );\r\n                    }\r\n                }\r\n            } );\r\n    \r\n            // Table destroyed - nuke any child rows\r\n            api.on( destroyEvent, function ( e, ctx ) {\r\n                if ( settings !== ctx ) {\r\n                    return;\r\n                }\r\n    \r\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                    if ( data[i]._details ) {\r\n                        __details_remove( api, i );\r\n                    }\r\n                }\r\n            } );\r\n        }\r\n    };\r\n    \r\n    // Strings for the method names to help minification\r\n    var _emp = '';\r\n    var _child_obj = _emp+'row().child';\r\n    var _child_mth = _child_obj+'()';\r\n    \r\n    // data can be:\r\n    //  tr\r\n    //  string\r\n    //  jQuery or array of any of the above\r\n    _api_register( _child_mth, function ( data, klass ) {\r\n        var ctx = this.context;\r\n    \r\n        if ( data === undefined ) {\r\n            // get\r\n            return ctx.length && this.length ?\r\n                ctx[0].aoData[ this[0] ]._details :\r\n                undefined;\r\n        }\r\n        else if ( data === true ) {\r\n            // show\r\n            this.child.show();\r\n        }\r\n        else if ( data === false ) {\r\n            // remove\r\n            __details_remove( this );\r\n        }\r\n        else if ( ctx.length && this.length ) {\r\n            // set\r\n            __details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );\r\n        }\r\n    \r\n        return this;\r\n    } );\r\n    \r\n    \r\n    _api_register( [\r\n        _child_obj+'.show()',\r\n        _child_mth+'.show()' // only when `child()` was called with parameters (without\r\n    ], function ( show ) {   // it returns an object and this method is not executed)\r\n        __details_display( this, true );\r\n        return this;\r\n    } );\r\n    \r\n    \r\n    _api_register( [\r\n        _child_obj+'.hide()',\r\n        _child_mth+'.hide()' // only when `child()` was called with parameters (without\r\n    ], function () {         // it returns an object and this method is not executed)\r\n        __details_display( this, false );\r\n        return this;\r\n    } );\r\n    \r\n    \r\n    _api_register( [\r\n        _child_obj+'.remove()',\r\n        _child_mth+'.remove()' // only when `child()` was called with parameters (without\r\n    ], function () {           // it returns an object and this method is not executed)\r\n        __details_remove( this );\r\n        return this;\r\n    } );\r\n    \r\n    \r\n    _api_register( _child_obj+'.isShown()', function () {\r\n        var ctx = this.context;\r\n    \r\n        if ( ctx.length && this.length ) {\r\n            // _detailsShown as false or undefined will fall through to return false\r\n            return ctx[0].aoData[ this[0] ]._detailsShow || false;\r\n        }\r\n        return false;\r\n    } );\r\n    \r\n    \r\n    \r\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n     * Columns\r\n     *\r\n     * {integer}           - column index (>=0 count from left, <0 count from right)\r\n     * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\r\n     * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\r\n     * \"{string}:name\"     - column name\r\n     * \"{string}\"          - jQuery selector on column header nodes\r\n     *\r\n     */\r\n    \r\n    // can be an array of these items, comma separated list, or an array of comma\r\n    // separated lists\r\n    \r\n    var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;\r\n    \r\n    \r\n    // r1 and r2 are redundant - but it means that the parameters match for the\r\n    // iterator callback in columns().data()\r\n    var __columnData = function ( settings, column, r1, r2, rows ) {\r\n        var a = [];\r\n        for ( var row=0, ien=rows.length ; row<ien ; row++ ) {\r\n            a.push( _fnGetCellData( settings, rows[row], column ) );\r\n        }\r\n        return a;\r\n    };\r\n    \r\n    \r\n    var __column_selector = function ( settings, selector, opts )\r\n    {\r\n        var\r\n            columns = settings.aoColumns,\r\n            names = _pluck( columns, 'sName' ),\r\n            nodes = _pluck( columns, 'nTh' );\r\n    \r\n        var run = function ( s ) {\r\n            var selInt = _intVal( s );\r\n    \r\n            // Selector - all\r\n            if ( s === '' ) {\r\n                return _range( columns.length );\r\n            }\r\n    \r\n            // Selector - index\r\n            if ( selInt !== null ) {\r\n                return [ selInt >= 0 ?\r\n                    selInt : // Count from left\r\n                    columns.length + selInt // Count from right (+ because its a negative value)\r\n                ];\r\n            }\r\n    \r\n            // Selector = function\r\n            if ( typeof s === 'function' ) {\r\n                var rows = _selector_row_indexes( settings, opts );\r\n    \r\n                return $.map( columns, function (col, idx) {\r\n                    return s(\r\n                            idx,\r\n                            __columnData( settings, idx, 0, 0, rows ),\r\n                            nodes[ idx ]\r\n                        ) ? idx : null;\r\n                } );\r\n            }\r\n    \r\n            // jQuery or string selector\r\n            var match = typeof s === 'string' ?\r\n                s.match( __re_column_selector ) :\r\n                '';\r\n    \r\n            if ( match ) {\r\n                switch( match[2] ) {\r\n                    case 'visIdx':\r\n                    case 'visible':\r\n                        var idx = parseInt( match[1], 10 );\r\n                        // Visible index given, convert to column index\r\n                        if ( idx < 0 ) {\r\n                            // Counting from the right\r\n                            var visColumns = $.map( columns, function (col,i) {\r\n                                return col.bVisible ? i : null;\r\n                            } );\r\n                            return [ visColumns[ visColumns.length + idx ] ];\r\n                        }\r\n                        // Counting from the left\r\n                        return [ _fnVisibleToColumnIndex( settings, idx ) ];\r\n    \r\n                    case 'name':\r\n                        // match by name. `names` is column index complete and in order\r\n                        return $.map( names, function (name, i) {\r\n                            return name === match[1] ? i : null;\r\n                        } );\r\n    \r\n                    default:\r\n                        return [];\r\n                }\r\n            }\r\n    \r\n            // Cell in the table body\r\n            if ( s.nodeName && s._DT_CellIndex ) {\r\n                return [ s._DT_CellIndex.column ];\r\n            }\r\n    \r\n            // jQuery selector on the TH elements for the columns\r\n            var jqResult = $( nodes )\r\n                .filter( s )\r\n                .map( function () {\r\n                    return $.inArray( this, nodes ); // `nodes` is column index complete and in order\r\n                } )\r\n                .toArray();\r\n    \r\n            if ( jqResult.length || ! s.nodeName ) {\r\n                return jqResult;\r\n            }\r\n    \r\n            // Otherwise a node which might have a `dt-column` data attribute, or be\r\n            // a child or such an element\r\n            var host = $(s).closest('*[data-dt-column]');\r\n            return host.length ?\r\n                [ host.data('dt-column') ] :\r\n                [];\r\n        };\r\n    \r\n        return _selector_run( 'column', selector, run, settings, opts );\r\n    };\r\n    \r\n    \r\n    var __setColumnVis = function ( settings, column, vis ) {\r\n        var\r\n            cols = settings.aoColumns,\r\n            col  = cols[ column ],\r\n            data = settings.aoData,\r\n            row, cells, i, ien, tr;\r\n    \r\n        // Get\r\n        if ( vis === undefined ) {\r\n            return col.bVisible;\r\n        }\r\n    \r\n        // Set\r\n        // No change\r\n        if ( col.bVisible === vis ) {\r\n            return;\r\n        }\r\n    \r\n        if ( vis ) {\r\n            // Insert column\r\n            // Need to decide if we should use appendChild or insertBefore\r\n            var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );\r\n    \r\n            for ( i=0, ien=data.length ; i<ien ; i++ ) {\r\n                tr = data[i].nTr;\r\n                cells = data[i].anCells;\r\n    \r\n                if ( tr ) {\r\n                    // insertBefore can act like appendChild if 2nd arg is null\r\n                    tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // Remove column\r\n            $( _pluck( settings.aoData, 'anCells', column ) ).detach();\r\n        }\r\n    \r\n        // Common actions\r\n        col.bVisible = vis;\r\n    };\r\n    \r\n    \r\n    _api_register( 'columns()', function ( selector, opts ) {\r\n        // argument shifting\r\n        if ( selector === undefined ) {\r\n            selector = '';\r\n        }\r\n        else if ( $.isPlainObject( selector ) ) {\r\n            opts = selector;\r\n            selector = '';\r\n        }\r\n    \r\n        opts = _selector_opts( opts );\r\n    \r\n        var inst = this.iterator( 'table', function ( settings ) {\r\n            return __column_selector( settings, selector, opts );\r\n        }, 1 );\r\n    \r\n        // Want argument shifting here and in _row_selector?\r\n        inst.selector.cols = selector;\r\n        inst.selector.opts = opts;\r\n    \r\n        return inst;\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {\r\n        return this.iterator( 'column', function ( settings, column ) {\r\n            return settings.aoColumns[column].nTh;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {\r\n        return this.iterator( 'column', function ( settings, column ) {\r\n            return settings.aoColumns[column].nTf;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().data()', 'column().data()', function () {\r\n        return this.iterator( 'column-rows', __columnData, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {\r\n        return this.iterator( 'column', function ( settings, column ) {\r\n            return settings.aoColumns[column].mData;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {\r\n        return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\r\n            return _pluck_order( settings.aoData, rows,\r\n                type === 'search' ? '_aFilterData' : '_aSortData', column\r\n            );\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {\r\n        return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\r\n            return _pluck_order( settings.aoData, rows, 'anCells', column ) ;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {\r\n        var that = this;\r\n        var ret = this.iterator( 'column', function ( settings, column ) {\r\n            if ( vis === undefined ) {\r\n                return settings.aoColumns[ column ].bVisible;\r\n            } // else\r\n            __setColumnVis( settings, column, vis );\r\n        } );\r\n    \r\n        // Group the column visibility changes\r\n        if ( vis !== undefined ) {\r\n            this.iterator( 'table', function ( settings ) {\r\n                // Redraw the header after changes\r\n                _fnDrawHead( settings, settings.aoHeader );\r\n                _fnDrawHead( settings, settings.aoFooter );\r\n        \r\n                // Update colspan for no records display. Child rows and extensions will use their own\r\n                // listeners to do this - only need to update the empty table item here\r\n                if ( ! settings.aiDisplay.length ) {\r\n                    $(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));\r\n                }\r\n        \r\n                _fnSaveState( settings );\r\n    \r\n                // Second loop once the first is done for events\r\n                that.iterator( 'column', function ( settings, column ) {\r\n                    _fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );\r\n                } );\r\n    \r\n                if ( calc === undefined || calc ) {\r\n                    that.columns.adjust();\r\n                }\r\n            });\r\n        }\r\n    \r\n        return ret;\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {\r\n        return this.iterator( 'column', function ( settings, column ) {\r\n            return type === 'visible' ?\r\n                _fnColumnIndexToVisible( settings, column ) :\r\n                column;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_register( 'columns.adjust()', function () {\r\n        return this.iterator( 'table', function ( settings ) {\r\n            _fnAdjustColumnSizing( settings );\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_register( 'column.index()', function ( type, idx ) {\r\n        if ( this.context.length !== 0 ) {\r\n            var ctx = this.context[0];\r\n    \r\n            if ( type === 'fromVisible' || type === 'toData' ) {\r\n                return _fnVisibleToColumnIndex( ctx, idx );\r\n            }\r\n            else if ( type === 'fromData' || type === 'toVisible' ) {\r\n                return _fnColumnIndexToVisible( ctx, idx );\r\n            }\r\n        }\r\n    } );\r\n    \r\n    _api_register( 'column()', function ( selector, opts ) {\r\n        return _selector_first( this.columns( selector, opts ) );\r\n    } );\r\n    \r\n    var __cell_selector = function ( settings, selector, opts )\r\n    {\r\n        var data = settings.aoData;\r\n        var rows = _selector_row_indexes( settings, opts );\r\n        var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );\r\n        var allCells = $(_flatten( [], cells ));\r\n        var row;\r\n        var columns = settings.aoColumns.length;\r\n        var a, i, ien, j, o, host;\r\n    \r\n        var run = function ( s ) {\r\n            var fnSelector = typeof s === 'function';\r\n    \r\n            if ( s === null || s === undefined || fnSelector ) {\r\n                // All cells and function selectors\r\n                a = [];\r\n    \r\n                for ( i=0, ien=rows.length ; i<ien ; i++ ) {\r\n                    row = rows[i];\r\n    \r\n                    for ( j=0 ; j<columns ; j++ ) {\r\n                        o = {\r\n                            row: row,\r\n                            column: j\r\n                        };\r\n    \r\n                        if ( fnSelector ) {\r\n                            // Selector - function\r\n                            host = data[ row ];\r\n    \r\n                            if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {\r\n                                a.push( o );\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Selector - all\r\n                            a.push( o );\r\n                        }\r\n                    }\r\n                }\r\n    \r\n                return a;\r\n            }\r\n            \r\n            // Selector - index\r\n            if ( $.isPlainObject( s ) ) {\r\n                // Valid cell index and its in the array of selectable rows\r\n                return s.column !== undefined && s.row !== undefined && $.inArray( s.row, rows ) !== -1 ?\r\n                    [s] :\r\n                    [];\r\n            }\r\n    \r\n            // Selector - jQuery filtered cells\r\n            var jqResult = allCells\r\n                .filter( s )\r\n                .map( function (i, el) {\r\n                    return { // use a new object, in case someone changes the values\r\n                        row:    el._DT_CellIndex.row,\r\n                        column: el._DT_CellIndex.column\r\n                    };\r\n                } )\r\n                .toArray();\r\n    \r\n            if ( jqResult.length || ! s.nodeName ) {\r\n                return jqResult;\r\n            }\r\n    \r\n            // Otherwise the selector is a node, and there is one last option - the\r\n            // element might be a child of an element which has dt-row and dt-column\r\n            // data attributes\r\n            host = $(s).closest('*[data-dt-row]');\r\n            return host.length ?\r\n                [ {\r\n                    row: host.data('dt-row'),\r\n                    column: host.data('dt-column')\r\n                } ] :\r\n                [];\r\n        };\r\n    \r\n        return _selector_run( 'cell', selector, run, settings, opts );\r\n    };\r\n    \r\n    \r\n    \r\n    \r\n    _api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {\r\n        // Argument shifting\r\n        if ( $.isPlainObject( rowSelector ) ) {\r\n            // Indexes\r\n            if ( rowSelector.row === undefined ) {\r\n                // Selector options in first parameter\r\n                opts = rowSelector;\r\n                rowSelector = null;\r\n            }\r\n            else {\r\n                // Cell index objects in first parameter\r\n                opts = columnSelector;\r\n                columnSelector = null;\r\n            }\r\n        }\r\n        if ( $.isPlainObject( columnSelector ) ) {\r\n            opts = columnSelector;\r\n            columnSelector = null;\r\n        }\r\n    \r\n        // Cell selector\r\n        if ( columnSelector === null || columnSelector === undefined ) {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                return __cell_selector( settings, rowSelector, _selector_opts( opts ) );\r\n            } );\r\n        }\r\n    \r\n        // The default built in options need to apply to row and columns\r\n        var internalOpts = opts ? {\r\n            page: opts.page,\r\n            order: opts.order,\r\n            search: opts.search\r\n        } : {};\r\n    \r\n        // Row + column selector\r\n        var columns = this.columns( columnSelector, internalOpts );\r\n        var rows = this.rows( rowSelector, internalOpts );\r\n        var i, ien, j, jen;\r\n    \r\n        var cellsNoOpts = this.iterator( 'table', function ( settings, idx ) {\r\n            var a = [];\r\n    \r\n            for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {\r\n                for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {\r\n                    a.push( {\r\n                        row:    rows[idx][i],\r\n                        column: columns[idx][j]\r\n                    } );\r\n                }\r\n            }\r\n    \r\n            return a;\r\n        }, 1 );\r\n    \r\n        // There is currently only one extension which uses a cell selector extension\r\n        // It is a _major_ performance drag to run this if it isn't needed, so this is\r\n        // an extension specific check at the moment\r\n        var cells = opts && opts.selected ?\r\n            this.cells( cellsNoOpts, opts ) :\r\n            cellsNoOpts;\r\n    \r\n        $.extend( cells.selector, {\r\n            cols: columnSelector,\r\n            rows: rowSelector,\r\n            opts: opts\r\n        } );\r\n    \r\n        return cells;\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'cells().nodes()', 'cell().node()', function () {\r\n        return this.iterator( 'cell', function ( settings, row, column ) {\r\n            var data = settings.aoData[ row ];\r\n    \r\n            return data && data.anCells ?\r\n                data.anCells[ column ] :\r\n                undefined;\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'cells().data()', function () {\r\n        return this.iterator( 'cell', function ( settings, row, column ) {\r\n            return _fnGetCellData( settings, row, column );\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {\r\n        type = type === 'search' ? '_aFilterData' : '_aSortData';\r\n    \r\n        return this.iterator( 'cell', function ( settings, row, column ) {\r\n            return settings.aoData[ row ][ type ][ column ];\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {\r\n        return this.iterator( 'cell', function ( settings, row, column ) {\r\n            return _fnGetCellData( settings, row, column, type );\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'cells().indexes()', 'cell().index()', function () {\r\n        return this.iterator( 'cell', function ( settings, row, column ) {\r\n            return {\r\n                row: row,\r\n                column: column,\r\n                columnVisible: _fnColumnIndexToVisible( settings, column )\r\n            };\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {\r\n        return this.iterator( 'cell', function ( settings, row, column ) {\r\n            _fnInvalidate( settings, row, src, column );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    \r\n    _api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {\r\n        return _selector_first( this.cells( rowSelector, columnSelector, opts ) );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'cell().data()', function ( data ) {\r\n        var ctx = this.context;\r\n        var cell = this[0];\r\n    \r\n        if ( data === undefined ) {\r\n            // Get\r\n            return ctx.length && cell.length ?\r\n                _fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :\r\n                undefined;\r\n        }\r\n    \r\n        // Set\r\n        _fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );\r\n        _fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );\r\n    \r\n        return this;\r\n    } );\r\n    \r\n    \r\n    \r\n    /**\r\n     * Get current ordering (sorting) that has been applied to the table.\r\n     *\r\n     * @returns {array} 2D array containing the sorting information for the first\r\n     *   table in the current context. Each element in the parent array represents\r\n     *   a column being sorted upon (i.e. multi-sorting with two columns would have\r\n     *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\r\n     *   the column index that the sorting condition applies to, the second is the\r\n     *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\r\n     *   index of the sorting order from the `column.sorting` initialisation array.\r\n     *//**\r\n     * Set the ordering for the table.\r\n     *\r\n     * @param {integer} order Column index to sort upon.\r\n     * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\r\n     * @returns {DataTables.Api} this\r\n     *//**\r\n     * Set the ordering for the table.\r\n     *\r\n     * @param {array} order 1D array of sorting information to be applied.\r\n     * @param {array} [...] Optional additional sorting conditions\r\n     * @returns {DataTables.Api} this\r\n     *//**\r\n     * Set the ordering for the table.\r\n     *\r\n     * @param {array} order 2D array of sorting information to be applied.\r\n     * @returns {DataTables.Api} this\r\n     */\r\n    _api_register( 'order()', function ( order, dir ) {\r\n        var ctx = this.context;\r\n    \r\n        if ( order === undefined ) {\r\n            // get\r\n            return ctx.length !== 0 ?\r\n                ctx[0].aaSorting :\r\n                undefined;\r\n        }\r\n    \r\n        // set\r\n        if ( typeof order === 'number' ) {\r\n            // Simple column / direction passed in\r\n            order = [ [ order, dir ] ];\r\n        }\r\n        else if ( order.length && ! Array.isArray( order[0] ) ) {\r\n            // Arguments passed in (list of 1D arrays)\r\n            order = Array.prototype.slice.call( arguments );\r\n        }\r\n        // otherwise a 2D array was passed in\r\n    \r\n        return this.iterator( 'table', function ( settings ) {\r\n            settings.aaSorting = order.slice();\r\n        } );\r\n    } );\r\n    \r\n    \r\n    /**\r\n     * Attach a sort listener to an element for a given column\r\n     *\r\n     * @param {node|jQuery|string} node Identifier for the element(s) to attach the\r\n     *   listener to. This can take the form of a single DOM node, a jQuery\r\n     *   collection of nodes or a jQuery selector which will identify the node(s).\r\n     * @param {integer} column the column that a click on this node will sort on\r\n     * @param {function} [callback] callback function when sort is run\r\n     * @returns {DataTables.Api} this\r\n     */\r\n    _api_register( 'order.listener()', function ( node, column, callback ) {\r\n        return this.iterator( 'table', function ( settings ) {\r\n            _fnSortAttachListener( settings, node, column, callback );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'order.fixed()', function ( set ) {\r\n        if ( ! set ) {\r\n            var ctx = this.context;\r\n            var fixed = ctx.length ?\r\n                ctx[0].aaSortingFixed :\r\n                undefined;\r\n    \r\n            return Array.isArray( fixed ) ?\r\n                { pre: fixed } :\r\n                fixed;\r\n        }\r\n    \r\n        return this.iterator( 'table', function ( settings ) {\r\n            settings.aaSortingFixed = $.extend( true, {}, set );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    // Order by the selected column(s)\r\n    _api_register( [\r\n        'columns().order()',\r\n        'column().order()'\r\n    ], function ( dir ) {\r\n        var that = this;\r\n    \r\n        return this.iterator( 'table', function ( settings, i ) {\r\n            var sort = [];\r\n    \r\n            $.each( that[i], function (j, col) {\r\n                sort.push( [ col, dir ] );\r\n            } );\r\n    \r\n            settings.aaSorting = sort;\r\n        } );\r\n    } );\r\n    \r\n    \r\n    \r\n    _api_register( 'search()', function ( input, regex, smart, caseInsen ) {\r\n        var ctx = this.context;\r\n    \r\n        if ( input === undefined ) {\r\n            // get\r\n            return ctx.length !== 0 ?\r\n                ctx[0].oPreviousSearch.sSearch :\r\n                undefined;\r\n        }\r\n    \r\n        // set\r\n        return this.iterator( 'table', function ( settings ) {\r\n            if ( ! settings.oFeatures.bFilter ) {\r\n                return;\r\n            }\r\n    \r\n            _fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {\r\n                \"sSearch\": input+\"\",\r\n                \"bRegex\":  regex === null ? false : regex,\r\n                \"bSmart\":  smart === null ? true  : smart,\r\n                \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\r\n            } ), 1 );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural(\r\n        'columns().search()',\r\n        'column().search()',\r\n        function ( input, regex, smart, caseInsen ) {\r\n            return this.iterator( 'column', function ( settings, column ) {\r\n                var preSearch = settings.aoPreSearchCols;\r\n    \r\n                if ( input === undefined ) {\r\n                    // get\r\n                    return preSearch[ column ].sSearch;\r\n                }\r\n    \r\n                // set\r\n                if ( ! settings.oFeatures.bFilter ) {\r\n                    return;\r\n                }\r\n    \r\n                $.extend( preSearch[ column ], {\r\n                    \"sSearch\": input+\"\",\r\n                    \"bRegex\":  regex === null ? false : regex,\r\n                    \"bSmart\":  smart === null ? true  : smart,\r\n                    \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\r\n                } );\r\n    \r\n                _fnFilterComplete( settings, settings.oPreviousSearch, 1 );\r\n            } );\r\n        }\r\n    );\r\n    \r\n    /*\r\n     * State API methods\r\n     */\r\n    \r\n    _api_register( 'state()', function () {\r\n        return this.context.length ?\r\n            this.context[0].oSavedState :\r\n            null;\r\n    } );\r\n    \r\n    \r\n    _api_register( 'state.clear()', function () {\r\n        return this.iterator( 'table', function ( settings ) {\r\n            // Save an empty object\r\n            settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'state.loaded()', function () {\r\n        return this.context.length ?\r\n            this.context[0].oLoadedState :\r\n            null;\r\n    } );\r\n    \r\n    \r\n    _api_register( 'state.save()', function () {\r\n        return this.iterator( 'table', function ( settings ) {\r\n            _fnSaveState( settings );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    \r\n    /**\r\n     * Provide a common method for plug-ins to check the version of DataTables being\r\n     * used, in order to ensure compatibility.\r\n     *\r\n     *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\r\n     *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\r\n     *  @returns {boolean} true if this version of DataTables is greater or equal to\r\n     *    the required version, or false if this version of DataTales is not\r\n     *    suitable\r\n     *  @static\r\n     *  @dtopt API-Static\r\n     *\r\n     *  @example\r\n     *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\r\n     */\r\n    DataTable.versionCheck = DataTable.fnVersionCheck = function( version )\r\n    {\r\n        var aThis = DataTable.version.split('.');\r\n        var aThat = version.split('.');\r\n        var iThis, iThat;\r\n    \r\n        for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {\r\n            iThis = parseInt( aThis[i], 10 ) || 0;\r\n            iThat = parseInt( aThat[i], 10 ) || 0;\r\n    \r\n            // Parts are the same, keep comparing\r\n            if (iThis === iThat) {\r\n                continue;\r\n            }\r\n    \r\n            // Parts are different, return immediately\r\n            return iThis > iThat;\r\n        }\r\n    \r\n        return true;\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Check if a `<table>` node is a DataTable table already or not.\r\n     *\r\n     *  @param {node|jquery|string} table Table node, jQuery object or jQuery\r\n     *      selector for the table to test. Note that if more than more than one\r\n     *      table is passed on, only the first will be checked\r\n     *  @returns {boolean} true the table given is a DataTable, or false otherwise\r\n     *  @static\r\n     *  @dtopt API-Static\r\n     *\r\n     *  @example\r\n     *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\r\n     *      $('#example').dataTable();\r\n     *    }\r\n     */\r\n    DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )\r\n    {\r\n        var t = $(table).get(0);\r\n        var is = false;\r\n    \r\n        if ( table instanceof DataTable.Api ) {\r\n            return true;\r\n        }\r\n    \r\n        $.each( DataTable.settings, function (i, o) {\r\n            var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\r\n            var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\r\n    \r\n            if ( o.nTable === t || head === t || foot === t ) {\r\n                is = true;\r\n            }\r\n        } );\r\n    \r\n        return is;\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Get all DataTable tables that have been initialised - optionally you can\r\n     * select to get only currently visible tables.\r\n     *\r\n     *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\r\n     *    or visible tables only.\r\n     *  @returns {array} Array of `table` nodes (not DataTable instances) which are\r\n     *    DataTables\r\n     *  @static\r\n     *  @dtopt API-Static\r\n     *\r\n     *  @example\r\n     *    $.each( $.fn.dataTable.tables(true), function () {\r\n     *      $(table).DataTable().columns.adjust();\r\n     *    } );\r\n     */\r\n    DataTable.tables = DataTable.fnTables = function ( visible )\r\n    {\r\n        var api = false;\r\n    \r\n        if ( $.isPlainObject( visible ) ) {\r\n            api = visible.api;\r\n            visible = visible.visible;\r\n        }\r\n    \r\n        var a = $.map( DataTable.settings, function (o) {\r\n            if ( !visible || (visible && $(o.nTable).is(':visible')) ) {\r\n                return o.nTable;\r\n            }\r\n        } );\r\n    \r\n        return api ?\r\n            new _Api( a ) :\r\n            a;\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Convert from camel case parameters to Hungarian notation. This is made public\r\n     * for the extensions to provide the same ability as DataTables core to accept\r\n     * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\r\n     * parameters.\r\n     *\r\n     *  @param {object} src The model object which holds all parameters that can be\r\n     *    mapped.\r\n     *  @param {object} user The object to convert from camel case to Hungarian.\r\n     *  @param {boolean} force When set to `true`, properties which already have a\r\n     *    Hungarian value in the `user` object will be overwritten. Otherwise they\r\n     *    won't be.\r\n     */\r\n    DataTable.camelToHungarian = _fnCamelToHungarian;\r\n    \r\n    \r\n    \r\n    /**\r\n     *\r\n     */\r\n    _api_register( '$()', function ( selector, opts ) {\r\n        var\r\n            rows   = this.rows( opts ).nodes(), // Get all rows\r\n            jqRows = $(rows);\r\n    \r\n        return $( [].concat(\r\n            jqRows.filter( selector ).toArray(),\r\n            jqRows.find( selector ).toArray()\r\n        ) );\r\n    } );\r\n    \r\n    \r\n    // jQuery functions to operate on the tables\r\n    $.each( [ 'on', 'one', 'off' ], function (i, key) {\r\n        _api_register( key+'()', function ( /* event, handler */ ) {\r\n            var args = Array.prototype.slice.call(arguments);\r\n    \r\n            // Add the `dt` namespace automatically if it isn't already present\r\n            args[0] = $.map( args[0].split( /\\s/ ), function ( e ) {\r\n                return ! e.match(/\\.dt\\b/) ?\r\n                    e+'.dt' :\r\n                    e;\r\n                } ).join( ' ' );\r\n    \r\n            var inst = $( this.tables().nodes() );\r\n            inst[key].apply( inst, args );\r\n            return this;\r\n        } );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'clear()', function () {\r\n        return this.iterator( 'table', function ( settings ) {\r\n            _fnClearTable( settings );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'settings()', function () {\r\n        return new _Api( this.context, this.context );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'init()', function () {\r\n        var ctx = this.context;\r\n        return ctx.length ? ctx[0].oInit : null;\r\n    } );\r\n    \r\n    \r\n    _api_register( 'data()', function () {\r\n        return this.iterator( 'table', function ( settings ) {\r\n            return _pluck( settings.aoData, '_aData' );\r\n        } ).flatten();\r\n    } );\r\n    \r\n    \r\n    _api_register( 'destroy()', function ( remove ) {\r\n        remove = remove || false;\r\n    \r\n        return this.iterator( 'table', function ( settings ) {\r\n            var orig      = settings.nTableWrapper.parentNode;\r\n            var classes   = settings.oClasses;\r\n            var table     = settings.nTable;\r\n            var tbody     = settings.nTBody;\r\n            var thead     = settings.nTHead;\r\n            var tfoot     = settings.nTFoot;\r\n            var jqTable   = $(table);\r\n            var jqTbody   = $(tbody);\r\n            var jqWrapper = $(settings.nTableWrapper);\r\n            var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );\r\n            var i, ien;\r\n    \r\n            // Flag to note that the table is currently being destroyed - no action\r\n            // should be taken\r\n            settings.bDestroying = true;\r\n    \r\n            // Fire off the destroy callbacks for plug-ins etc\r\n            _fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );\r\n    \r\n            // If not being removed from the document, make all columns visible\r\n            if ( ! remove ) {\r\n                new _Api( settings ).columns().visible( true );\r\n            }\r\n    \r\n            // Blitz all `DT` namespaced events (these are internal events, the\r\n            // lowercase, `dt` events are user subscribed and they are responsible\r\n            // for removing them\r\n            jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');\r\n            $(window).off('.DT-'+settings.sInstance);\r\n    \r\n            // When scrolling we had to break the table up - restore it\r\n            if ( table != thead.parentNode ) {\r\n                jqTable.children('thead').detach();\r\n                jqTable.append( thead );\r\n            }\r\n    \r\n            if ( tfoot && table != tfoot.parentNode ) {\r\n                jqTable.children('tfoot').detach();\r\n                jqTable.append( tfoot );\r\n            }\r\n    \r\n            settings.aaSorting = [];\r\n            settings.aaSortingFixed = [];\r\n            _fnSortingClasses( settings );\r\n    \r\n            $( rows ).removeClass( settings.asStripeClasses.join(' ') );\r\n    \r\n            $('th, td', thead).removeClass( classes.sSortable+' '+\r\n                classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone\r\n            );\r\n    \r\n            // Add the TR elements back into the table in their original order\r\n            jqTbody.children().detach();\r\n            jqTbody.append( rows );\r\n    \r\n            // Remove the DataTables generated nodes, events and classes\r\n            var removedMethod = remove ? 'remove' : 'detach';\r\n            jqTable[ removedMethod ]();\r\n            jqWrapper[ removedMethod ]();\r\n    \r\n            // If we need to reattach the table to the document\r\n            if ( ! remove && orig ) {\r\n                // insertBefore acts like appendChild if !arg[1]\r\n                orig.insertBefore( table, settings.nTableReinsertBefore );\r\n    \r\n                // Restore the width of the original table - was read from the style property,\r\n                // so we can restore directly to that\r\n                jqTable\r\n                    .css( 'width', settings.sDestroyWidth )\r\n                    .removeClass( classes.sTable );\r\n    \r\n                // If the were originally stripe classes - then we add them back here.\r\n                // Note this is not fool proof (for example if not all rows had stripe\r\n                // classes - but it's a good effort without getting carried away\r\n                ien = settings.asDestroyStripes.length;\r\n    \r\n                if ( ien ) {\r\n                    jqTbody.children().each( function (i) {\r\n                        $(this).addClass( settings.asDestroyStripes[i % ien] );\r\n                    } );\r\n                }\r\n            }\r\n    \r\n            /* Remove the settings object from the settings array */\r\n            var idx = $.inArray( settings, DataTable.settings );\r\n            if ( idx !== -1 ) {\r\n                DataTable.settings.splice( idx, 1 );\r\n            }\r\n        } );\r\n    } );\r\n    \r\n    \r\n    // Add the `every()` method for rows, columns and cells in a compact form\r\n    $.each( [ 'column', 'row', 'cell' ], function ( i, type ) {\r\n        _api_register( type+'s().every()', function ( fn ) {\r\n            var opts = this.selector.opts;\r\n            var api = this;\r\n    \r\n            return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {\r\n                // Rows and columns:\r\n                //  arg1 - index\r\n                //  arg2 - table counter\r\n                //  arg3 - loop counter\r\n                //  arg4 - undefined\r\n                // Cells:\r\n                //  arg1 - row index\r\n                //  arg2 - column index\r\n                //  arg3 - table counter\r\n                //  arg4 - loop counter\r\n                fn.call(\r\n                    api[ type ](\r\n                        arg1,\r\n                        type==='cell' ? arg2 : opts,\r\n                        type==='cell' ? opts : undefined\r\n                    ),\r\n                    arg1, arg2, arg3, arg4\r\n                );\r\n            } );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    // i18n method for extensions to be able to use the language object from the\r\n    // DataTable\r\n    _api_register( 'i18n()', function ( token, def, plural ) {\r\n        var ctx = this.context[0];\r\n        var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );\r\n    \r\n        if ( resolved === undefined ) {\r\n            resolved = def;\r\n        }\r\n    \r\n        if ( plural !== undefined && $.isPlainObject( resolved ) ) {\r\n            resolved = resolved[ plural ] !== undefined ?\r\n                resolved[ plural ] :\r\n                resolved._;\r\n        }\r\n    \r\n        return resolved.replace( '%d', plural ); // nb: plural might be undefined,\r\n    } );    \r\n    /**\r\n     * Version string for plug-ins to check compatibility. Allowed format is\r\n     * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\r\n     * only for non-release builds. See http://semver.org/ for more information.\r\n     *  @member\r\n     *  @type string\r\n     *  @default Version number\r\n     */\r\n    DataTable.version = \"1.11.5\";\r\n    \r\n    /**\r\n     * Private data store, containing all of the settings objects that are\r\n     * created for the tables on a given page.\r\n     *\r\n     * Note that the `DataTable.settings` object is aliased to\r\n     * `jQuery.fn.dataTableExt` through which it may be accessed and\r\n     * manipulated, or `jQuery.fn.dataTable.settings`.\r\n     *  @member\r\n     *  @type array\r\n     *  @default []\r\n     *  @private\r\n     */\r\n    DataTable.settings = [];\r\n    \r\n    /**\r\n     * Object models container, for the various models that DataTables has\r\n     * available to it. These models define the objects that are used to hold\r\n     * the active state and configuration of the table.\r\n     *  @namespace\r\n     */\r\n    DataTable.models = {};\r\n    \r\n    \r\n    \r\n    /**\r\n     * Template object for the way in which DataTables holds information about\r\n     * search information for the global filter and individual column filters.\r\n     *  @namespace\r\n     */\r\n    DataTable.models.oSearch = {\r\n        /**\r\n         * Flag to indicate if the filtering should be case insensitive or not\r\n         *  @type boolean\r\n         *  @default true\r\n         */\r\n        \"bCaseInsensitive\": true,\r\n    \r\n        /**\r\n         * Applied search term\r\n         *  @type string\r\n         *  @default <i>Empty string</i>\r\n         */\r\n        \"sSearch\": \"\",\r\n    \r\n        /**\r\n         * Flag to indicate if the search term should be interpreted as a\r\n         * regular expression (true) or not (false) and therefore and special\r\n         * regex characters escaped.\r\n         *  @type boolean\r\n         *  @default false\r\n         */\r\n        \"bRegex\": false,\r\n    \r\n        /**\r\n         * Flag to indicate if DataTables is to use its smart filtering or not.\r\n         *  @type boolean\r\n         *  @default true\r\n         */\r\n        \"bSmart\": true,\r\n    \r\n        /**\r\n         * Flag to indicate if DataTables should only trigger a search when\r\n         * the return key is pressed.\r\n         *  @type boolean\r\n         *  @default false\r\n         */\r\n        \"return\": false\r\n    };\r\n    \r\n        \r\n        \r\n        \r\n        /**\r\n         * Template object for the way in which DataTables holds information about\r\n         * each individual row. This is the object format used for the settings\r\n         * aoData array.\r\n         *  @namespace\r\n         */\r\n        DataTable.models.oRow = {\r\n            /**\r\n             * TR element for the row\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTr\": null,\r\n        \r\n            /**\r\n             * Array of TD elements for each row. This is null until the row has been\r\n             * created.\r\n             *  @type array nodes\r\n             *  @default []\r\n             */\r\n            \"anCells\": null,\r\n        \r\n            /**\r\n             * Data object from the original data source for the row. This is either\r\n             * an array if using the traditional form of DataTables, or an object if\r\n             * using mData options. The exact type will depend on the passed in\r\n             * data from the data source, or will be an array if using DOM a data\r\n             * source.\r\n             *  @type array|object\r\n             *  @default []\r\n             */\r\n            \"_aData\": [],\r\n        \r\n            /**\r\n             * Sorting data cache - this array is ostensibly the same length as the\r\n             * number of columns (although each index is generated only as it is\r\n             * needed), and holds the data that is used for sorting each column in the\r\n             * row. We do this cache generation at the start of the sort in order that\r\n             * the formatting of the sort data need be done only once for each cell\r\n             * per sort. This array should not be read from or written to by anything\r\n             * other than the master sorting methods.\r\n             *  @type array\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_aSortData\": null,\r\n        \r\n            /**\r\n             * Per cell filtering data cache. As per the sort data cache, used to\r\n             * increase the performance of the filtering in DataTables\r\n             *  @type array\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_aFilterData\": null,\r\n        \r\n            /**\r\n             * Filtering data cache. This is the same as the cell filtering cache, but\r\n             * in this case a string rather than an array. This is easily computed with\r\n             * a join on `_aFilterData`, but is provided as a cache so the join isn't\r\n             * needed on every search (memory traded for performance)\r\n             *  @type array\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_sFilterRow\": null,\r\n        \r\n            /**\r\n             * Cache of the class name that DataTables has applied to the row, so we\r\n             * can quickly look at this variable rather than needing to do a DOM check\r\n             * on className for the nTr property.\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             *  @private\r\n             */\r\n            \"_sRowStripe\": \"\",\r\n        \r\n            /**\r\n             * Denote if the original data source was from the DOM, or the data source\r\n             * object. This is used for invalidating data, so DataTables can\r\n             * automatically read data from the original source, unless uninstructed\r\n             * otherwise.\r\n             *  @type string\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"src\": null,\r\n        \r\n            /**\r\n             * Index in the aoData array. This saves an indexOf lookup when we have the\r\n             * object, but want to know the index\r\n             *  @type integer\r\n             *  @default -1\r\n             *  @private\r\n             */\r\n            \"idx\": -1\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Template object for the column information object in DataTables. This object\r\n         * is held in the settings aoColumns array and contains all the information that\r\n         * DataTables needs about each individual column.\r\n         *\r\n         * Note that this object is related to {@link DataTable.defaults.column}\r\n         * but this one is the internal data store for DataTables's cache of columns.\r\n         * It should NOT be manipulated outside of DataTables. Any configuration should\r\n         * be done through the initialisation options.\r\n         *  @namespace\r\n         */\r\n        DataTable.models.oColumn = {\r\n            /**\r\n             * Column index. This could be worked out on-the-fly with $.inArray, but it\r\n             * is faster to just hold it as a variable\r\n             *  @type integer\r\n             *  @default null\r\n             */\r\n            \"idx\": null,\r\n        \r\n            /**\r\n             * A list of the columns that sorting should occur on when this column\r\n             * is sorted. That this property is an array allows multi-column sorting\r\n             * to be defined for a column (for example first name / last name columns\r\n             * would benefit from this). The values are integers pointing to the\r\n             * columns to be sorted on (typically it will be a single integer pointing\r\n             * at itself, but that doesn't need to be the case).\r\n             *  @type array\r\n             */\r\n            \"aDataSort\": null,\r\n        \r\n            /**\r\n             * Define the sorting directions that are applied to the column, in sequence\r\n             * as the column is repeatedly sorted upon - i.e. the first value is used\r\n             * as the sorting direction when the column if first sorted (clicked on).\r\n             * Sort it again (click again) and it will move on to the next index.\r\n             * Repeat until loop.\r\n             *  @type array\r\n             */\r\n            \"asSorting\": null,\r\n        \r\n            /**\r\n             * Flag to indicate if the column is searchable, and thus should be included\r\n             * in the filtering or not.\r\n             *  @type boolean\r\n             */\r\n            \"bSearchable\": null,\r\n        \r\n            /**\r\n             * Flag to indicate if the column is sortable or not.\r\n             *  @type boolean\r\n             */\r\n            \"bSortable\": null,\r\n        \r\n            /**\r\n             * Flag to indicate if the column is currently visible in the table or not\r\n             *  @type boolean\r\n             */\r\n            \"bVisible\": null,\r\n        \r\n            /**\r\n             * Store for manual type assignment using the `column.type` option. This\r\n             * is held in store so we can manipulate the column's `sType` property.\r\n             *  @type string\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_sManualType\": null,\r\n        \r\n            /**\r\n             * Flag to indicate if HTML5 data attributes should be used as the data\r\n             * source for filtering or sorting. True is either are.\r\n             *  @type boolean\r\n             *  @default false\r\n             *  @private\r\n             */\r\n            \"_bAttrSrc\": false,\r\n        \r\n            /**\r\n             * Developer definable function that is called whenever a cell is created (Ajax source,\r\n             * etc) or processed for input (DOM source). This can be used as a compliment to mRender\r\n             * allowing you to modify the DOM element (add background colour for example) when the\r\n             * element is available.\r\n             *  @type function\r\n             *  @param {element} nTd The TD node that has been created\r\n             *  @param {*} sData The Data for the cell\r\n             *  @param {array|object} oData The data for the whole row\r\n             *  @param {int} iRow The row index for the aoData data store\r\n             *  @default null\r\n             */\r\n            \"fnCreatedCell\": null,\r\n        \r\n            /**\r\n             * Function to get data from a cell in a column. You should <b>never</b>\r\n             * access data directly through _aData internally in DataTables - always use\r\n             * the method attached to this property. It allows mData to function as\r\n             * required. This function is automatically assigned by the column\r\n             * initialisation method\r\n             *  @type function\r\n             *  @param {array|object} oData The data array/object for the array\r\n             *    (i.e. aoData[]._aData)\r\n             *  @param {string} sSpecific The specific data type you want to get -\r\n             *    'display', 'type' 'filter' 'sort'\r\n             *  @returns {*} The data for the cell from the given row's data\r\n             *  @default null\r\n             */\r\n            \"fnGetData\": null,\r\n        \r\n            /**\r\n             * Function to set data for a cell in the column. You should <b>never</b>\r\n             * set the data directly to _aData internally in DataTables - always use\r\n             * this method. It allows mData to function as required. This function\r\n             * is automatically assigned by the column initialisation method\r\n             *  @type function\r\n             *  @param {array|object} oData The data array/object for the array\r\n             *    (i.e. aoData[]._aData)\r\n             *  @param {*} sValue Value to set\r\n             *  @default null\r\n             */\r\n            \"fnSetData\": null,\r\n        \r\n            /**\r\n             * Property to read the value for the cells in the column from the data\r\n             * source array / object. If null, then the default content is used, if a\r\n             * function is given then the return from the function is used.\r\n             *  @type function|int|string|null\r\n             *  @default null\r\n             */\r\n            \"mData\": null,\r\n        \r\n            /**\r\n             * Partner property to mData which is used (only when defined) to get\r\n             * the data - i.e. it is basically the same as mData, but without the\r\n             * 'set' option, and also the data fed to it is the result from mData.\r\n             * This is the rendering method to match the data method of mData.\r\n             *  @type function|int|string|null\r\n             *  @default null\r\n             */\r\n            \"mRender\": null,\r\n        \r\n            /**\r\n             * Unique header TH/TD element for this column - this is what the sorting\r\n             * listener is attached to (if sorting is enabled.)\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTh\": null,\r\n        \r\n            /**\r\n             * Unique footer TH/TD element for this column (if there is one). Not used\r\n             * in DataTables as such, but can be used for plug-ins to reference the\r\n             * footer for each column.\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTf\": null,\r\n        \r\n            /**\r\n             * The class to apply to all TD elements in the table's TBODY for the column\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sClass\": null,\r\n        \r\n            /**\r\n             * When DataTables calculates the column widths to assign to each column,\r\n             * it finds the longest string in each column and then constructs a\r\n             * temporary table and reads the widths from that. The problem with this\r\n             * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\r\n             * string - thus the calculation can go wrong (doing it properly and putting\r\n             * it into an DOM object and measuring that is horribly(!) slow). Thus as\r\n             * a \"work around\" we provide this option. It will append its value to the\r\n             * text that is found to be the longest string for the column - i.e. padding.\r\n             *  @type string\r\n             */\r\n            \"sContentPadding\": null,\r\n        \r\n            /**\r\n             * Allows a default value to be given for a column's data, and will be used\r\n             * whenever a null data source is encountered (this can be because mData\r\n             * is set to null, or because the data source itself is null).\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sDefaultContent\": null,\r\n        \r\n            /**\r\n             * Name for the column, allowing reference to the column by name as well as\r\n             * by index (needs a lookup to work by name).\r\n             *  @type string\r\n             */\r\n            \"sName\": null,\r\n        \r\n            /**\r\n             * Custom sorting data type - defines which of the available plug-ins in\r\n             * afnSortData the custom sorting will use - if any is defined.\r\n             *  @type string\r\n             *  @default std\r\n             */\r\n            \"sSortDataType\": 'std',\r\n        \r\n            /**\r\n             * Class to be applied to the header element when sorting on this column\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sSortingClass\": null,\r\n        \r\n            /**\r\n             * Class to be applied to the header element when sorting on this column -\r\n             * when jQuery UI theming is used.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sSortingClassJUI\": null,\r\n        \r\n            /**\r\n             * Title of the column - what is seen in the TH element (nTh).\r\n             *  @type string\r\n             */\r\n            \"sTitle\": null,\r\n        \r\n            /**\r\n             * Column sorting and filtering type\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sType\": null,\r\n        \r\n            /**\r\n             * Width of the column\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sWidth\": null,\r\n        \r\n            /**\r\n             * Width of the column when it was first \"encountered\"\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sWidthOrig\": null\r\n        };\r\n        \r\n        \r\n        /*\r\n         * Developer note: The properties of the object below are given in Hungarian\r\n         * notation, that was used as the interface for DataTables prior to v1.10, however\r\n         * from v1.10 onwards the primary interface is camel case. In order to avoid\r\n         * breaking backwards compatibility utterly with this change, the Hungarian\r\n         * version is still, internally the primary interface, but is is not documented\r\n         * - hence the @name tags in each doc comment. This allows a Javascript function\r\n         * to create a map from Hungarian notation to camel case (going the other direction\r\n         * would require each property to be listed, which would add around 3K to the size\r\n         * of DataTables, while this method is about a 0.5K hit).\r\n         *\r\n         * Ultimately this does pave the way for Hungarian notation to be dropped\r\n         * completely, but that is a massive amount of work and will break current\r\n         * installs (therefore is on-hold until v2).\r\n         */\r\n        \r\n        /**\r\n         * Initialisation options that can be given to DataTables at initialisation\r\n         * time.\r\n         *  @namespace\r\n         */\r\n        DataTable.defaults = {\r\n            /**\r\n             * An array of data to use for the table, passed in at initialisation which\r\n             * will be used in preference to any data which is already in the DOM. This is\r\n             * particularly useful for constructing tables purely in Javascript, for\r\n             * example with a custom Ajax call.\r\n             *  @type array\r\n             *  @default null\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.data\r\n             *\r\n             *  @example\r\n             *    // Using a 2D array data source\r\n             *    $(document).ready( function () {\r\n             *      $('#example').dataTable( {\r\n             *        \"data\": [\r\n             *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\r\n             *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\r\n             *        ],\r\n             *        \"columns\": [\r\n             *          { \"title\": \"Engine\" },\r\n             *          { \"title\": \"Browser\" },\r\n             *          { \"title\": \"Platform\" },\r\n             *          { \"title\": \"Version\" },\r\n             *          { \"title\": \"Grade\" }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using an array of objects as a data source (`data`)\r\n             *    $(document).ready( function () {\r\n             *      $('#example').dataTable( {\r\n             *        \"data\": [\r\n             *          {\r\n             *            \"engine\":   \"Trident\",\r\n             *            \"browser\":  \"Internet Explorer 4.0\",\r\n             *            \"platform\": \"Win 95+\",\r\n             *            \"version\":  4,\r\n             *            \"grade\":    \"X\"\r\n             *          },\r\n             *          {\r\n             *            \"engine\":   \"Trident\",\r\n             *            \"browser\":  \"Internet Explorer 5.0\",\r\n             *            \"platform\": \"Win 95+\",\r\n             *            \"version\":  5,\r\n             *            \"grade\":    \"C\"\r\n             *          }\r\n             *        ],\r\n             *        \"columns\": [\r\n             *          { \"title\": \"Engine\",   \"data\": \"engine\" },\r\n             *          { \"title\": \"Browser\",  \"data\": \"browser\" },\r\n             *          { \"title\": \"Platform\", \"data\": \"platform\" },\r\n             *          { \"title\": \"Version\",  \"data\": \"version\" },\r\n             *          { \"title\": \"Grade\",    \"data\": \"grade\" }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"aaData\": null,\r\n        \r\n        \r\n            /**\r\n             * If ordering is enabled, then DataTables will perform a first pass sort on\r\n             * initialisation. You can define which column(s) the sort is performed\r\n             * upon, and the sorting direction, with this variable. The `sorting` array\r\n             * should contain an array for each column to be sorted initially containing\r\n             * the column's index and a direction string ('asc' or 'desc').\r\n             *  @type array\r\n             *  @default [[0,'asc']]\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.order\r\n             *\r\n             *  @example\r\n             *    // Sort by 3rd column first, and then 4th column\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"order\": [[2,'asc'], [3,'desc']]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *    // No initial sorting\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"order\": []\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"aaSorting\": [[0,'asc']],\r\n        \r\n        \r\n            /**\r\n             * This parameter is basically identical to the `sorting` parameter, but\r\n             * cannot be overridden by user interaction with the table. What this means\r\n             * is that you could have a column (visible or hidden) which the sorting\r\n             * will always be forced on first - any sorting after that (from the user)\r\n             * will then be performed as required. This can be useful for grouping rows\r\n             * together.\r\n             *  @type array\r\n             *  @default null\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.orderFixed\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"orderFixed\": [[0,'asc']]\r\n             *      } );\r\n             *    } )\r\n             */\r\n            \"aaSortingFixed\": [],\r\n        \r\n        \r\n            /**\r\n             * DataTables can be instructed to load data to display in the table from a\r\n             * Ajax source. This option defines how that Ajax call is made and where to.\r\n             *\r\n             * The `ajax` property has three different modes of operation, depending on\r\n             * how it is defined. These are:\r\n             *\r\n             * * `string` - Set the URL from where the data should be loaded from.\r\n             * * `object` - Define properties for `jQuery.ajax`.\r\n             * * `function` - Custom data get function\r\n             *\r\n             * `string`\r\n             * --------\r\n             *\r\n             * As a string, the `ajax` property simply defines the URL from which\r\n             * DataTables will load data.\r\n             *\r\n             * `object`\r\n             * --------\r\n             *\r\n             * As an object, the parameters in the object are passed to\r\n             * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\r\n             * of the Ajax request. DataTables has a number of default parameters which\r\n             * you can override using this option. Please refer to the jQuery\r\n             * documentation for a full description of the options available, although\r\n             * the following parameters provide additional options in DataTables or\r\n             * require special consideration:\r\n             *\r\n             * * `data` - As with jQuery, `data` can be provided as an object, but it\r\n             *   can also be used as a function to manipulate the data DataTables sends\r\n             *   to the server. The function takes a single parameter, an object of\r\n             *   parameters with the values that DataTables has readied for sending. An\r\n             *   object may be returned which will be merged into the DataTables\r\n             *   defaults, or you can add the items to the object that was passed in and\r\n             *   not return anything from the function. This supersedes `fnServerParams`\r\n             *   from DataTables 1.9-.\r\n             *\r\n             * * `dataSrc` - By default DataTables will look for the property `data` (or\r\n             *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\r\n             *   from an Ajax source or for server-side processing - this parameter\r\n             *   allows that property to be changed. You can use Javascript dotted\r\n             *   object notation to get a data source for multiple levels of nesting, or\r\n             *   it my be used as a function. As a function it takes a single parameter,\r\n             *   the JSON returned from the server, which can be manipulated as\r\n             *   required, with the returned value being that used by DataTables as the\r\n             *   data source for the table. This supersedes `sAjaxDataProp` from\r\n             *   DataTables 1.9-.\r\n             *\r\n             * * `success` - Should not be overridden it is used internally in\r\n             *   DataTables. To manipulate / transform the data returned by the server\r\n             *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\r\n             *\r\n             * `function`\r\n             * ----------\r\n             *\r\n             * As a function, making the Ajax call is left up to yourself allowing\r\n             * complete control of the Ajax request. Indeed, if desired, a method other\r\n             * than Ajax could be used to obtain the required data, such as Web storage\r\n             * or an AIR database.\r\n             *\r\n             * The function is given four parameters and no return is required. The\r\n             * parameters are:\r\n             *\r\n             * 1. _object_ - Data to send to the server\r\n             * 2. _function_ - Callback function that must be executed when the required\r\n             *    data has been obtained. That data should be passed into the callback\r\n             *    as the only parameter\r\n             * 3. _object_ - DataTables settings object for the table\r\n             *\r\n             * Note that this supersedes `fnServerData` from DataTables 1.9-.\r\n             *\r\n             *  @type string|object|function\r\n             *  @default null\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.ajax\r\n             *  @since 1.10.0\r\n             *\r\n             * @example\r\n             *   // Get JSON data from a file via Ajax.\r\n             *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\r\n             *   $('#example').dataTable( {\r\n             *     \"ajax\": \"data.json\"\r\n             *   } );\r\n             *\r\n             * @example\r\n             *   // Get JSON data from a file via Ajax, using `dataSrc` to change\r\n             *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\r\n             *   $('#example').dataTable( {\r\n             *     \"ajax\": {\r\n             *       \"url\": \"data.json\",\r\n             *       \"dataSrc\": \"tableData\"\r\n             *     }\r\n             *   } );\r\n             *\r\n             * @example\r\n             *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\r\n             *   // from a plain array rather than an array in an object\r\n             *   $('#example').dataTable( {\r\n             *     \"ajax\": {\r\n             *       \"url\": \"data.json\",\r\n             *       \"dataSrc\": \"\"\r\n             *     }\r\n             *   } );\r\n             *\r\n             * @example\r\n             *   // Manipulate the data returned from the server - add a link to data\r\n             *   // (note this can, should, be done using `render` for the column - this\r\n             *   // is just a simple example of how the data can be manipulated).\r\n             *   $('#example').dataTable( {\r\n             *     \"ajax\": {\r\n             *       \"url\": \"data.json\",\r\n             *       \"dataSrc\": function ( json ) {\r\n             *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\r\n             *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\r\n             *         }\r\n             *         return json;\r\n             *       }\r\n             *     }\r\n             *   } );\r\n             *\r\n             * @example\r\n             *   // Add data to the request\r\n             *   $('#example').dataTable( {\r\n             *     \"ajax\": {\r\n             *       \"url\": \"data.json\",\r\n             *       \"data\": function ( d ) {\r\n             *         return {\r\n             *           \"extra_search\": $('#extra').val()\r\n             *         };\r\n             *       }\r\n             *     }\r\n             *   } );\r\n             *\r\n             * @example\r\n             *   // Send request as POST\r\n             *   $('#example').dataTable( {\r\n             *     \"ajax\": {\r\n             *       \"url\": \"data.json\",\r\n             *       \"type\": \"POST\"\r\n             *     }\r\n             *   } );\r\n             *\r\n             * @example\r\n             *   // Get the data from localStorage (could interface with a form for\r\n             *   // adding, editing and removing rows).\r\n             *   $('#example').dataTable( {\r\n             *     \"ajax\": function (data, callback, settings) {\r\n             *       callback(\r\n             *         JSON.parse( localStorage.getItem('dataTablesData') )\r\n             *       );\r\n             *     }\r\n             *   } );\r\n             */\r\n            \"ajax\": null,\r\n        \r\n        \r\n            /**\r\n             * This parameter allows you to readily specify the entries in the length drop\r\n             * down menu that DataTables shows when pagination is enabled. It can be\r\n             * either a 1D array of options which will be used for both the displayed\r\n             * option and the value, or a 2D array which will use the array in the first\r\n             * position as the value, and the array in the second position as the\r\n             * displayed options (useful for language strings such as 'All').\r\n             *\r\n             * Note that the `pageLength` property will be automatically set to the\r\n             * first value given in this array, unless `pageLength` is also provided.\r\n             *  @type array\r\n             *  @default [ 10, 25, 50, 100 ]\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.lengthMenu\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"aLengthMenu\": [ 10, 25, 50, 100 ],\r\n        \r\n        \r\n            /**\r\n             * The `columns` option in the initialisation parameter allows you to define\r\n             * details about the way individual columns behave. For a full list of\r\n             * column options that can be set, please see\r\n             * {@link DataTable.defaults.column}. Note that if you use `columns` to\r\n             * define your columns, you must have an entry in the array for every single\r\n             * column that you have in your table (these can be null if you don't which\r\n             * to specify any options).\r\n             *  @member\r\n             *\r\n             *  @name DataTable.defaults.column\r\n             */\r\n            \"aoColumns\": null,\r\n        \r\n            /**\r\n             * Very similar to `columns`, `columnDefs` allows you to target a specific\r\n             * column, multiple columns, or all columns, using the `targets` property of\r\n             * each object in the array. This allows great flexibility when creating\r\n             * tables, as the `columnDefs` arrays can be of any length, targeting the\r\n             * columns you specifically want. `columnDefs` may use any of the column\r\n             * options available: {@link DataTable.defaults.column}, but it _must_\r\n             * have `targets` defined in each object in the array. Values in the `targets`\r\n             * array may be:\r\n             *   <ul>\r\n             *     <li>a string - class name will be matched on the TH for the column</li>\r\n             *     <li>0 or a positive integer - column index counting from the left</li>\r\n             *     <li>a negative integer - column index counting from the right</li>\r\n             *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\r\n             *   </ul>\r\n             *  @member\r\n             *\r\n             *  @name DataTable.defaults.columnDefs\r\n             */\r\n            \"aoColumnDefs\": null,\r\n        \r\n        \r\n            /**\r\n             * Basically the same as `search`, this parameter defines the individual column\r\n             * filtering state at initialisation time. The array must be of the same size\r\n             * as the number of columns, and each element be an object with the parameters\r\n             * `search` and `escapeRegex` (the latter is optional). 'null' is also\r\n             * accepted and the default will be used.\r\n             *  @type array\r\n             *  @default []\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.searchCols\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"searchCols\": [\r\n             *          null,\r\n             *          { \"search\": \"My filter\" },\r\n             *          null,\r\n             *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\r\n             *        ]\r\n             *      } );\r\n             *    } )\r\n             */\r\n            \"aoSearchCols\": [],\r\n        \r\n        \r\n            /**\r\n             * An array of CSS classes that should be applied to displayed rows. This\r\n             * array may be of any length, and DataTables will apply each class\r\n             * sequentially, looping when required.\r\n             *  @type array\r\n             *  @default null <i>Will take the values determined by the `oClasses.stripe*`\r\n             *    options</i>\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.stripeClasses\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\r\n             *      } );\r\n             *    } )\r\n             */\r\n            \"asStripeClasses\": null,\r\n        \r\n        \r\n            /**\r\n             * Enable or disable automatic column width calculation. This can be disabled\r\n             * as an optimisation (it takes some time to calculate the widths) if the\r\n             * tables widths are passed in using `columns`.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.autoWidth\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n             *      $('#example').dataTable( {\r\n             *        \"autoWidth\": false\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"bAutoWidth\": true,\r\n        \r\n        \r\n            /**\r\n             * Deferred rendering can provide DataTables with a huge speed boost when you\r\n             * are using an Ajax or JS data source for the table. This option, when set to\r\n             * true, will cause DataTables to defer the creation of the table elements for\r\n             * each row until they are needed for a draw - saving a significant amount of\r\n             * time.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.deferRender\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"ajax\": \"sources/arrays.txt\",\r\n             *        \"deferRender\": true\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"bDeferRender\": false,\r\n        \r\n        \r\n            /**\r\n             * Replace a DataTable which matches the given selector and replace it with\r\n             * one which has the properties of the new initialisation object passed. If no\r\n             * table matches the selector, then the new DataTable will be constructed as\r\n             * per normal.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.destroy\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"srollY\": \"200px\",\r\n             *        \"paginate\": false\r\n             *      } );\r\n             *\r\n             *      // Some time later....\r\n             *      $('#example').dataTable( {\r\n             *        \"filter\": false,\r\n             *        \"destroy\": true\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"bDestroy\": false,\r\n        \r\n        \r\n            /**\r\n             * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\r\n             * that it allows the end user to input multiple words (space separated) and\r\n             * will match a row containing those words, even if not in the order that was\r\n             * specified (this allow matching across multiple columns). Note that if you\r\n             * wish to use filtering in DataTables this must remain 'true' - to remove the\r\n             * default filtering input box and retain filtering abilities, please use\r\n             * {@link DataTable.defaults.dom}.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.searching\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n             *      $('#example').dataTable( {\r\n             *        \"searching\": false\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"bFilter\": true,\r\n        \r\n        \r\n            /**\r\n             * Enable or disable the table information display. This shows information\r\n             * about the data that is currently visible on the page, including information\r\n             * about filtered data if that action is being performed.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.info\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n             *      $('#example').dataTable( {\r\n             *        \"info\": false\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"bInfo\": true,\r\n        \r\n        \r\n            /**\r\n             * Allows the end user to select the size of a formatted page from a select\r\n             * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.lengthChange\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n             *      $('#example').dataTable( {\r\n             *        \"lengthChange\": false\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"bLengthChange\": true,\r\n        \r\n        \r\n            /**\r\n             * Enable or disable pagination.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.paging\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n             *      $('#example').dataTable( {\r\n             *        \"paging\": false\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"bPaginate\": true,\r\n        \r\n        \r\n            /**\r\n             * Enable or disable the display of a 'processing' indicator when the table is\r\n             * being processed (e.g. a sort). This is particularly useful for tables with\r\n             * large amounts of data where it can take a noticeable amount of time to sort\r\n             * the entries.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.processing\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n             *      $('#example').dataTable( {\r\n             *        \"processing\": true\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"bProcessing\": false,\r\n        \r\n        \r\n            /**\r\n             * Retrieve the DataTables object for the given selector. Note that if the\r\n             * table has already been initialised, this parameter will cause DataTables\r\n             * to simply return the object that has already been set up - it will not take\r\n             * account of any changes you might have made to the initialisation object\r\n             * passed to DataTables (setting this parameter to true is an acknowledgement\r\n             * that you understand this). `destroy` can be used to reinitialise a table if\r\n             * you need.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.retrieve\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      initTable();\r\n             *      tableActions();\r\n             *    } );\r\n             *\r\n             *    function initTable ()\r\n             *    {\r\n             *      return $('#example').dataTable( {\r\n             *        \"scrollY\": \"200px\",\r\n             *        \"paginate\": false,\r\n             *        \"retrieve\": true\r\n             *      } );\r\n             *    }\r\n             *\r\n             *    function tableActions ()\r\n             *    {\r\n             *      var table = initTable();\r\n             *      // perform API operations with oTable\r\n             *    }\r\n             */\r\n            \"bRetrieve\": false,\r\n        \r\n        \r\n            /**\r\n             * When vertical (y) scrolling is enabled, DataTables will force the height of\r\n             * the table's viewport to the given height at all times (useful for layout).\r\n             * However, this can look odd when filtering data down to a small data set,\r\n             * and the footer is left \"floating\" further down. This parameter (when\r\n             * enabled) will cause DataTables to collapse the table's viewport down when\r\n             * the result set will fit within the given Y height.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.scrollCollapse\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"scrollY\": \"200\",\r\n             *        \"scrollCollapse\": true\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"bScrollCollapse\": false,\r\n        \r\n        \r\n            /**\r\n             * Configure DataTables to use server-side processing. Note that the\r\n             * `ajax` parameter must also be given in order to give DataTables a\r\n             * source to obtain the required data for each draw.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverSide\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n             *      $('#example').dataTable( {\r\n             *        \"serverSide\": true,\r\n             *        \"ajax\": \"xhr.php\"\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"bServerSide\": false,\r\n        \r\n        \r\n            /**\r\n             * Enable or disable sorting of columns. Sorting of individual columns can be\r\n             * disabled by the `sortable` option for each column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.ordering\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n             *      $('#example').dataTable( {\r\n             *        \"ordering\": false\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"bSort\": true,\r\n        \r\n        \r\n            /**\r\n             * Enable or display DataTables' ability to sort multiple columns at the\r\n             * same time (activated by shift-click by the user).\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.orderMulti\r\n             *\r\n             *  @example\r\n             *    // Disable multiple column sorting ability\r\n             *    $(document).ready( function () {\r\n             *      $('#example').dataTable( {\r\n             *        \"orderMulti\": false\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"bSortMulti\": true,\r\n        \r\n        \r\n            /**\r\n             * Allows control over whether DataTables should use the top (true) unique\r\n             * cell that is found for a single column, or the bottom (false - default).\r\n             * This is useful when using complex headers.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.orderCellsTop\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"orderCellsTop\": true\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"bSortCellsTop\": false,\r\n        \r\n        \r\n            /**\r\n             * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\r\n             * `sorting\\_3` to the columns which are currently being sorted on. This is\r\n             * presented as a feature switch as it can increase processing time (while\r\n             * classes are removed and added) so for large data sets you might want to\r\n             * turn this off.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.orderClasses\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n             *      $('#example').dataTable( {\r\n             *        \"orderClasses\": false\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"bSortClasses\": true,\r\n        \r\n        \r\n            /**\r\n             * Enable or disable state saving. When enabled HTML5 `localStorage` will be\r\n             * used to save table display information such as pagination information,\r\n             * display length, filtering and sorting. As such when the end user reloads\r\n             * the page the display display will match what thy had previously set up.\r\n             *\r\n             * Due to the use of `localStorage` the default state saving is not supported\r\n             * in IE6 or 7. If state saving is required in those browsers, use\r\n             * `stateSaveCallback` to provide a storage solution such as cookies.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.stateSave\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n             *      $('#example').dataTable( {\r\n             *        \"stateSave\": true\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"bStateSave\": false,\r\n        \r\n        \r\n            /**\r\n             * This function is called when a TR element is created (and all TD child\r\n             * elements have been inserted), or registered if using a DOM source, allowing\r\n             * manipulation of the TR element (adding classes etc).\r\n             *  @type function\r\n             *  @param {node} row \"TR\" element for the current row\r\n             *  @param {array} data Raw data array for this row\r\n             *  @param {int} dataIndex The index of this row in the internal aoData array\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.createdRow\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"createdRow\": function( row, data, dataIndex ) {\r\n             *          // Bold the grade for all 'A' grade browsers\r\n             *          if ( data[4] == \"A\" )\r\n             *          {\r\n             *            $('td:eq(4)', row).html( '<b>A</b>' );\r\n             *          }\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"fnCreatedRow\": null,\r\n        \r\n        \r\n            /**\r\n             * This function is called on every 'draw' event, and allows you to\r\n             * dynamically modify any aspect you want about the created DOM.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.drawCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"drawCallback\": function( settings ) {\r\n             *          alert( 'DataTables has redrawn the table' );\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"fnDrawCallback\": null,\r\n        \r\n        \r\n            /**\r\n             * Identical to fnHeaderCallback() but for the table footer this function\r\n             * allows you to modify the table footer on every 'draw' event.\r\n             *  @type function\r\n             *  @param {node} foot \"TR\" element for the footer\r\n             *  @param {array} data Full table data (as derived from the original HTML)\r\n             *  @param {int} start Index for the current display starting point in the\r\n             *    display array\r\n             *  @param {int} end Index for the current display ending point in the\r\n             *    display array\r\n             *  @param {array int} display Index array to translate the visual position\r\n             *    to the full data array\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.footerCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"footerCallback\": function( tfoot, data, start, end, display ) {\r\n             *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\r\n             *        }\r\n             *      } );\r\n             *    } )\r\n             */\r\n            \"fnFooterCallback\": null,\r\n        \r\n        \r\n            /**\r\n             * When rendering large numbers in the information element for the table\r\n             * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\r\n             * to have a comma separator for the 'thousands' units (e.g. 1 million is\r\n             * rendered as \"1,000,000\") to help readability for the end user. This\r\n             * function will override the default method DataTables uses.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {int} toFormat number to be formatted\r\n             *  @returns {string} formatted string for DataTables to show the number\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.formatNumber\r\n             *\r\n             *  @example\r\n             *    // Format a number using a single quote for the separator (note that\r\n             *    // this can also be done with the language.thousands option)\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"formatNumber\": function ( toFormat ) {\r\n             *          return toFormat.toString().replace(\r\n             *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\r\n             *          );\r\n             *        };\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"fnFormatNumber\": function ( toFormat ) {\r\n                return toFormat.toString().replace(\r\n                    /\\B(?=(\\d{3})+(?!\\d))/g,\r\n                    this.oLanguage.sThousands\r\n                );\r\n            },\r\n        \r\n        \r\n            /**\r\n             * This function is called on every 'draw' event, and allows you to\r\n             * dynamically modify the header row. This can be used to calculate and\r\n             * display useful information about the table.\r\n             *  @type function\r\n             *  @param {node} head \"TR\" element for the header\r\n             *  @param {array} data Full table data (as derived from the original HTML)\r\n             *  @param {int} start Index for the current display starting point in the\r\n             *    display array\r\n             *  @param {int} end Index for the current display ending point in the\r\n             *    display array\r\n             *  @param {array int} display Index array to translate the visual position\r\n             *    to the full data array\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.headerCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"fheaderCallback\": function( head, data, start, end, display ) {\r\n             *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\r\n             *        }\r\n             *      } );\r\n             *    } )\r\n             */\r\n            \"fnHeaderCallback\": null,\r\n        \r\n        \r\n            /**\r\n             * The information element can be used to convey information about the current\r\n             * state of the table. Although the internationalisation options presented by\r\n             * DataTables are quite capable of dealing with most customisations, there may\r\n             * be times where you wish to customise the string further. This callback\r\n             * allows you to do exactly that.\r\n             *  @type function\r\n             *  @param {object} oSettings DataTables settings object\r\n             *  @param {int} start Starting position in data for the draw\r\n             *  @param {int} end End position in data for the draw\r\n             *  @param {int} max Total number of rows in the table (regardless of\r\n             *    filtering)\r\n             *  @param {int} total Total number of rows in the data set, after filtering\r\n             *  @param {string} pre The string that DataTables has formatted using it's\r\n             *    own rules\r\n             *  @returns {string} The string to be displayed in the information element.\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.infoCallback\r\n             *\r\n             *  @example\r\n             *    $('#example').dataTable( {\r\n             *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\r\n             *        return start +\" to \"+ end;\r\n             *      }\r\n             *    } );\r\n             */\r\n            \"fnInfoCallback\": null,\r\n        \r\n        \r\n            /**\r\n             * Called when the table has been initialised. Normally DataTables will\r\n             * initialise sequentially and there will be no need for this function,\r\n             * however, this does not hold true when using external language information\r\n             * since that is obtained using an async XHR call.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} json The JSON object request from the server - only\r\n             *    present if client-side Ajax sourced data is used\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.initComplete\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"initComplete\": function(settings, json) {\r\n             *          alert( 'DataTables has finished its initialisation.' );\r\n             *        }\r\n             *      } );\r\n             *    } )\r\n             */\r\n            \"fnInitComplete\": null,\r\n        \r\n        \r\n            /**\r\n             * Called at the very start of each table draw and can be used to cancel the\r\n             * draw by returning false, any other return (including undefined) results in\r\n             * the full draw occurring).\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @returns {boolean} False will cancel the draw, anything else (including no\r\n             *    return) will allow it to complete.\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.preDrawCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"preDrawCallback\": function( settings ) {\r\n             *          if ( $('#test').val() == 1 ) {\r\n             *            return false;\r\n             *          }\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"fnPreDrawCallback\": null,\r\n        \r\n        \r\n            /**\r\n             * This function allows you to 'post process' each row after it have been\r\n             * generated for each table draw, but before it is rendered on screen. This\r\n             * function might be used for setting the row class name etc.\r\n             *  @type function\r\n             *  @param {node} row \"TR\" element for the current row\r\n             *  @param {array} data Raw data array for this row\r\n             *  @param {int} displayIndex The display index for the current table draw\r\n             *  @param {int} displayIndexFull The index of the data in the full list of\r\n             *    rows (after filtering)\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.rowCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\r\n             *          // Bold the grade for all 'A' grade browsers\r\n             *          if ( data[4] == \"A\" ) {\r\n             *            $('td:eq(4)', row).html( '<b>A</b>' );\r\n             *          }\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"fnRowCallback\": null,\r\n        \r\n        \r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * This parameter allows you to override the default function which obtains\r\n             * the data from the server so something more suitable for your application.\r\n             * For example you could use POST data, or pull information from a Gears or\r\n             * AIR database.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {string} source HTTP source to obtain the data from (`ajax`)\r\n             *  @param {array} data A key/value pair object containing the data to send\r\n             *    to the server\r\n             *  @param {function} callback to be called on completion of the data get\r\n             *    process that will draw the data on the page.\r\n             *  @param {object} settings DataTables settings object\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverData\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"fnServerData\": null,\r\n        \r\n        \r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             *  It is often useful to send extra data to the server when making an Ajax\r\n             * request - for example custom filtering information, and this callback\r\n             * function makes it trivial to send extra information to the server. The\r\n             * passed in parameter is the data set that has been constructed by\r\n             * DataTables, and you can add to this or modify it as you require.\r\n             *  @type function\r\n             *  @param {array} data Data array (array of objects which are name/value\r\n             *    pairs) that has been constructed by DataTables and will be sent to the\r\n             *    server. In the case of Ajax sourced data with server-side processing\r\n             *    this will be an empty array, for server-side processing there will be a\r\n             *    significant number of parameters!\r\n             *  @returns {undefined} Ensure that you modify the data array passed in,\r\n             *    as this is passed by reference.\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverParams\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"fnServerParams\": null,\r\n        \r\n        \r\n            /**\r\n             * Load the table state. With this function you can define from where, and how, the\r\n             * state of a table is loaded. By default DataTables will load from `localStorage`\r\n             * but you might wish to use a server-side database or cookies.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} callback Callback that can be executed when done. It\r\n             *    should be passed the loaded state object.\r\n             *  @return {object} The DataTables state object to be loaded\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateLoadCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"stateSave\": true,\r\n             *        \"stateLoadCallback\": function (settings, callback) {\r\n             *          $.ajax( {\r\n             *            \"url\": \"/state_load\",\r\n             *            \"dataType\": \"json\",\r\n             *            \"success\": function (json) {\r\n             *              callback( json );\r\n             *            }\r\n             *          } );\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"fnStateLoadCallback\": function ( settings ) {\r\n                try {\r\n                    return JSON.parse(\r\n                        (settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\r\n                            'DataTables_'+settings.sInstance+'_'+location.pathname\r\n                        )\r\n                    );\r\n                } catch (e) {\r\n                    return {};\r\n                }\r\n            },\r\n        \r\n        \r\n            /**\r\n             * Callback which allows modification of the saved state prior to loading that state.\r\n             * This callback is called when the table is loading state from the stored data, but\r\n             * prior to the settings object being modified by the saved state. Note that for\r\n             * plug-in authors, you should use the `stateLoadParams` event to load parameters for\r\n             * a plug-in.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object that is to be loaded\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateLoadParams\r\n             *\r\n             *  @example\r\n             *    // Remove a saved filter, so filtering is never loaded\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"stateSave\": true,\r\n             *        \"stateLoadParams\": function (settings, data) {\r\n             *          data.oSearch.sSearch = \"\";\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Disallow state loading by returning false\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"stateSave\": true,\r\n             *        \"stateLoadParams\": function (settings, data) {\r\n             *          return false;\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"fnStateLoadParams\": null,\r\n        \r\n        \r\n            /**\r\n             * Callback that is called when the state has been loaded from the state saving method\r\n             * and the DataTables settings object has been modified as a result of the loaded state.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object that was loaded\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateLoaded\r\n             *\r\n             *  @example\r\n             *    // Show an alert with the filtering value that was saved\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"stateSave\": true,\r\n             *        \"stateLoaded\": function (settings, data) {\r\n             *          alert( 'Saved filter was: '+data.oSearch.sSearch );\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"fnStateLoaded\": null,\r\n        \r\n        \r\n            /**\r\n             * Save the table state. This function allows you to define where and how the state\r\n             * information for the table is stored By default DataTables will use `localStorage`\r\n             * but you might wish to use a server-side database or cookies.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object to be saved\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateSaveCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"stateSave\": true,\r\n             *        \"stateSaveCallback\": function (settings, data) {\r\n             *          // Send an Ajax request to the server with the state object\r\n             *          $.ajax( {\r\n             *            \"url\": \"/state_save\",\r\n             *            \"data\": data,\r\n             *            \"dataType\": \"json\",\r\n             *            \"method\": \"POST\"\r\n             *            \"success\": function () {}\r\n             *          } );\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"fnStateSaveCallback\": function ( settings, data ) {\r\n                try {\r\n                    (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\r\n                        'DataTables_'+settings.sInstance+'_'+location.pathname,\r\n                        JSON.stringify( data )\r\n                    );\r\n                } catch (e) {}\r\n            },\r\n        \r\n        \r\n            /**\r\n             * Callback which allows modification of the state to be saved. Called when the table\r\n             * has changed state a new state save is required. This method allows modification of\r\n             * the state saving object prior to actually doing the save, including addition or\r\n             * other state properties or modification. Note that for plug-in authors, you should\r\n             * use the `stateSaveParams` event to save parameters for a plug-in.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object to be saved\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateSaveParams\r\n             *\r\n             *  @example\r\n             *    // Remove a saved filter, so filtering is never saved\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"stateSave\": true,\r\n             *        \"stateSaveParams\": function (settings, data) {\r\n             *          data.oSearch.sSearch = \"\";\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"fnStateSaveParams\": null,\r\n        \r\n        \r\n            /**\r\n             * Duration for which the saved state information is considered valid. After this period\r\n             * has elapsed the state will be returned to the default.\r\n             * Value is given in seconds.\r\n             *  @type int\r\n             *  @default 7200 <i>(2 hours)</i>\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.stateDuration\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"stateDuration\": 60*60*24; // 1 day\r\n             *      } );\r\n             *    } )\r\n             */\r\n            \"iStateDuration\": 7200,\r\n        \r\n        \r\n            /**\r\n             * When enabled DataTables will not make a request to the server for the first\r\n             * page draw - rather it will use the data already on the page (no sorting etc\r\n             * will be applied to it), thus saving on an XHR at load time. `deferLoading`\r\n             * is used to indicate that deferred loading is required, but it is also used\r\n             * to tell DataTables how many records there are in the full table (allowing\r\n             * the information element and pagination to be displayed correctly). In the case\r\n             * where a filtering is applied to the table on initial load, this can be\r\n             * indicated by giving the parameter as an array, where the first element is\r\n             * the number of records available after filtering and the second element is the\r\n             * number of records without filtering (allowing the table information element\r\n             * to be shown correctly).\r\n             *  @type int | array\r\n             *  @default null\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.deferLoading\r\n             *\r\n             *  @example\r\n             *    // 57 records available in the table, no filtering applied\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"serverSide\": true,\r\n             *        \"ajax\": \"scripts/server_processing.php\",\r\n             *        \"deferLoading\": 57\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // 57 records after filtering, 100 without filtering (an initial filter applied)\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"serverSide\": true,\r\n             *        \"ajax\": \"scripts/server_processing.php\",\r\n             *        \"deferLoading\": [ 57, 100 ],\r\n             *        \"search\": {\r\n             *          \"search\": \"my_filter\"\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"iDeferLoading\": null,\r\n        \r\n        \r\n            /**\r\n             * Number of rows to display on a single page when using pagination. If\r\n             * feature enabled (`lengthChange`) then the end user will be able to override\r\n             * this to a custom setting using a pop-up menu.\r\n             *  @type int\r\n             *  @default 10\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.pageLength\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"pageLength\": 50\r\n             *      } );\r\n             *    } )\r\n             */\r\n            \"iDisplayLength\": 10,\r\n        \r\n        \r\n            /**\r\n             * Define the starting point for data display when using DataTables with\r\n             * pagination. Note that this parameter is the number of records, rather than\r\n             * the page number, so if you have 10 records per page and want to start on\r\n             * the third page, it should be \"20\".\r\n             *  @type int\r\n             *  @default 0\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.displayStart\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"displayStart\": 20\r\n             *      } );\r\n             *    } )\r\n             */\r\n            \"iDisplayStart\": 0,\r\n        \r\n        \r\n            /**\r\n             * By default DataTables allows keyboard navigation of the table (sorting, paging,\r\n             * and filtering) by adding a `tabindex` attribute to the required elements. This\r\n             * allows you to tab through the controls and press the enter key to activate them.\r\n             * The tabindex is default 0, meaning that the tab follows the flow of the document.\r\n             * You can overrule this using this parameter if you wish. Use a value of -1 to\r\n             * disable built-in keyboard navigation.\r\n             *  @type int\r\n             *  @default 0\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.tabIndex\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"tabIndex\": 1\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"iTabIndex\": 0,\r\n        \r\n        \r\n            /**\r\n             * Classes that DataTables assigns to the various components and features\r\n             * that it adds to the HTML table. This allows classes to be configured\r\n             * during initialisation in addition to through the static\r\n             * {@link DataTable.ext.oStdClasses} object).\r\n             *  @namespace\r\n             *  @name DataTable.defaults.classes\r\n             */\r\n            \"oClasses\": {},\r\n        \r\n        \r\n            /**\r\n             * All strings that DataTables uses in the user interface that it creates\r\n             * are defined in this object, allowing you to modified them individually or\r\n             * completely replace them all as required.\r\n             *  @namespace\r\n             *  @name DataTable.defaults.language\r\n             */\r\n            \"oLanguage\": {\r\n                /**\r\n                 * Strings that are used for WAI-ARIA labels and controls only (these are not\r\n                 * actually visible on the page, but will be read by screenreaders, and thus\r\n                 * must be internationalised as well).\r\n                 *  @namespace\r\n                 *  @name DataTable.defaults.language.aria\r\n                 */\r\n                \"oAria\": {\r\n                    /**\r\n                     * ARIA label that is added to the table headers when the column may be\r\n                     * sorted ascending by activing the column (click or return when focused).\r\n                     * Note that the column header is prefixed to this string.\r\n                     *  @type string\r\n                     *  @default : activate to sort column ascending\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.aria.sortAscending\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n                     *      $('#example').dataTable( {\r\n                     *        \"language\": {\r\n                     *          \"aria\": {\r\n                     *            \"sortAscending\": \" - click/return to sort ascending\"\r\n                     *          }\r\n                     *        }\r\n                     *      } );\r\n                     *    } );\r\n                     */\r\n                    \"sSortAscending\": \": activate to sort column ascending\",\r\n        \r\n                    /**\r\n                     * ARIA label that is added to the table headers when the column may be\r\n                     * sorted descending by activing the column (click or return when focused).\r\n                     * Note that the column header is prefixed to this string.\r\n                     *  @type string\r\n                     *  @default : activate to sort column ascending\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.aria.sortDescending\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n                     *      $('#example').dataTable( {\r\n                     *        \"language\": {\r\n                     *          \"aria\": {\r\n                     *            \"sortDescending\": \" - click/return to sort descending\"\r\n                     *          }\r\n                     *        }\r\n                     *      } );\r\n                     *    } );\r\n                     */\r\n                    \"sSortDescending\": \": activate to sort column descending\"\r\n                },\r\n        \r\n                /**\r\n                 * Pagination string used by DataTables for the built-in pagination\r\n                 * control types.\r\n                 *  @namespace\r\n                 *  @name DataTable.defaults.language.paginate\r\n                 */\r\n                \"oPaginate\": {\r\n                    /**\r\n                     * Text to use when using the 'full_numbers' type of pagination for the\r\n                     * button to take the user to the first page.\r\n                     *  @type string\r\n                     *  @default First\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.first\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n                     *      $('#example').dataTable( {\r\n                     *        \"language\": {\r\n                     *          \"paginate\": {\r\n                     *            \"first\": \"First page\"\r\n                     *          }\r\n                     *        }\r\n                     *      } );\r\n                     *    } );\r\n                     */\r\n                    \"sFirst\": \"First\",\r\n        \r\n        \r\n                    /**\r\n                     * Text to use when using the 'full_numbers' type of pagination for the\r\n                     * button to take the user to the last page.\r\n                     *  @type string\r\n                     *  @default Last\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.last\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n                     *      $('#example').dataTable( {\r\n                     *        \"language\": {\r\n                     *          \"paginate\": {\r\n                     *            \"last\": \"Last page\"\r\n                     *          }\r\n                     *        }\r\n                     *      } );\r\n                     *    } );\r\n                     */\r\n                    \"sLast\": \"Last\",\r\n        \r\n        \r\n                    /**\r\n                     * Text to use for the 'next' pagination button (to take the user to the\r\n                     * next page).\r\n                     *  @type string\r\n                     *  @default Next\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.next\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n                     *      $('#example').dataTable( {\r\n                     *        \"language\": {\r\n                     *          \"paginate\": {\r\n                     *            \"next\": \"Next page\"\r\n                     *          }\r\n                     *        }\r\n                     *      } );\r\n                     *    } );\r\n                     */\r\n                    \"sNext\": \"Next\",\r\n        \r\n        \r\n                    /**\r\n                     * Text to use for the 'previous' pagination button (to take the user to\r\n                     * the previous page).\r\n                     *  @type string\r\n                     *  @default Previous\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.previous\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n                     *      $('#example').dataTable( {\r\n                     *        \"language\": {\r\n                     *          \"paginate\": {\r\n                     *            \"previous\": \"Previous page\"\r\n                     *          }\r\n                     *        }\r\n                     *      } );\r\n                     *    } );\r\n                     */\r\n                    \"sPrevious\": \"Previous\"\r\n                },\r\n        \r\n                /**\r\n                 * This string is shown in preference to `zeroRecords` when the table is\r\n                 * empty of data (regardless of filtering). Note that this is an optional\r\n                 * parameter - if it is not given, the value of `zeroRecords` will be used\r\n                 * instead (either the default or given value).\r\n                 *  @type string\r\n                 *  @default No data available in table\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.emptyTable\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"emptyTable\": \"No data available in table\"\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sEmptyTable\": \"No data available in table\",\r\n        \r\n        \r\n                /**\r\n                 * This string gives information to the end user about the information\r\n                 * that is current on display on the page. The following tokens can be\r\n                 * used in the string and will be dynamically replaced as the table\r\n                 * display updates. This tokens can be placed anywhere in the string, or\r\n                 * removed as needed by the language requires:\r\n                 *\r\n                 * * `\\_START\\_` - Display index of the first record on the current page\r\n                 * * `\\_END\\_` - Display index of the last record on the current page\r\n                 * * `\\_TOTAL\\_` - Number of records in the table after filtering\r\n                 * * `\\_MAX\\_` - Number of records in the table without filtering\r\n                 * * `\\_PAGE\\_` - Current page number\r\n                 * * `\\_PAGES\\_` - Total number of pages of data in the table\r\n                 *\r\n                 *  @type string\r\n                 *  @default Showing _START_ to _END_ of _TOTAL_ entries\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.info\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\r\n        \r\n        \r\n                /**\r\n                 * Display information string for when the table is empty. Typically the\r\n                 * format of this string should match `info`.\r\n                 *  @type string\r\n                 *  @default Showing 0 to 0 of 0 entries\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.infoEmpty\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"infoEmpty\": \"No entries to show\"\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\r\n        \r\n        \r\n                /**\r\n                 * When a user filters the information in a table, this string is appended\r\n                 * to the information (`info`) to give an idea of how strong the filtering\r\n                 * is. The variable _MAX_ is dynamically updated.\r\n                 *  @type string\r\n                 *  @default (filtered from _MAX_ total entries)\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.infoFiltered\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"infoFiltered\": \" - filtering from _MAX_ records\"\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\r\n        \r\n        \r\n                /**\r\n                 * If can be useful to append extra information to the info string at times,\r\n                 * and this variable does exactly that. This information will be appended to\r\n                 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\r\n                 * being used) at all times.\r\n                 *  @type string\r\n                 *  @default <i>Empty string</i>\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.infoPostFix\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"infoPostFix\": \"All records shown are derived from real information.\"\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sInfoPostFix\": \"\",\r\n        \r\n        \r\n                /**\r\n                 * This decimal place operator is a little different from the other\r\n                 * language options since DataTables doesn't output floating point\r\n                 * numbers, so it won't ever use this for display of a number. Rather,\r\n                 * what this parameter does is modify the sort methods of the table so\r\n                 * that numbers which are in a format which has a character other than\r\n                 * a period (`.`) as a decimal place will be sorted numerically.\r\n                 *\r\n                 * Note that numbers with different decimal places cannot be shown in\r\n                 * the same table and still be sortable, the table must be consistent.\r\n                 * However, multiple different tables on the page can use different\r\n                 * decimal place characters.\r\n                 *  @type string\r\n                 *  @default \r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.decimal\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"decimal\": \",\"\r\n                 *          \"thousands\": \".\"\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sDecimal\": \"\",\r\n        \r\n        \r\n                /**\r\n                 * DataTables has a build in number formatter (`formatNumber`) which is\r\n                 * used to format large numbers that are used in the table information.\r\n                 * By default a comma is used, but this can be trivially changed to any\r\n                 * character you wish with this parameter.\r\n                 *  @type string\r\n                 *  @default ,\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.thousands\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"thousands\": \"'\"\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sThousands\": \",\",\r\n        \r\n        \r\n                /**\r\n                 * Detail the action that will be taken when the drop down menu for the\r\n                 * pagination length option is changed. The '_MENU_' variable is replaced\r\n                 * with a default select list of 10, 25, 50 and 100, and can be replaced\r\n                 * with a custom select box if required.\r\n                 *  @type string\r\n                 *  @default Show _MENU_ entries\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.lengthMenu\r\n                 *\r\n                 *  @example\r\n                 *    // Language change only\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"lengthMenu\": \"Display _MENU_ records\"\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 *\r\n                 *  @example\r\n                 *    // Language and options change\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"lengthMenu\": 'Display <select>'+\r\n                 *            '<option value=\"10\">10</option>'+\r\n                 *            '<option value=\"20\">20</option>'+\r\n                 *            '<option value=\"30\">30</option>'+\r\n                 *            '<option value=\"40\">40</option>'+\r\n                 *            '<option value=\"50\">50</option>'+\r\n                 *            '<option value=\"-1\">All</option>'+\r\n                 *            '</select> records'\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sLengthMenu\": \"Show _MENU_ entries\",\r\n        \r\n        \r\n                /**\r\n                 * When using Ajax sourced data and during the first draw when DataTables is\r\n                 * gathering the data, this message is shown in an empty row in the table to\r\n                 * indicate to the end user the the data is being loaded. Note that this\r\n                 * parameter is not used when loading data by server-side processing, just\r\n                 * Ajax sourced data with client-side processing.\r\n                 *  @type string\r\n                 *  @default Loading...\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.loadingRecords\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"loadingRecords\": \"Please wait - loading...\"\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sLoadingRecords\": \"Loading...\",\r\n        \r\n        \r\n                /**\r\n                 * Text which is displayed when the table is processing a user action\r\n                 * (usually a sort command or similar).\r\n                 *  @type string\r\n                 *  @default Processing...\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.processing\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"processing\": \"DataTables is currently busy\"\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sProcessing\": \"Processing...\",\r\n        \r\n        \r\n                /**\r\n                 * Details the actions that will be taken when the user types into the\r\n                 * filtering input text box. The variable \"_INPUT_\", if used in the string,\r\n                 * is replaced with the HTML text box for the filtering input allowing\r\n                 * control over where it appears in the string. If \"_INPUT_\" is not given\r\n                 * then the input box is appended to the string automatically.\r\n                 *  @type string\r\n                 *  @default Search:\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.search\r\n                 *\r\n                 *  @example\r\n                 *    // Input text box will be appended at the end automatically\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"search\": \"Filter records:\"\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 *\r\n                 *  @example\r\n                 *    // Specify where the filter should appear\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"search\": \"Apply filter _INPUT_ to table\"\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sSearch\": \"Search:\",\r\n        \r\n        \r\n                /**\r\n                 * Assign a `placeholder` attribute to the search `input` element\r\n                 *  @type string\r\n                 *  @default \r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.searchPlaceholder\r\n                 */\r\n                \"sSearchPlaceholder\": \"\",\r\n        \r\n        \r\n                /**\r\n                 * All of the language information can be stored in a file on the\r\n                 * server-side, which DataTables will look up if this parameter is passed.\r\n                 * It must store the URL of the language file, which is in a JSON format,\r\n                 * and the object has the same properties as the oLanguage object in the\r\n                 * initialiser object (i.e. the above parameters). Please refer to one of\r\n                 * the example language files to see how this works in action.\r\n                 *  @type string\r\n                 *  @default <i>Empty string - i.e. disabled</i>\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.url\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sUrl\": \"\",\r\n        \r\n        \r\n                /**\r\n                 * Text shown inside the table records when the is no information to be\r\n                 * displayed after filtering. `emptyTable` is shown when there is simply no\r\n                 * information in the table at all (regardless of filtering).\r\n                 *  @type string\r\n                 *  @default No matching records found\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.zeroRecords\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"zeroRecords\": \"No records to display\"\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sZeroRecords\": \"No matching records found\"\r\n            },\r\n        \r\n        \r\n            /**\r\n             * This parameter allows you to have define the global filtering state at\r\n             * initialisation time. As an object the `search` parameter must be\r\n             * defined, but all other parameters are optional. When `regex` is true,\r\n             * the search string will be treated as a regular expression, when false\r\n             * (default) it will be treated as a straight string. When `smart`\r\n             * DataTables will use it's smart filtering methods (to word match at\r\n             * any point in the data), when false this will not be done.\r\n             *  @namespace\r\n             *  @extends DataTable.models.oSearch\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.search\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"search\": {\"search\": \"Initial search\"}\r\n             *      } );\r\n             *    } )\r\n             */\r\n            \"oSearch\": $.extend( {}, DataTable.models.oSearch ),\r\n        \r\n        \r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * By default DataTables will look for the property `data` (or `aaData` for\r\n             * compatibility with DataTables 1.9-) when obtaining data from an Ajax\r\n             * source or for server-side processing - this parameter allows that\r\n             * property to be changed. You can use Javascript dotted object notation to\r\n             * get a data source for multiple levels of nesting.\r\n             *  @type string\r\n             *  @default data\r\n             *\r\n             *  @dtopt Options\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.ajaxDataProp\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"sAjaxDataProp\": \"data\",\r\n        \r\n        \r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * You can instruct DataTables to load data from an external\r\n             * source using this parameter (use aData if you want to pass data in you\r\n             * already have). Simply provide a url a JSON object can be obtained from.\r\n             *  @type string\r\n             *  @default null\r\n             *\r\n             *  @dtopt Options\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.ajaxSource\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"sAjaxSource\": null,\r\n        \r\n        \r\n            /**\r\n             * This initialisation variable allows you to specify exactly where in the\r\n             * DOM you want DataTables to inject the various controls it adds to the page\r\n             * (for example you might want the pagination controls at the top of the\r\n             * table). DIV elements (with or without a custom class) can also be added to\r\n             * aid styling. The follow syntax is used:\r\n             *   <ul>\r\n             *     <li>The following options are allowed:\r\n             *       <ul>\r\n             *         <li>'l' - Length changing</li>\r\n             *         <li>'f' - Filtering input</li>\r\n             *         <li>'t' - The table!</li>\r\n             *         <li>'i' - Information</li>\r\n             *         <li>'p' - Pagination</li>\r\n             *         <li>'r' - pRocessing</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *     <li>The following constants are allowed:\r\n             *       <ul>\r\n             *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\r\n             *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *     <li>The following syntax is expected:\r\n             *       <ul>\r\n             *         <li>'&lt;' and '&gt;' - div elements</li>\r\n             *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\r\n             *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *     <li>Examples:\r\n             *       <ul>\r\n             *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\r\n             *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *   </ul>\r\n             *  @type string\r\n             *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\r\n             *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.dom\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sDom\": \"lfrtip\",\r\n        \r\n        \r\n            /**\r\n             * Search delay option. This will throttle full table searches that use the\r\n             * DataTables provided search input element (it does not effect calls to\r\n             * `dt-api search()`, providing a delay before the search is made.\r\n             *  @type integer\r\n             *  @default 0\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.searchDelay\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"searchDelay\": 200\r\n             *      } );\r\n             *    } )\r\n             */\r\n            \"searchDelay\": null,\r\n        \r\n        \r\n            /**\r\n             * DataTables features six different built-in options for the buttons to\r\n             * display for pagination control:\r\n             *\r\n             * * `numbers` - Page number buttons only\r\n             * * `simple` - 'Previous' and 'Next' buttons only\r\n             * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\r\n             * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\r\n             * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\r\n             * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\r\n             *  \r\n             * Further methods can be added using {@link DataTable.ext.oPagination}.\r\n             *  @type string\r\n             *  @default simple_numbers\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.pagingType\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"pagingType\": \"full_numbers\"\r\n             *      } );\r\n             *    } )\r\n             */\r\n            \"sPaginationType\": \"simple_numbers\",\r\n        \r\n        \r\n            /**\r\n             * Enable horizontal scrolling. When a table is too wide to fit into a\r\n             * certain layout, or you have a large number of columns in the table, you\r\n             * can enable x-scrolling to show the table in a viewport, which can be\r\n             * scrolled. This property can be `true` which will allow the table to\r\n             * scroll horizontally when needed, or any CSS unit, or a number (in which\r\n             * case it will be treated as a pixel measurement). Setting as simply `true`\r\n             * is recommended.\r\n             *  @type boolean|string\r\n             *  @default <i>blank string - i.e. disabled</i>\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.scrollX\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"scrollX\": true,\r\n             *        \"scrollCollapse\": true\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sScrollX\": \"\",\r\n        \r\n        \r\n            /**\r\n             * This property can be used to force a DataTable to use more width than it\r\n             * might otherwise do when x-scrolling is enabled. For example if you have a\r\n             * table which requires to be well spaced, this parameter is useful for\r\n             * \"over-sizing\" the table, and thus forcing scrolling. This property can by\r\n             * any CSS unit, or a number (in which case it will be treated as a pixel\r\n             * measurement).\r\n             *  @type string\r\n             *  @default <i>blank string - i.e. disabled</i>\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.scrollXInner\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"scrollX\": \"100%\",\r\n             *        \"scrollXInner\": \"110%\"\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sScrollXInner\": \"\",\r\n        \r\n        \r\n            /**\r\n             * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\r\n             * to the given height, and enable scrolling for any data which overflows the\r\n             * current viewport. This can be used as an alternative to paging to display\r\n             * a lot of data in a small area (although paging and scrolling can both be\r\n             * enabled at the same time). This property can be any CSS unit, or a number\r\n             * (in which case it will be treated as a pixel measurement).\r\n             *  @type string\r\n             *  @default <i>blank string - i.e. disabled</i>\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.scrollY\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"scrollY\": \"200px\",\r\n             *        \"paginate\": false\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sScrollY\": \"\",\r\n        \r\n        \r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * Set the HTTP method that is used to make the Ajax call for server-side\r\n             * processing or Ajax sourced data.\r\n             *  @type string\r\n             *  @default GET\r\n             *\r\n             *  @dtopt Options\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverMethod\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"sServerMethod\": \"GET\",\r\n        \r\n        \r\n            /**\r\n             * DataTables makes use of renderers when displaying HTML elements for\r\n             * a table. These renderers can be added or modified by plug-ins to\r\n             * generate suitable mark-up for a site. For example the Bootstrap\r\n             * integration plug-in for DataTables uses a paging button renderer to\r\n             * display pagination buttons in the mark-up required by Bootstrap.\r\n             *\r\n             * For further information about the renderers available see\r\n             * DataTable.ext.renderer\r\n             *  @type string|object\r\n             *  @default null\r\n             *\r\n             *  @name DataTable.defaults.renderer\r\n             *\r\n             */\r\n            \"renderer\": null,\r\n        \r\n        \r\n            /**\r\n             * Set the data property name that DataTables should use to get a row's id\r\n             * to set as the `id` property in the node.\r\n             *  @type string\r\n             *  @default DT_RowId\r\n             *\r\n             *  @name DataTable.defaults.rowId\r\n             */\r\n            \"rowId\": \"DT_RowId\"\r\n        };\r\n        \r\n        _fnHungarianMap( DataTable.defaults );\r\n        \r\n        \r\n        \r\n        /*\r\n         * Developer note - See note in model.defaults.js about the use of Hungarian\r\n         * notation and camel case.\r\n         */\r\n        \r\n        /**\r\n         * Column options that can be given to DataTables at initialisation time.\r\n         *  @namespace\r\n         */\r\n        DataTable.defaults.column = {\r\n            /**\r\n             * Define which column(s) an order will occur on for this column. This\r\n             * allows a column's ordering to take multiple columns into account when\r\n             * doing a sort or use the data from a different column. For example first\r\n             * name / last name columns make sense to do a multi-column sort over the\r\n             * two columns.\r\n             *  @type array|int\r\n             *  @default null <i>Takes the value of the column index automatically</i>\r\n             *\r\n             *  @name DataTable.defaults.column.orderData\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [\r\n             *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\r\n             *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\r\n             *          { \"orderData\": 2, \"targets\": [ 2 ] }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columns\": [\r\n             *          { \"orderData\": [ 0, 1 ] },\r\n             *          { \"orderData\": [ 1, 0 ] },\r\n             *          { \"orderData\": 2 },\r\n             *          null,\r\n             *          null\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"aDataSort\": null,\r\n            \"iDataSort\": -1,\r\n        \r\n        \r\n            /**\r\n             * You can control the default ordering direction, and even alter the\r\n             * behaviour of the sort handler (i.e. only allow ascending ordering etc)\r\n             * using this parameter.\r\n             *  @type array\r\n             *  @default [ 'asc', 'desc' ]\r\n             *\r\n             *  @name DataTable.defaults.column.orderSequence\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [\r\n             *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\r\n             *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\r\n             *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columns\": [\r\n             *          null,\r\n             *          { \"orderSequence\": [ \"asc\" ] },\r\n             *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\r\n             *          { \"orderSequence\": [ \"desc\" ] },\r\n             *          null\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"asSorting\": [ 'asc', 'desc' ],\r\n        \r\n        \r\n            /**\r\n             * Enable or disable filtering on the data in this column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @name DataTable.defaults.column.searchable\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [\r\n             *          { \"searchable\": false, \"targets\": [ 0 ] }\r\n             *        ] } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columns\": [\r\n             *          { \"searchable\": false },\r\n             *          null,\r\n             *          null,\r\n             *          null,\r\n             *          null\r\n             *        ] } );\r\n             *    } );\r\n             */\r\n            \"bSearchable\": true,\r\n        \r\n        \r\n            /**\r\n             * Enable or disable ordering on this column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @name DataTable.defaults.column.orderable\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [\r\n             *          { \"orderable\": false, \"targets\": [ 0 ] }\r\n             *        ] } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columns\": [\r\n             *          { \"orderable\": false },\r\n             *          null,\r\n             *          null,\r\n             *          null,\r\n             *          null\r\n             *        ] } );\r\n             *    } );\r\n             */\r\n            \"bSortable\": true,\r\n        \r\n        \r\n            /**\r\n             * Enable or disable the display of this column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @name DataTable.defaults.column.visible\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [\r\n             *          { \"visible\": false, \"targets\": [ 0 ] }\r\n             *        ] } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columns\": [\r\n             *          { \"visible\": false },\r\n             *          null,\r\n             *          null,\r\n             *          null,\r\n             *          null\r\n             *        ] } );\r\n             *    } );\r\n             */\r\n            \"bVisible\": true,\r\n        \r\n        \r\n            /**\r\n             * Developer definable function that is called whenever a cell is created (Ajax source,\r\n             * etc) or processed for input (DOM source). This can be used as a compliment to mRender\r\n             * allowing you to modify the DOM element (add background colour for example) when the\r\n             * element is available.\r\n             *  @type function\r\n             *  @param {element} td The TD node that has been created\r\n             *  @param {*} cellData The Data for the cell\r\n             *  @param {array|object} rowData The data for the whole row\r\n             *  @param {int} row The row index for the aoData data store\r\n             *  @param {int} col The column index for aoColumns\r\n             *\r\n             *  @name DataTable.defaults.column.createdCell\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [ {\r\n             *          \"targets\": [3],\r\n             *          \"createdCell\": function (td, cellData, rowData, row, col) {\r\n             *            if ( cellData == \"1.7\" ) {\r\n             *              $(td).css('color', 'blue')\r\n             *            }\r\n             *          }\r\n             *        } ]\r\n             *      });\r\n             *    } );\r\n             */\r\n            \"fnCreatedCell\": null,\r\n        \r\n        \r\n            /**\r\n             * This parameter has been replaced by `data` in DataTables to ensure naming\r\n             * consistency. `dataProp` can still be used, as there is backwards\r\n             * compatibility in DataTables for this option, but it is strongly\r\n             * recommended that you use `data` in preference to `dataProp`.\r\n             *  @name DataTable.defaults.column.dataProp\r\n             */\r\n        \r\n        \r\n            /**\r\n             * This property can be used to read data from any data source property,\r\n             * including deeply nested objects / properties. `data` can be given in a\r\n             * number of different ways which effect its behaviour:\r\n             *\r\n             * * `integer` - treated as an array index for the data source. This is the\r\n             *   default that DataTables uses (incrementally increased for each column).\r\n             * * `string` - read an object property from the data source. There are\r\n             *   three 'special' options that can be used in the string to alter how\r\n             *   DataTables reads the data from the source object:\r\n             *    * `.` - Dotted Javascript notation. Just as you use a `.` in\r\n             *      Javascript to read from nested objects, so to can the options\r\n             *      specified in `data`. For example: `browser.version` or\r\n             *      `browser.name`. If your object parameter name contains a period, use\r\n             *      `\\\\` to escape it - i.e. `first\\\\.name`.\r\n             *    * `[]` - Array notation. DataTables can automatically combine data\r\n             *      from and array source, joining the data with the characters provided\r\n             *      between the two brackets. For example: `name[, ]` would provide a\r\n             *      comma-space separated list from the source array. If no characters\r\n             *      are provided between the brackets, the original array source is\r\n             *      returned.\r\n             *    * `()` - Function notation. Adding `()` to the end of a parameter will\r\n             *      execute a function of the name given. For example: `browser()` for a\r\n             *      simple function on the data source, `browser.version()` for a\r\n             *      function in a nested property or even `browser().version` to get an\r\n             *      object property if the function called returns an object. Note that\r\n             *      function notation is recommended for use in `render` rather than\r\n             *      `data` as it is much simpler to use as a renderer.\r\n             * * `null` - use the original data source for the row rather than plucking\r\n             *   data directly from it. This action has effects on two other\r\n             *   initialisation options:\r\n             *    * `defaultContent` - When null is given as the `data` option and\r\n             *      `defaultContent` is specified for the column, the value defined by\r\n             *      `defaultContent` will be used for the cell.\r\n             *    * `render` - When null is used for the `data` option and the `render`\r\n             *      option is specified for the column, the whole data source for the\r\n             *      row is used for the renderer.\r\n             * * `function` - the function given will be executed whenever DataTables\r\n             *   needs to set or get the data for a cell in the column. The function\r\n             *   takes three parameters:\r\n             *    * Parameters:\r\n             *      * `{array|object}` The data source for the row\r\n             *      * `{string}` The type call data requested - this will be 'set' when\r\n             *        setting data or 'filter', 'display', 'type', 'sort' or undefined\r\n             *        when gathering data. Note that when `undefined` is given for the\r\n             *        type DataTables expects to get the raw data for the object back<\r\n             *      * `{*}` Data to set when the second parameter is 'set'.\r\n             *    * Return:\r\n             *      * The return value from the function is not required when 'set' is\r\n             *        the type of call, but otherwise the return is what will be used\r\n             *        for the data requested.\r\n             *\r\n             * Note that `data` is a getter and setter option. If you just require\r\n             * formatting of data for output, you will likely want to use `render` which\r\n             * is simply a getter and thus simpler to use.\r\n             *\r\n             * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\r\n             * name change reflects the flexibility of this property and is consistent\r\n             * with the naming of mRender. If 'mDataProp' is given, then it will still\r\n             * be used by DataTables, as it automatically maps the old name to the new\r\n             * if required.\r\n             *\r\n             *  @type string|int|function|null\r\n             *  @default null <i>Use automatically calculated column index</i>\r\n             *\r\n             *  @name DataTable.defaults.column.data\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Read table data from objects\r\n             *    // JSON structure for each row:\r\n             *    //   {\r\n             *    //      \"engine\": {value},\r\n             *    //      \"browser\": {value},\r\n             *    //      \"platform\": {value},\r\n             *    //      \"version\": {value},\r\n             *    //      \"grade\": {value}\r\n             *    //   }\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"ajaxSource\": \"sources/objects.txt\",\r\n             *        \"columns\": [\r\n             *          { \"data\": \"engine\" },\r\n             *          { \"data\": \"browser\" },\r\n             *          { \"data\": \"platform\" },\r\n             *          { \"data\": \"version\" },\r\n             *          { \"data\": \"grade\" }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Read information from deeply nested objects\r\n             *    // JSON structure for each row:\r\n             *    //   {\r\n             *    //      \"engine\": {value},\r\n             *    //      \"browser\": {value},\r\n             *    //      \"platform\": {\r\n             *    //         \"inner\": {value}\r\n             *    //      },\r\n             *    //      \"details\": [\r\n             *    //         {value}, {value}\r\n             *    //      ]\r\n             *    //   }\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"ajaxSource\": \"sources/deep.txt\",\r\n             *        \"columns\": [\r\n             *          { \"data\": \"engine\" },\r\n             *          { \"data\": \"browser\" },\r\n             *          { \"data\": \"platform.inner\" },\r\n             *          { \"data\": \"details.0\" },\r\n             *          { \"data\": \"details.1\" }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `data` as a function to provide different information for\r\n             *    // sorting, filtering and display. In this case, currency (price)\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [ {\r\n             *          \"targets\": [ 0 ],\r\n             *          \"data\": function ( source, type, val ) {\r\n             *            if (type === 'set') {\r\n             *              source.price = val;\r\n             *              // Store the computed display and filter values for efficiency\r\n             *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\r\n             *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\r\n             *              return;\r\n             *            }\r\n             *            else if (type === 'display') {\r\n             *              return source.price_display;\r\n             *            }\r\n             *            else if (type === 'filter') {\r\n             *              return source.price_filter;\r\n             *            }\r\n             *            // 'sort', 'type' and undefined all just use the integer\r\n             *            return source.price;\r\n             *          }\r\n             *        } ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using default content\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [ {\r\n             *          \"targets\": [ 0 ],\r\n             *          \"data\": null,\r\n             *          \"defaultContent\": \"Click to edit\"\r\n             *        } ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using array notation - outputting a list from an array\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [ {\r\n             *          \"targets\": [ 0 ],\r\n             *          \"data\": \"name[, ]\"\r\n             *        } ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             */\r\n            \"mData\": null,\r\n        \r\n        \r\n            /**\r\n             * This property is the rendering partner to `data` and it is suggested that\r\n             * when you want to manipulate data for display (including filtering,\r\n             * sorting etc) without altering the underlying data for the table, use this\r\n             * property. `render` can be considered to be the the read only companion to\r\n             * `data` which is read / write (then as such more complex). Like `data`\r\n             * this option can be given in a number of different ways to effect its\r\n             * behaviour:\r\n             *\r\n             * * `integer` - treated as an array index for the data source. This is the\r\n             *   default that DataTables uses (incrementally increased for each column).\r\n             * * `string` - read an object property from the data source. There are\r\n             *   three 'special' options that can be used in the string to alter how\r\n             *   DataTables reads the data from the source object:\r\n             *    * `.` - Dotted Javascript notation. Just as you use a `.` in\r\n             *      Javascript to read from nested objects, so to can the options\r\n             *      specified in `data`. For example: `browser.version` or\r\n             *      `browser.name`. If your object parameter name contains a period, use\r\n             *      `\\\\` to escape it - i.e. `first\\\\.name`.\r\n             *    * `[]` - Array notation. DataTables can automatically combine data\r\n             *      from and array source, joining the data with the characters provided\r\n             *      between the two brackets. For example: `name[, ]` would provide a\r\n             *      comma-space separated list from the source array. If no characters\r\n             *      are provided between the brackets, the original array source is\r\n             *      returned.\r\n             *    * `()` - Function notation. Adding `()` to the end of a parameter will\r\n             *      execute a function of the name given. For example: `browser()` for a\r\n             *      simple function on the data source, `browser.version()` for a\r\n             *      function in a nested property or even `browser().version` to get an\r\n             *      object property if the function called returns an object.\r\n             * * `object` - use different data for the different data types requested by\r\n             *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\r\n             *   of the object is the data type the property refers to and the value can\r\n             *   defined using an integer, string or function using the same rules as\r\n             *   `render` normally does. Note that an `_` option _must_ be specified.\r\n             *   This is the default value to use if you haven't specified a value for\r\n             *   the data type requested by DataTables.\r\n             * * `function` - the function given will be executed whenever DataTables\r\n             *   needs to set or get the data for a cell in the column. The function\r\n             *   takes three parameters:\r\n             *    * Parameters:\r\n             *      * {array|object} The data source for the row (based on `data`)\r\n             *      * {string} The type call data requested - this will be 'filter',\r\n             *        'display', 'type' or 'sort'.\r\n             *      * {array|object} The full data source for the row (not based on\r\n             *        `data`)\r\n             *    * Return:\r\n             *      * The return value from the function is what will be used for the\r\n             *        data requested.\r\n             *\r\n             *  @type string|int|function|object|null\r\n             *  @default null Use the data source value.\r\n             *\r\n             *  @name DataTable.defaults.column.render\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Create a comma separated list from an array of objects\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"ajaxSource\": \"sources/deep.txt\",\r\n             *        \"columns\": [\r\n             *          { \"data\": \"engine\" },\r\n             *          { \"data\": \"browser\" },\r\n             *          {\r\n             *            \"data\": \"platform\",\r\n             *            \"render\": \"[, ].name\"\r\n             *          }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Execute a function to obtain data\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [ {\r\n             *          \"targets\": [ 0 ],\r\n             *          \"data\": null, // Use the full data source object for the renderer's source\r\n             *          \"render\": \"browserName()\"\r\n             *        } ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // As an object, extracting different data for the different types\r\n             *    // This would be used with a data source such as:\r\n             *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\r\n             *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\r\n             *    // (which has both forms) is used for filtering for if a user inputs either format, while\r\n             *    // the formatted phone number is the one that is shown in the table.\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [ {\r\n             *          \"targets\": [ 0 ],\r\n             *          \"data\": null, // Use the full data source object for the renderer's source\r\n             *          \"render\": {\r\n             *            \"_\": \"phone\",\r\n             *            \"filter\": \"phone_filter\",\r\n             *            \"display\": \"phone_display\"\r\n             *          }\r\n             *        } ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Use as a function to create a link from the data source\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [ {\r\n             *          \"targets\": [ 0 ],\r\n             *          \"data\": \"download_link\",\r\n             *          \"render\": function ( data, type, full ) {\r\n             *            return '<a href=\"'+data+'\">Download</a>';\r\n             *          }\r\n             *        } ]\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"mRender\": null,\r\n        \r\n        \r\n            /**\r\n             * Change the cell type created for the column - either TD cells or TH cells. This\r\n             * can be useful as TH cells have semantic meaning in the table body, allowing them\r\n             * to act as a header for a row (you may wish to add scope='row' to the TH elements).\r\n             *  @type string\r\n             *  @default td\r\n             *\r\n             *  @name DataTable.defaults.column.cellType\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Make the first column use TH cells\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [ {\r\n             *          \"targets\": [ 0 ],\r\n             *          \"cellType\": \"th\"\r\n             *        } ]\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sCellType\": \"td\",\r\n        \r\n        \r\n            /**\r\n             * Class to give to each cell in this column.\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             *\r\n             *  @name DataTable.defaults.column.class\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [\r\n             *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columns\": [\r\n             *          { \"class\": \"my_class\" },\r\n             *          null,\r\n             *          null,\r\n             *          null,\r\n             *          null\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sClass\": \"\",\r\n        \r\n            /**\r\n             * When DataTables calculates the column widths to assign to each column,\r\n             * it finds the longest string in each column and then constructs a\r\n             * temporary table and reads the widths from that. The problem with this\r\n             * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\r\n             * string - thus the calculation can go wrong (doing it properly and putting\r\n             * it into an DOM object and measuring that is horribly(!) slow). Thus as\r\n             * a \"work around\" we provide this option. It will append its value to the\r\n             * text that is found to be the longest string for the column - i.e. padding.\r\n             * Generally you shouldn't need this!\r\n             *  @type string\r\n             *  @default <i>Empty string<i>\r\n             *\r\n             *  @name DataTable.defaults.column.contentPadding\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columns\": [\r\n             *          null,\r\n             *          null,\r\n             *          null,\r\n             *          {\r\n             *            \"contentPadding\": \"mmm\"\r\n             *          }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sContentPadding\": \"\",\r\n        \r\n        \r\n            /**\r\n             * Allows a default value to be given for a column's data, and will be used\r\n             * whenever a null data source is encountered (this can be because `data`\r\n             * is set to null, or because the data source itself is null).\r\n             *  @type string\r\n             *  @default null\r\n             *\r\n             *  @name DataTable.defaults.column.defaultContent\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [\r\n             *          {\r\n             *            \"data\": null,\r\n             *            \"defaultContent\": \"Edit\",\r\n             *            \"targets\": [ -1 ]\r\n             *          }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columns\": [\r\n             *          null,\r\n             *          null,\r\n             *          null,\r\n             *          {\r\n             *            \"data\": null,\r\n             *            \"defaultContent\": \"Edit\"\r\n             *          }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sDefaultContent\": null,\r\n        \r\n        \r\n            /**\r\n             * This parameter is only used in DataTables' server-side processing. It can\r\n             * be exceptionally useful to know what columns are being displayed on the\r\n             * client side, and to map these to database fields. When defined, the names\r\n             * also allow DataTables to reorder information from the server if it comes\r\n             * back in an unexpected order (i.e. if you switch your columns around on the\r\n             * client-side, your server-side code does not also need updating).\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             *\r\n             *  @name DataTable.defaults.column.name\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [\r\n             *          { \"name\": \"engine\", \"targets\": [ 0 ] },\r\n             *          { \"name\": \"browser\", \"targets\": [ 1 ] },\r\n             *          { \"name\": \"platform\", \"targets\": [ 2 ] },\r\n             *          { \"name\": \"version\", \"targets\": [ 3 ] },\r\n             *          { \"name\": \"grade\", \"targets\": [ 4 ] }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columns\": [\r\n             *          { \"name\": \"engine\" },\r\n             *          { \"name\": \"browser\" },\r\n             *          { \"name\": \"platform\" },\r\n             *          { \"name\": \"version\" },\r\n             *          { \"name\": \"grade\" }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sName\": \"\",\r\n        \r\n        \r\n            /**\r\n             * Defines a data source type for the ordering which can be used to read\r\n             * real-time information from the table (updating the internally cached\r\n             * version) prior to ordering. This allows ordering to occur on user\r\n             * editable elements such as form inputs.\r\n             *  @type string\r\n             *  @default std\r\n             *\r\n             *  @name DataTable.defaults.column.orderDataType\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [\r\n             *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\r\n             *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\r\n             *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\r\n             *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columns\": [\r\n             *          null,\r\n             *          null,\r\n             *          { \"orderDataType\": \"dom-text\" },\r\n             *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\r\n             *          { \"orderDataType\": \"dom-select\" },\r\n             *          { \"orderDataType\": \"dom-checkbox\" }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sSortDataType\": \"std\",\r\n        \r\n        \r\n            /**\r\n             * The title of this column.\r\n             *  @type string\r\n             *  @default null <i>Derived from the 'TH' value for this column in the\r\n             *    original HTML table.</i>\r\n             *\r\n             *  @name DataTable.defaults.column.title\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [\r\n             *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columns\": [\r\n             *          { \"title\": \"My column title\" },\r\n             *          null,\r\n             *          null,\r\n             *          null,\r\n             *          null\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sTitle\": null,\r\n        \r\n        \r\n            /**\r\n             * The type allows you to specify how the data for this column will be\r\n             * ordered. Four types (string, numeric, date and html (which will strip\r\n             * HTML tags before ordering)) are currently available. Note that only date\r\n             * formats understood by Javascript's Date() object will be accepted as type\r\n             * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\r\n             * 'numeric', 'date' or 'html' (by default). Further types can be adding\r\n             * through plug-ins.\r\n             *  @type string\r\n             *  @default null <i>Auto-detected from raw data</i>\r\n             *\r\n             *  @name DataTable.defaults.column.type\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [\r\n             *          { \"type\": \"html\", \"targets\": [ 0 ] }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columns\": [\r\n             *          { \"type\": \"html\" },\r\n             *          null,\r\n             *          null,\r\n             *          null,\r\n             *          null\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sType\": null,\r\n        \r\n        \r\n            /**\r\n             * Defining the width of the column, this parameter may take any CSS value\r\n             * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\r\n             * been given a specific width through this interface ensuring that the table\r\n             * remains readable.\r\n             *  @type string\r\n             *  @default null <i>Automatic</i>\r\n             *\r\n             *  @name DataTable.defaults.column.width\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columnDefs\": [\r\n             *          { \"width\": \"20%\", \"targets\": [ 0 ] }\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"columns\": [\r\n             *          { \"width\": \"20%\" },\r\n             *          null,\r\n             *          null,\r\n             *          null,\r\n             *          null\r\n             *        ]\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sWidth\": null\r\n        };\r\n        \r\n        _fnHungarianMap( DataTable.defaults.column );\r\n        \r\n        \r\n        \r\n        /**\r\n         * DataTables settings object - this holds all the information needed for a\r\n         * given table, including configuration, data and current application of the\r\n         * table options. DataTables does not have a single instance for each DataTable\r\n         * with the settings attached to that instance, but rather instances of the\r\n         * DataTable \"class\" are created on-the-fly as needed (typically by a\r\n         * $().dataTable() call) and the settings object is then applied to that\r\n         * instance.\r\n         *\r\n         * Note that this object is related to {@link DataTable.defaults} but this\r\n         * one is the internal data store for DataTables's cache of columns. It should\r\n         * NOT be manipulated outside of DataTables. Any configuration should be done\r\n         * through the initialisation options.\r\n         *  @namespace\r\n         *  @todo Really should attach the settings object to individual instances so we\r\n         *    don't need to create new instances on each $().dataTable() call (if the\r\n         *    table already exists). It would also save passing oSettings around and\r\n         *    into every single function. However, this is a very significant\r\n         *    architecture change for DataTables and will almost certainly break\r\n         *    backwards compatibility with older installations. This is something that\r\n         *    will be done in 2.0.\r\n         */\r\n        DataTable.models.oSettings = {\r\n            /**\r\n             * Primary features of DataTables and their enablement state.\r\n             *  @namespace\r\n             */\r\n            \"oFeatures\": {\r\n        \r\n                /**\r\n                 * Flag to say if DataTables should automatically try to calculate the\r\n                 * optimum table and columns widths (true) or not (false).\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bAutoWidth\": null,\r\n        \r\n                /**\r\n                 * Delay the creation of TR and TD elements until they are actually\r\n                 * needed by a driven page draw. This can give a significant speed\r\n                 * increase for Ajax source and Javascript source data, but makes no\r\n                 * difference at all for DOM and server-side processing tables.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bDeferRender\": null,\r\n        \r\n                /**\r\n                 * Enable filtering on the table or not. Note that if this is disabled\r\n                 * then there is no filtering at all on the table, including fnFilter.\r\n                 * To just remove the filtering input use sDom and remove the 'f' option.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bFilter\": null,\r\n        \r\n                /**\r\n                 * Table information element (the 'Showing x of y records' div) enable\r\n                 * flag.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bInfo\": null,\r\n        \r\n                /**\r\n                 * Present a user control allowing the end user to change the page size\r\n                 * when pagination is enabled.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bLengthChange\": null,\r\n        \r\n                /**\r\n                 * Pagination enabled or not. Note that if this is disabled then length\r\n                 * changing must also be disabled.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bPaginate\": null,\r\n        \r\n                /**\r\n                 * Processing indicator enable flag whenever DataTables is enacting a\r\n                 * user request - typically an Ajax request for server-side processing.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bProcessing\": null,\r\n        \r\n                /**\r\n                 * Server-side processing enabled flag - when enabled DataTables will\r\n                 * get all data from the server for every draw - there is no filtering,\r\n                 * sorting or paging done on the client-side.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bServerSide\": null,\r\n        \r\n                /**\r\n                 * Sorting enablement flag.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bSort\": null,\r\n        \r\n                /**\r\n                 * Multi-column sorting\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bSortMulti\": null,\r\n        \r\n                /**\r\n                 * Apply a class to the columns which are being sorted to provide a\r\n                 * visual highlight or not. This can slow things down when enabled since\r\n                 * there is a lot of DOM interaction.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bSortClasses\": null,\r\n        \r\n                /**\r\n                 * State saving enablement flag.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bStateSave\": null\r\n            },\r\n        \r\n        \r\n            /**\r\n             * Scrolling settings for a table.\r\n             *  @namespace\r\n             */\r\n            \"oScroll\": {\r\n                /**\r\n                 * When the table is shorter in height than sScrollY, collapse the\r\n                 * table container down to the height of the table (when true).\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bCollapse\": null,\r\n        \r\n                /**\r\n                 * Width of the scrollbar for the web-browser's platform. Calculated\r\n                 * during table initialisation.\r\n                 *  @type int\r\n                 *  @default 0\r\n                 */\r\n                \"iBarWidth\": 0,\r\n        \r\n                /**\r\n                 * Viewport width for horizontal scrolling. Horizontal scrolling is\r\n                 * disabled if an empty string.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type string\r\n                 */\r\n                \"sX\": null,\r\n        \r\n                /**\r\n                 * Width to expand the table to when using x-scrolling. Typically you\r\n                 * should not need to use this.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type string\r\n                 *  @deprecated\r\n                 */\r\n                \"sXInner\": null,\r\n        \r\n                /**\r\n                 * Viewport height for vertical scrolling. Vertical scrolling is disabled\r\n                 * if an empty string.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type string\r\n                 */\r\n                \"sY\": null\r\n            },\r\n        \r\n            /**\r\n             * Language information for the table.\r\n             *  @namespace\r\n             *  @extends DataTable.defaults.oLanguage\r\n             */\r\n            \"oLanguage\": {\r\n                /**\r\n                 * Information callback function. See\r\n                 * {@link DataTable.defaults.fnInfoCallback}\r\n                 *  @type function\r\n                 *  @default null\r\n                 */\r\n                \"fnInfoCallback\": null\r\n            },\r\n        \r\n            /**\r\n             * Browser support parameters\r\n             *  @namespace\r\n             */\r\n            \"oBrowser\": {\r\n                /**\r\n                 * Indicate if the browser incorrectly calculates width:100% inside a\r\n                 * scrolling element (IE6/7)\r\n                 *  @type boolean\r\n                 *  @default false\r\n                 */\r\n                \"bScrollOversize\": false,\r\n        \r\n                /**\r\n                 * Determine if the vertical scrollbar is on the right or left of the\r\n                 * scrolling container - needed for rtl language layout, although not\r\n                 * all browsers move the scrollbar (Safari).\r\n                 *  @type boolean\r\n                 *  @default false\r\n                 */\r\n                \"bScrollbarLeft\": false,\r\n        \r\n                /**\r\n                 * Flag for if `getBoundingClientRect` is fully supported or not\r\n                 *  @type boolean\r\n                 *  @default false\r\n                 */\r\n                \"bBounding\": false,\r\n        \r\n                /**\r\n                 * Browser scrollbar width\r\n                 *  @type integer\r\n                 *  @default 0\r\n                 */\r\n                \"barWidth\": 0\r\n            },\r\n        \r\n        \r\n            \"ajax\": null,\r\n        \r\n        \r\n            /**\r\n             * Array referencing the nodes which are used for the features. The\r\n             * parameters of this object match what is allowed by sDom - i.e.\r\n             *   <ul>\r\n             *     <li>'l' - Length changing</li>\r\n             *     <li>'f' - Filtering input</li>\r\n             *     <li>'t' - The table!</li>\r\n             *     <li>'i' - Information</li>\r\n             *     <li>'p' - Pagination</li>\r\n             *     <li>'r' - pRocessing</li>\r\n             *   </ul>\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aanFeatures\": [],\r\n        \r\n            /**\r\n             * Store data information - see {@link DataTable.models.oRow} for detailed\r\n             * information.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoData\": [],\r\n        \r\n            /**\r\n             * Array of indexes which are in the current display (after filtering etc)\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aiDisplay\": [],\r\n        \r\n            /**\r\n             * Array of indexes for display - no filtering\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aiDisplayMaster\": [],\r\n        \r\n            /**\r\n             * Map of row ids to data indexes\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            \"aIds\": {},\r\n        \r\n            /**\r\n             * Store information about each column that is in use\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoColumns\": [],\r\n        \r\n            /**\r\n             * Store information about the table's header\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoHeader\": [],\r\n        \r\n            /**\r\n             * Store information about the table's footer\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoFooter\": [],\r\n        \r\n            /**\r\n             * Store the applied global search information in case we want to force a\r\n             * research or compare the old search to a new one.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @namespace\r\n             *  @extends DataTable.models.oSearch\r\n             */\r\n            \"oPreviousSearch\": {},\r\n        \r\n            /**\r\n             * Store the applied search for each column - see\r\n             * {@link DataTable.models.oSearch} for the format that is used for the\r\n             * filtering information for each column.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoPreSearchCols\": [],\r\n        \r\n            /**\r\n             * Sorting that is applied to the table. Note that the inner arrays are\r\n             * used in the following manner:\r\n             * <ul>\r\n             *   <li>Index 0 - column number</li>\r\n             *   <li>Index 1 - current sorting direction</li>\r\n             * </ul>\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @todo These inner arrays should really be objects\r\n             */\r\n            \"aaSorting\": null,\r\n        \r\n            /**\r\n             * Sorting that is always applied to the table (i.e. prefixed in front of\r\n             * aaSorting).\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aaSortingFixed\": [],\r\n        \r\n            /**\r\n             * Classes to use for the striping of a table.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"asStripeClasses\": null,\r\n        \r\n            /**\r\n             * If restoring a table - we should restore its striping classes as well\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"asDestroyStripes\": [],\r\n        \r\n            /**\r\n             * If restoring a table - we should restore its width\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"sDestroyWidth\": 0,\r\n        \r\n            /**\r\n             * Callback functions array for every time a row is inserted (i.e. on a draw).\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoRowCallback\": [],\r\n        \r\n            /**\r\n             * Callback functions for the header on each draw.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoHeaderCallback\": [],\r\n        \r\n            /**\r\n             * Callback function for the footer on each draw.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoFooterCallback\": [],\r\n        \r\n            /**\r\n             * Array of callback functions for draw callback functions\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoDrawCallback\": [],\r\n        \r\n            /**\r\n             * Array of callback functions for row created function\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoRowCreatedCallback\": [],\r\n        \r\n            /**\r\n             * Callback functions for just before the table is redrawn. A return of\r\n             * false will be used to cancel the draw.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoPreDrawCallback\": [],\r\n        \r\n            /**\r\n             * Callback functions for when the table has been initialised.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoInitComplete\": [],\r\n        \r\n        \r\n            /**\r\n             * Callbacks for modifying the settings to be stored for state saving, prior to\r\n             * saving state.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateSaveParams\": [],\r\n        \r\n            /**\r\n             * Callbacks for modifying the settings that have been stored for state saving\r\n             * prior to using the stored values to restore the state.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateLoadParams\": [],\r\n        \r\n            /**\r\n             * Callbacks for operating on the settings object once the saved state has been\r\n             * loaded\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateLoaded\": [],\r\n        \r\n            /**\r\n             * Cache the table ID for quick access\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             */\r\n            \"sTableId\": \"\",\r\n        \r\n            /**\r\n             * The TABLE node for the main table\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTable\": null,\r\n        \r\n            /**\r\n             * Permanent ref to the thead element\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTHead\": null,\r\n        \r\n            /**\r\n             * Permanent ref to the tfoot element - if it exists\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTFoot\": null,\r\n        \r\n            /**\r\n             * Permanent ref to the tbody element\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTBody\": null,\r\n        \r\n            /**\r\n             * Cache the wrapper node (contains all DataTables controlled elements)\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTableWrapper\": null,\r\n        \r\n            /**\r\n             * Indicate if when using server-side processing the loading of data\r\n             * should be deferred until the second draw.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bDeferLoading\": false,\r\n        \r\n            /**\r\n             * Indicate if all required information has been read in\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bInitialised\": false,\r\n        \r\n            /**\r\n             * Information about open rows. Each object in the array has the parameters\r\n             * 'nTr' and 'nParent'\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoOpenRows\": [],\r\n        \r\n            /**\r\n             * Dictate the positioning of DataTables' control elements - see\r\n             * {@link DataTable.model.oInit.sDom}.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sDom\": null,\r\n        \r\n            /**\r\n             * Search delay (in mS)\r\n             *  @type integer\r\n             *  @default null\r\n             */\r\n            \"searchDelay\": null,\r\n        \r\n            /**\r\n             * Which type of pagination should be used.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             *  @default two_button\r\n             */\r\n            \"sPaginationType\": \"two_button\",\r\n        \r\n            /**\r\n             * The state duration (for `stateSave`) in seconds.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"iStateDuration\": 0,\r\n        \r\n            /**\r\n             * Array of callback functions for state saving. Each array element is an\r\n             * object with the following parameters:\r\n             *   <ul>\r\n             *     <li>function:fn - function to call. Takes two parameters, oSettings\r\n             *       and the JSON string to save that has been thus far created. Returns\r\n             *       a JSON string to be inserted into a json object\r\n             *       (i.e. '\"param\": [ 0, 1, 2]')</li>\r\n             *     <li>string:sName - name of callback</li>\r\n             *   </ul>\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateSave\": [],\r\n        \r\n            /**\r\n             * Array of callback functions for state loading. Each array element is an\r\n             * object with the following parameters:\r\n             *   <ul>\r\n             *     <li>function:fn - function to call. Takes two parameters, oSettings\r\n             *       and the object stored. May return false to cancel state loading</li>\r\n             *     <li>string:sName - name of callback</li>\r\n             *   </ul>\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateLoad\": [],\r\n        \r\n            /**\r\n             * State that was saved. Useful for back reference\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"oSavedState\": null,\r\n        \r\n            /**\r\n             * State that was loaded. Useful for back reference\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"oLoadedState\": null,\r\n        \r\n            /**\r\n             * Source url for AJAX data for the table.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sAjaxSource\": null,\r\n        \r\n            /**\r\n             * Property from a given object from which to read the table data from. This\r\n             * can be an empty string (when not server-side processing), in which case\r\n             * it is  assumed an an array is given directly.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             */\r\n            \"sAjaxDataProp\": null,\r\n        \r\n            /**\r\n             * The last jQuery XHR object that was used for server-side data gathering.\r\n             * This can be used for working with the XHR information in one of the\r\n             * callbacks\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"jqXHR\": null,\r\n        \r\n            /**\r\n             * JSON returned from the server in the last Ajax request\r\n             *  @type object\r\n             *  @default undefined\r\n             */\r\n            \"json\": undefined,\r\n        \r\n            /**\r\n             * Data submitted as part of the last Ajax request\r\n             *  @type object\r\n             *  @default undefined\r\n             */\r\n            \"oAjaxData\": undefined,\r\n        \r\n            /**\r\n             * Function to get the server-side data.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type function\r\n             */\r\n            \"fnServerData\": null,\r\n        \r\n            /**\r\n             * Functions which are called prior to sending an Ajax request so extra\r\n             * parameters can easily be sent to the server\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoServerParams\": [],\r\n        \r\n            /**\r\n             * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\r\n             * required).\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             */\r\n            \"sServerMethod\": null,\r\n        \r\n            /**\r\n             * Format numbers for display.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type function\r\n             */\r\n            \"fnFormatNumber\": null,\r\n        \r\n            /**\r\n             * List of options that can be used for the user selectable length menu.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aLengthMenu\": null,\r\n        \r\n            /**\r\n             * Counter for the draws that the table does. Also used as a tracker for\r\n             * server-side processing\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"iDraw\": 0,\r\n        \r\n            /**\r\n             * Indicate if a redraw is being done - useful for Ajax\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bDrawing\": false,\r\n        \r\n            /**\r\n             * Draw index (iDraw) of the last error when parsing the returned data\r\n             *  @type int\r\n             *  @default -1\r\n             */\r\n            \"iDrawError\": -1,\r\n        \r\n            /**\r\n             * Paging display length\r\n             *  @type int\r\n             *  @default 10\r\n             */\r\n            \"_iDisplayLength\": 10,\r\n        \r\n            /**\r\n             * Paging start point - aiDisplay index\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"_iDisplayStart\": 0,\r\n        \r\n            /**\r\n             * Server-side processing - number of records in the result set\r\n             * (i.e. before filtering), Use fnRecordsTotal rather than\r\n             * this property to get the value of the number of records, regardless of\r\n             * the server-side processing setting.\r\n             *  @type int\r\n             *  @default 0\r\n             *  @private\r\n             */\r\n            \"_iRecordsTotal\": 0,\r\n        \r\n            /**\r\n             * Server-side processing - number of records in the current display set\r\n             * (i.e. after filtering). Use fnRecordsDisplay rather than\r\n             * this property to get the value of the number of records, regardless of\r\n             * the server-side processing setting.\r\n             *  @type boolean\r\n             *  @default 0\r\n             *  @private\r\n             */\r\n            \"_iRecordsDisplay\": 0,\r\n        \r\n            /**\r\n             * The classes to use for the table\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            \"oClasses\": {},\r\n        \r\n            /**\r\n             * Flag attached to the settings object so you can check in the draw\r\n             * callback if filtering has been done in the draw. Deprecated in favour of\r\n             * events.\r\n             *  @type boolean\r\n             *  @default false\r\n             *  @deprecated\r\n             */\r\n            \"bFiltered\": false,\r\n        \r\n            /**\r\n             * Flag attached to the settings object so you can check in the draw\r\n             * callback if sorting has been done in the draw. Deprecated in favour of\r\n             * events.\r\n             *  @type boolean\r\n             *  @default false\r\n             *  @deprecated\r\n             */\r\n            \"bSorted\": false,\r\n        \r\n            /**\r\n             * Indicate that if multiple rows are in the header and there is more than\r\n             * one unique cell per column, if the top one (true) or bottom one (false)\r\n             * should be used for sorting / title by DataTables.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bSortCellsTop\": null,\r\n        \r\n            /**\r\n             * Initialisation object that is used for the table\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"oInit\": null,\r\n        \r\n            /**\r\n             * Destroy callback functions - for plug-ins to attach themselves to the\r\n             * destroy so they can clean up markup and events.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoDestroyCallback\": [],\r\n        \r\n        \r\n            /**\r\n             * Get the number of records in the current record set, before filtering\r\n             *  @type function\r\n             */\r\n            \"fnRecordsTotal\": function ()\r\n            {\r\n                return _fnDataSource( this ) == 'ssp' ?\r\n                    this._iRecordsTotal * 1 :\r\n                    this.aiDisplayMaster.length;\r\n            },\r\n        \r\n            /**\r\n             * Get the number of records in the current record set, after filtering\r\n             *  @type function\r\n             */\r\n            \"fnRecordsDisplay\": function ()\r\n            {\r\n                return _fnDataSource( this ) == 'ssp' ?\r\n                    this._iRecordsDisplay * 1 :\r\n                    this.aiDisplay.length;\r\n            },\r\n        \r\n            /**\r\n             * Get the display end point - aiDisplay index\r\n             *  @type function\r\n             */\r\n            \"fnDisplayEnd\": function ()\r\n            {\r\n                var\r\n                    len      = this._iDisplayLength,\r\n                    start    = this._iDisplayStart,\r\n                    calc     = start + len,\r\n                    records  = this.aiDisplay.length,\r\n                    features = this.oFeatures,\r\n                    paginate = features.bPaginate;\r\n        \r\n                if ( features.bServerSide ) {\r\n                    return paginate === false || len === -1 ?\r\n                        start + records :\r\n                        Math.min( start+len, this._iRecordsDisplay );\r\n                }\r\n                else {\r\n                    return ! paginate || calc>records || len===-1 ?\r\n                        records :\r\n                        calc;\r\n                }\r\n            },\r\n        \r\n            /**\r\n             * The DataTables object for this table\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"oInstance\": null,\r\n        \r\n            /**\r\n             * Unique identifier for each instance of the DataTables object. If there\r\n             * is an ID on the table node, then it takes that value, otherwise an\r\n             * incrementing internal counter is used.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sInstance\": null,\r\n        \r\n            /**\r\n             * tabindex attribute value that is added to DataTables control elements, allowing\r\n             * keyboard navigation of the table and its controls.\r\n             */\r\n            \"iTabIndex\": 0,\r\n        \r\n            /**\r\n             * DIV container for the footer scrolling table if scrolling\r\n             */\r\n            \"nScrollHead\": null,\r\n        \r\n            /**\r\n             * DIV container for the footer scrolling table if scrolling\r\n             */\r\n            \"nScrollFoot\": null,\r\n        \r\n            /**\r\n             * Last applied sort\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aLastSort\": [],\r\n        \r\n            /**\r\n             * Stored plug-in instances\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            \"oPlugins\": {},\r\n        \r\n            /**\r\n             * Function used to get a row's id from the row's data\r\n             *  @type function\r\n             *  @default null\r\n             */\r\n            \"rowIdFn\": null,\r\n        \r\n            /**\r\n             * Data location where to store a row's id\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"rowId\": null\r\n        };\r\n        \r\n        /**\r\n         * Extension object for DataTables that is used to provide all extension\r\n         * options.\r\n         *\r\n         * Note that the `DataTable.ext` object is available through\r\n         * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\r\n         * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\r\n         *  @namespace\r\n         *  @extends DataTable.models.ext\r\n         */\r\n        \r\n        \r\n        /**\r\n         * DataTables extensions\r\n         * \r\n         * This namespace acts as a collection area for plug-ins that can be used to\r\n         * extend DataTables capabilities. Indeed many of the build in methods\r\n         * use this method to provide their own capabilities (sorting methods for\r\n         * example).\r\n         *\r\n         * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\r\n         * reasons\r\n         *\r\n         *  @namespace\r\n         */\r\n        DataTable.ext = _ext = {\r\n            /**\r\n             * Buttons. For use with the Buttons extension for DataTables. This is\r\n             * defined here so other extensions can define buttons regardless of load\r\n             * order. It is _not_ used by DataTables core.\r\n             *\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            buttons: {},\r\n        \r\n        \r\n            /**\r\n             * Element class names\r\n             *\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            classes: {},\r\n        \r\n        \r\n            /**\r\n             * DataTables build type (expanded by the download builder)\r\n             *\r\n             *  @type string\r\n             */\r\n            builder: \"-source-\",\r\n        \r\n        \r\n            /**\r\n             * Error reporting.\r\n             * \r\n             * How should DataTables report an error. Can take the value 'alert',\r\n             * 'throw', 'none' or a function.\r\n             *\r\n             *  @type string|function\r\n             *  @default alert\r\n             */\r\n            errMode: \"alert\",\r\n        \r\n        \r\n            /**\r\n             * Feature plug-ins.\r\n             * \r\n             * This is an array of objects which describe the feature plug-ins that are\r\n             * available to DataTables. These feature plug-ins are then available for\r\n             * use through the `dom` initialisation option.\r\n             * \r\n             * Each feature plug-in is described by an object which must have the\r\n             * following properties:\r\n             * \r\n             * * `fnInit` - function that is used to initialise the plug-in,\r\n             * * `cFeature` - a character so the feature can be enabled by the `dom`\r\n             *   instillation option. This is case sensitive.\r\n             *\r\n             * The `fnInit` function has the following input parameters:\r\n             *\r\n             * 1. `{object}` DataTables settings object: see\r\n             *    {@link DataTable.models.oSettings}\r\n             *\r\n             * And the following return is expected:\r\n             * \r\n             * * {node|null} The element which contains your feature. Note that the\r\n             *   return may also be void if your plug-in does not require to inject any\r\n             *   DOM elements into DataTables control (`dom`) - for example this might\r\n             *   be useful when developing a plug-in which allows table control via\r\n             *   keyboard entry\r\n             *\r\n             *  @type array\r\n             *\r\n             *  @example\r\n             *    $.fn.dataTable.ext.features.push( {\r\n             *      \"fnInit\": function( oSettings ) {\r\n             *        return new TableTools( { \"oDTSettings\": oSettings } );\r\n             *      },\r\n             *      \"cFeature\": \"T\"\r\n             *    } );\r\n             */\r\n            feature: [],\r\n        \r\n        \r\n            /**\r\n             * Row searching.\r\n             * \r\n             * This method of searching is complimentary to the default type based\r\n             * searching, and a lot more comprehensive as it allows you complete control\r\n             * over the searching logic. Each element in this array is a function\r\n             * (parameters described below) that is called for every row in the table,\r\n             * and your logic decides if it should be included in the searching data set\r\n             * or not.\r\n             *\r\n             * Searching functions have the following input parameters:\r\n             *\r\n             * 1. `{object}` DataTables settings object: see\r\n             *    {@link DataTable.models.oSettings}\r\n             * 2. `{array|object}` Data for the row to be processed (same as the\r\n             *    original format that was passed in as the data source, or an array\r\n             *    from a DOM data source\r\n             * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\r\n             *    can be useful to retrieve the `TR` element if you need DOM interaction.\r\n             *\r\n             * And the following return is expected:\r\n             *\r\n             * * {boolean} Include the row in the searched result set (true) or not\r\n             *   (false)\r\n             *\r\n             * Note that as with the main search ability in DataTables, technically this\r\n             * is \"filtering\", since it is subtractive. However, for consistency in\r\n             * naming we call it searching here.\r\n             *\r\n             *  @type array\r\n             *  @default []\r\n             *\r\n             *  @example\r\n             *    // The following example shows custom search being applied to the\r\n             *    // fourth column (i.e. the data[3] index) based on two input values\r\n             *    // from the end-user, matching the data in a certain range.\r\n             *    $.fn.dataTable.ext.search.push(\r\n             *      function( settings, data, dataIndex ) {\r\n             *        var min = document.getElementById('min').value * 1;\r\n             *        var max = document.getElementById('max').value * 1;\r\n             *        var version = data[3] == \"-\" ? 0 : data[3]*1;\r\n             *\r\n             *        if ( min == \"\" && max == \"\" ) {\r\n             *          return true;\r\n             *        }\r\n             *        else if ( min == \"\" && version < max ) {\r\n             *          return true;\r\n             *        }\r\n             *        else if ( min < version && \"\" == max ) {\r\n             *          return true;\r\n             *        }\r\n             *        else if ( min < version && version < max ) {\r\n             *          return true;\r\n             *        }\r\n             *        return false;\r\n             *      }\r\n             *    );\r\n             */\r\n            search: [],\r\n        \r\n        \r\n            /**\r\n             * Selector extensions\r\n             *\r\n             * The `selector` option can be used to extend the options available for the\r\n             * selector modifier options (`selector-modifier` object data type) that\r\n             * each of the three built in selector types offer (row, column and cell +\r\n             * their plural counterparts). For example the Select extension uses this\r\n             * mechanism to provide an option to select only rows, columns and cells\r\n             * that have been marked as selected by the end user (`{selected: true}`),\r\n             * which can be used in conjunction with the existing built in selector\r\n             * options.\r\n             *\r\n             * Each property is an array to which functions can be pushed. The functions\r\n             * take three attributes:\r\n             *\r\n             * * Settings object for the host table\r\n             * * Options object (`selector-modifier` object type)\r\n             * * Array of selected item indexes\r\n             *\r\n             * The return is an array of the resulting item indexes after the custom\r\n             * selector has been applied.\r\n             *\r\n             *  @type object\r\n             */\r\n            selector: {\r\n                cell: [],\r\n                column: [],\r\n                row: []\r\n            },\r\n        \r\n        \r\n            /**\r\n             * Internal functions, exposed for used in plug-ins.\r\n             * \r\n             * Please note that you should not need to use the internal methods for\r\n             * anything other than a plug-in (and even then, try to avoid if possible).\r\n             * The internal function may change between releases.\r\n             *\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            internal: {},\r\n        \r\n        \r\n            /**\r\n             * Legacy configuration options. Enable and disable legacy options that\r\n             * are available in DataTables.\r\n             *\r\n             *  @type object\r\n             */\r\n            legacy: {\r\n                /**\r\n                 * Enable / disable DataTables 1.9 compatible server-side processing\r\n                 * requests\r\n                 *\r\n                 *  @type boolean\r\n                 *  @default null\r\n                 */\r\n                ajax: null\r\n            },\r\n        \r\n        \r\n            /**\r\n             * Pagination plug-in methods.\r\n             * \r\n             * Each entry in this object is a function and defines which buttons should\r\n             * be shown by the pagination rendering method that is used for the table:\r\n             * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\r\n             * buttons are displayed in the document, while the functions here tell it\r\n             * what buttons to display. This is done by returning an array of button\r\n             * descriptions (what each button will do).\r\n             *\r\n             * Pagination types (the four built in options and any additional plug-in\r\n             * options defined here) can be used through the `paginationType`\r\n             * initialisation parameter.\r\n             *\r\n             * The functions defined take two parameters:\r\n             *\r\n             * 1. `{int} page` The current page index\r\n             * 2. `{int} pages` The number of pages in the table\r\n             *\r\n             * Each function is expected to return an array where each element of the\r\n             * array can be one of:\r\n             *\r\n             * * `first` - Jump to first page when activated\r\n             * * `last` - Jump to last page when activated\r\n             * * `previous` - Show previous page when activated\r\n             * * `next` - Show next page when activated\r\n             * * `{int}` - Show page of the index given\r\n             * * `{array}` - A nested array containing the above elements to add a\r\n             *   containing 'DIV' element (might be useful for styling).\r\n             *\r\n             * Note that DataTables v1.9- used this object slightly differently whereby\r\n             * an object with two functions would be defined for each plug-in. That\r\n             * ability is still supported by DataTables 1.10+ to provide backwards\r\n             * compatibility, but this option of use is now decremented and no longer\r\n             * documented in DataTables 1.10+.\r\n             *\r\n             *  @type object\r\n             *  @default {}\r\n             *\r\n             *  @example\r\n             *    // Show previous, next and current page buttons only\r\n             *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\r\n             *      return [ 'previous', page, 'next' ];\r\n             *    };\r\n             */\r\n            pager: {},\r\n        \r\n        \r\n            renderer: {\r\n                pageButton: {},\r\n                header: {}\r\n            },\r\n        \r\n        \r\n            /**\r\n             * Ordering plug-ins - custom data source\r\n             * \r\n             * The extension options for ordering of data available here is complimentary\r\n             * to the default type based ordering that DataTables typically uses. It\r\n             * allows much greater control over the the data that is being used to\r\n             * order a column, but is necessarily therefore more complex.\r\n             * \r\n             * This type of ordering is useful if you want to do ordering based on data\r\n             * live from the DOM (for example the contents of an 'input' element) rather\r\n             * than just the static string that DataTables knows of.\r\n             * \r\n             * The way these plug-ins work is that you create an array of the values you\r\n             * wish to be ordering for the column in question and then return that\r\n             * array. The data in the array much be in the index order of the rows in\r\n             * the table (not the currently ordering order!). Which order data gathering\r\n             * function is run here depends on the `dt-init columns.orderDataType`\r\n             * parameter that is used for the column (if any).\r\n             *\r\n             * The functions defined take two parameters:\r\n             *\r\n             * 1. `{object}` DataTables settings object: see\r\n             *    {@link DataTable.models.oSettings}\r\n             * 2. `{int}` Target column index\r\n             *\r\n             * Each function is expected to return an array:\r\n             *\r\n             * * `{array}` Data for the column to be ordering upon\r\n             *\r\n             *  @type array\r\n             *\r\n             *  @example\r\n             *    // Ordering using `input` node values\r\n             *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\r\n             *    {\r\n             *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\r\n             *        return $('input', td).val();\r\n             *      } );\r\n             *    }\r\n             */\r\n            order: {},\r\n        \r\n        \r\n            /**\r\n             * Type based plug-ins.\r\n             *\r\n             * Each column in DataTables has a type assigned to it, either by automatic\r\n             * detection or by direct assignment using the `type` option for the column.\r\n             * The type of a column will effect how it is ordering and search (plug-ins\r\n             * can also make use of the column type if required).\r\n             *\r\n             * @namespace\r\n             */\r\n            type: {\r\n                /**\r\n                 * Type detection functions.\r\n                 *\r\n                 * The functions defined in this object are used to automatically detect\r\n                 * a column's type, making initialisation of DataTables super easy, even\r\n                 * when complex data is in the table.\r\n                 *\r\n                 * The functions defined take two parameters:\r\n                 *\r\n                 *  1. `{*}` Data from the column cell to be analysed\r\n                 *  2. `{settings}` DataTables settings object. This can be used to\r\n                 *     perform context specific type detection - for example detection\r\n                 *     based on language settings such as using a comma for a decimal\r\n                 *     place. Generally speaking the options from the settings will not\r\n                 *     be required\r\n                 *\r\n                 * Each function is expected to return:\r\n                 *\r\n                 * * `{string|null}` Data type detected, or null if unknown (and thus\r\n                 *   pass it on to the other type detection functions.\r\n                 *\r\n                 *  @type array\r\n                 *\r\n                 *  @example\r\n                 *    // Currency type detection plug-in:\r\n                 *    $.fn.dataTable.ext.type.detect.push(\r\n                 *      function ( data, settings ) {\r\n                 *        // Check the numeric part\r\n                 *        if ( ! data.substring(1).match(/[0-9]/) ) {\r\n                 *          return null;\r\n                 *        }\r\n                 *\r\n                 *        // Check prefixed by currency\r\n                 *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\r\n                 *          return 'currency';\r\n                 *        }\r\n                 *        return null;\r\n                 *      }\r\n                 *    );\r\n                 */\r\n                detect: [],\r\n        \r\n        \r\n                /**\r\n                 * Type based search formatting.\r\n                 *\r\n                 * The type based searching functions can be used to pre-format the\r\n                 * data to be search on. For example, it can be used to strip HTML\r\n                 * tags or to de-format telephone numbers for numeric only searching.\r\n                 *\r\n                 * Note that is a search is not defined for a column of a given type,\r\n                 * no search formatting will be performed.\r\n                 * \r\n                 * Pre-processing of searching data plug-ins - When you assign the sType\r\n                 * for a column (or have it automatically detected for you by DataTables\r\n                 * or a type detection plug-in), you will typically be using this for\r\n                 * custom sorting, but it can also be used to provide custom searching\r\n                 * by allowing you to pre-processing the data and returning the data in\r\n                 * the format that should be searched upon. This is done by adding\r\n                 * functions this object with a parameter name which matches the sType\r\n                 * for that target column. This is the corollary of <i>afnSortData</i>\r\n                 * for searching data.\r\n                 *\r\n                 * The functions defined take a single parameter:\r\n                 *\r\n                 *  1. `{*}` Data from the column cell to be prepared for searching\r\n                 *\r\n                 * Each function is expected to return:\r\n                 *\r\n                 * * `{string|null}` Formatted string that will be used for the searching.\r\n                 *\r\n                 *  @type object\r\n                 *  @default {}\r\n                 *\r\n                 *  @example\r\n                 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\r\n                 *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\r\n                 *    }\r\n                 */\r\n                search: {},\r\n        \r\n        \r\n                /**\r\n                 * Type based ordering.\r\n                 *\r\n                 * The column type tells DataTables what ordering to apply to the table\r\n                 * when a column is sorted upon. The order for each type that is defined,\r\n                 * is defined by the functions available in this object.\r\n                 *\r\n                 * Each ordering option can be described by three properties added to\r\n                 * this object:\r\n                 *\r\n                 * * `{type}-pre` - Pre-formatting function\r\n                 * * `{type}-asc` - Ascending order function\r\n                 * * `{type}-desc` - Descending order function\r\n                 *\r\n                 * All three can be used together, only `{type}-pre` or only\r\n                 * `{type}-asc` and `{type}-desc` together. It is generally recommended\r\n                 * that only `{type}-pre` is used, as this provides the optimal\r\n                 * implementation in terms of speed, although the others are provided\r\n                 * for compatibility with existing Javascript sort functions.\r\n                 *\r\n                 * `{type}-pre`: Functions defined take a single parameter:\r\n                 *\r\n                 *  1. `{*}` Data from the column cell to be prepared for ordering\r\n                 *\r\n                 * And return:\r\n                 *\r\n                 * * `{*}` Data to be sorted upon\r\n                 *\r\n                 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\r\n                 * functions, taking two parameters:\r\n                 *\r\n                 *  1. `{*}` Data to compare to the second parameter\r\n                 *  2. `{*}` Data to compare to the first parameter\r\n                 *\r\n                 * And returning:\r\n                 *\r\n                 * * `{*}` Ordering match: <0 if first parameter should be sorted lower\r\n                 *   than the second parameter, ===0 if the two parameters are equal and\r\n                 *   >0 if the first parameter should be sorted height than the second\r\n                 *   parameter.\r\n                 * \r\n                 *  @type object\r\n                 *  @default {}\r\n                 *\r\n                 *  @example\r\n                 *    // Numeric ordering of formatted numbers with a pre-formatter\r\n                 *    $.extend( $.fn.dataTable.ext.type.order, {\r\n                 *      \"string-pre\": function(x) {\r\n                 *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\r\n                 *        return parseFloat( a );\r\n                 *      }\r\n                 *    } );\r\n                 *\r\n                 *  @example\r\n                 *    // Case-sensitive string ordering, with no pre-formatting method\r\n                 *    $.extend( $.fn.dataTable.ext.order, {\r\n                 *      \"string-case-asc\": function(x,y) {\r\n                 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n                 *      },\r\n                 *      \"string-case-desc\": function(x,y) {\r\n                 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\r\n                 *      }\r\n                 *    } );\r\n                 */\r\n                order: {}\r\n            },\r\n        \r\n            /**\r\n             * Unique DataTables instance counter\r\n             *\r\n             * @type int\r\n             * @private\r\n             */\r\n            _unique: 0,\r\n        \r\n        \r\n            //\r\n            // Depreciated\r\n            // The following properties are retained for backwards compatibility only.\r\n            // The should not be used in new projects and will be removed in a future\r\n            // version\r\n            //\r\n        \r\n            /**\r\n             * Version check function.\r\n             *  @type function\r\n             *  @depreciated Since 1.10\r\n             */\r\n            fnVersionCheck: DataTable.fnVersionCheck,\r\n        \r\n        \r\n            /**\r\n             * Index for what 'this' index API functions should use\r\n             *  @type int\r\n             *  @deprecated Since v1.10\r\n             */\r\n            iApiIndex: 0,\r\n        \r\n        \r\n            /**\r\n             * jQuery UI class container\r\n             *  @type object\r\n             *  @deprecated Since v1.10\r\n             */\r\n            oJUIClasses: {},\r\n        \r\n        \r\n            /**\r\n             * Software version\r\n             *  @type string\r\n             *  @deprecated Since v1.10\r\n             */\r\n            sVersion: DataTable.version\r\n        };\r\n        \r\n        \r\n        //\r\n        // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\r\n        //\r\n        $.extend( _ext, {\r\n            afnFiltering: _ext.search,\r\n            aTypes:       _ext.type.detect,\r\n            ofnSearch:    _ext.type.search,\r\n            oSort:        _ext.type.order,\r\n            afnSortData:  _ext.order,\r\n            aoFeatures:   _ext.feature,\r\n            oApi:         _ext.internal,\r\n            oStdClasses:  _ext.classes,\r\n            oPagination:  _ext.pager\r\n        } );\r\n        \r\n        \r\n        $.extend( DataTable.ext.classes, {\r\n            \"sTable\": \"dataTable\",\r\n            \"sNoFooter\": \"no-footer\",\r\n        \r\n            /* Paging buttons */\r\n            \"sPageButton\": \"paginate_button\",\r\n            \"sPageButtonActive\": \"current\",\r\n            \"sPageButtonDisabled\": \"disabled\",\r\n        \r\n            /* Striping classes */\r\n            \"sStripeOdd\": \"odd\",\r\n            \"sStripeEven\": \"even\",\r\n        \r\n            /* Empty row */\r\n            \"sRowEmpty\": \"dataTables_empty\",\r\n        \r\n            /* Features */\r\n            \"sWrapper\": \"dataTables_wrapper\",\r\n            \"sFilter\": \"dataTables_filter\",\r\n            \"sInfo\": \"dataTables_info\",\r\n            \"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */\r\n            \"sLength\": \"dataTables_length\",\r\n            \"sProcessing\": \"dataTables_processing\",\r\n        \r\n            /* Sorting */\r\n            \"sSortAsc\": \"sorting_asc\",\r\n            \"sSortDesc\": \"sorting_desc\",\r\n            \"sSortable\": \"sorting\", /* Sortable in both directions */\r\n            \"sSortableAsc\": \"sorting_desc_disabled\",\r\n            \"sSortableDesc\": \"sorting_asc_disabled\",\r\n            \"sSortableNone\": \"sorting_disabled\",\r\n            \"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */\r\n        \r\n            /* Filtering */\r\n            \"sFilterInput\": \"\",\r\n        \r\n            /* Page length */\r\n            \"sLengthSelect\": \"\",\r\n        \r\n            /* Scrolling */\r\n            \"sScrollWrapper\": \"dataTables_scroll\",\r\n            \"sScrollHead\": \"dataTables_scrollHead\",\r\n            \"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\r\n            \"sScrollBody\": \"dataTables_scrollBody\",\r\n            \"sScrollFoot\": \"dataTables_scrollFoot\",\r\n            \"sScrollFootInner\": \"dataTables_scrollFootInner\",\r\n        \r\n            /* Misc */\r\n            \"sHeaderTH\": \"\",\r\n            \"sFooterTH\": \"\",\r\n        \r\n            // Deprecated\r\n            \"sSortJUIAsc\": \"\",\r\n            \"sSortJUIDesc\": \"\",\r\n            \"sSortJUI\": \"\",\r\n            \"sSortJUIAscAllowed\": \"\",\r\n            \"sSortJUIDescAllowed\": \"\",\r\n            \"sSortJUIWrapper\": \"\",\r\n            \"sSortIcon\": \"\",\r\n            \"sJUIHeader\": \"\",\r\n            \"sJUIFooter\": \"\"\r\n        } );\r\n        \r\n        \r\n        var extPagination = DataTable.ext.pager;\r\n        \r\n        function _numbers ( page, pages ) {\r\n            var\r\n                numbers = [],\r\n                buttons = extPagination.numbers_length,\r\n                half = Math.floor( buttons / 2 ),\r\n                i = 1;\r\n        \r\n            if ( pages <= buttons ) {\r\n                numbers = _range( 0, pages );\r\n            }\r\n            else if ( page <= half ) {\r\n                numbers = _range( 0, buttons-2 );\r\n                numbers.push( 'ellipsis' );\r\n                numbers.push( pages-1 );\r\n            }\r\n            else if ( page >= pages - 1 - half ) {\r\n                numbers = _range( pages-(buttons-2), pages );\r\n                numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6\r\n                numbers.splice( 0, 0, 0 );\r\n            }\r\n            else {\r\n                numbers = _range( page-half+2, page+half-1 );\r\n                numbers.push( 'ellipsis' );\r\n                numbers.push( pages-1 );\r\n                numbers.splice( 0, 0, 'ellipsis' );\r\n                numbers.splice( 0, 0, 0 );\r\n            }\r\n        \r\n            numbers.DT_el = 'span';\r\n            return numbers;\r\n        }\r\n        \r\n        \r\n        $.extend( extPagination, {\r\n            simple: function ( page, pages ) {\r\n                return [ 'previous', 'next' ];\r\n            },\r\n        \r\n            full: function ( page, pages ) {\r\n                return [  'first', 'previous', 'next', 'last' ];\r\n            },\r\n        \r\n            numbers: function ( page, pages ) {\r\n                return [ _numbers(page, pages) ];\r\n            },\r\n        \r\n            simple_numbers: function ( page, pages ) {\r\n                return [ 'previous', _numbers(page, pages), 'next' ];\r\n            },\r\n        \r\n            full_numbers: function ( page, pages ) {\r\n                return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];\r\n            },\r\n            \r\n            first_last_numbers: function (page, pages) {\r\n                return ['first', _numbers(page, pages), 'last'];\r\n            },\r\n        \r\n            // For testing and plug-ins to use\r\n            _numbers: _numbers,\r\n        \r\n            // Number of number buttons (including ellipsis) to show. _Must be odd!_\r\n            numbers_length: 7\r\n        } );\r\n        \r\n        \r\n        $.extend( true, DataTable.ext.renderer, {\r\n            pageButton: {\r\n                _: function ( settings, host, idx, buttons, page, pages ) {\r\n                    var classes = settings.oClasses;\r\n                    var lang = settings.oLanguage.oPaginate;\r\n                    var aria = settings.oLanguage.oAria.paginate || {};\r\n                    var btnDisplay, btnClass, counter=0;\r\n        \r\n                    var attach = function( container, buttons ) {\r\n                        var i, ien, node, button, tabIndex;\r\n                        var disabledClass = classes.sPageButtonDisabled;\r\n                        var clickHandler = function ( e ) {\r\n                            _fnPageChange( settings, e.data.action, true );\r\n                        };\r\n        \r\n                        for ( i=0, ien=buttons.length ; i<ien ; i++ ) {\r\n                            button = buttons[i];\r\n        \r\n                            if ( Array.isArray( button ) ) {\r\n                                var inner = $( '<'+(button.DT_el || 'div')+'/>' )\r\n                                    .appendTo( container );\r\n                                attach( inner, button );\r\n                            }\r\n                            else {\r\n                                btnDisplay = null;\r\n                                btnClass = button;\r\n                                tabIndex = settings.iTabIndex;\r\n        \r\n                                switch ( button ) {\r\n                                    case 'ellipsis':\r\n                                        container.append('<span class=\"ellipsis\">&#x2026;</span>');\r\n                                        break;\r\n        \r\n                                    case 'first':\r\n                                        btnDisplay = lang.sFirst;\r\n        \r\n                                        if ( page === 0 ) {\r\n                                            tabIndex = -1;\r\n                                            btnClass += ' ' + disabledClass;\r\n                                        }\r\n                                        break;\r\n        \r\n                                    case 'previous':\r\n                                        btnDisplay = lang.sPrevious;\r\n        \r\n                                        if ( page === 0 ) {\r\n                                            tabIndex = -1;\r\n                                            btnClass += ' ' + disabledClass;\r\n                                        }\r\n                                        break;\r\n        \r\n                                    case 'next':\r\n                                        btnDisplay = lang.sNext;\r\n        \r\n                                        if ( pages === 0 || page === pages-1 ) {\r\n                                            tabIndex = -1;\r\n                                            btnClass += ' ' + disabledClass;\r\n                                        }\r\n                                        break;\r\n        \r\n                                    case 'last':\r\n                                        btnDisplay = lang.sLast;\r\n        \r\n                                        if ( pages === 0 || page === pages-1 ) {\r\n                                            tabIndex = -1;\r\n                                            btnClass += ' ' + disabledClass;\r\n                                        }\r\n                                        break;\r\n        \r\n                                    default:\r\n                                        btnDisplay = settings.fnFormatNumber( button + 1 );\r\n                                        btnClass = page === button ?\r\n                                            classes.sPageButtonActive : '';\r\n                                        break;\r\n                                }\r\n        \r\n                                if ( btnDisplay !== null ) {\r\n                                    node = $('<a>', {\r\n                                            'class': classes.sPageButton+' '+btnClass,\r\n                                            'aria-controls': settings.sTableId,\r\n                                            'aria-label': aria[ button ],\r\n                                            'data-dt-idx': counter,\r\n                                            'tabindex': tabIndex,\r\n                                            'id': idx === 0 && typeof button === 'string' ?\r\n                                                settings.sTableId +'_'+ button :\r\n                                                null\r\n                                        } )\r\n                                        .html( btnDisplay )\r\n                                        .appendTo( container );\r\n        \r\n                                    _fnBindAction(\r\n                                        node, {action: button}, clickHandler\r\n                                    );\r\n        \r\n                                    counter++;\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n        \r\n                    // IE9 throws an 'unknown error' if document.activeElement is used\r\n                    // inside an iframe or frame. Try / catch the error. Not good for\r\n                    // accessibility, but neither are frames.\r\n                    var activeEl;\r\n        \r\n                    try {\r\n                        // Because this approach is destroying and recreating the paging\r\n                        // elements, focus is lost on the select button which is bad for\r\n                        // accessibility. So we want to restore focus once the draw has\r\n                        // completed\r\n                        activeEl = $(host).find(document.activeElement).data('dt-idx');\r\n                    }\r\n                    catch (e) {}\r\n        \r\n                    attach( $(host).empty(), buttons );\r\n        \r\n                    if ( activeEl !== undefined ) {\r\n                        $(host).find( '[data-dt-idx='+activeEl+']' ).trigger('focus');\r\n                    }\r\n                }\r\n            }\r\n        } );\r\n        \r\n        \r\n        \r\n        // Built in type detection. See model.ext.aTypes for information about\r\n        // what is required from this methods.\r\n        $.extend( DataTable.ext.type.detect, [\r\n            // Plain numbers - first since V8 detects some plain numbers as dates\r\n            // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _isNumber( d, decimal ) ? 'num'+decimal : null;\r\n            },\r\n        \r\n            // Dates (only those recognised by the browser's Date.parse)\r\n            function ( d, settings )\r\n            {\r\n                // V8 tries _very_ hard to make a string passed into `Date.parse()`\r\n                // valid, so we need to use a regex to restrict date formats. Use a\r\n                // plug-in for anything other than ISO8601 style strings\r\n                if ( d && !(d instanceof Date) && ! _re_date.test(d) ) {\r\n                    return null;\r\n                }\r\n                var parsed = Date.parse(d);\r\n                return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;\r\n            },\r\n        \r\n            // Formatted numbers\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;\r\n            },\r\n        \r\n            // HTML numeric\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;\r\n            },\r\n        \r\n            // HTML numeric, formatted\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;\r\n            },\r\n        \r\n            // HTML (this is strict checking - there must be html)\r\n            function ( d, settings )\r\n            {\r\n                return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?\r\n                    'html' : null;\r\n            }\r\n        ] );\r\n        \r\n        \r\n        \r\n        // Filter formatting functions. See model.ext.ofnSearch for information about\r\n        // what is required from these methods.\r\n        // \r\n        // Note that additional search methods are added for the html numbers and\r\n        // html formatted numbers by `_addNumericSort()` when we know what the decimal\r\n        // place is\r\n        \r\n        \r\n        $.extend( DataTable.ext.type.search, {\r\n            html: function ( data ) {\r\n                return _empty(data) ?\r\n                    data :\r\n                    typeof data === 'string' ?\r\n                        data\r\n                            .replace( _re_new_lines, \" \" )\r\n                            .replace( _re_html, \"\" ) :\r\n                        '';\r\n            },\r\n        \r\n            string: function ( data ) {\r\n                return _empty(data) ?\r\n                    data :\r\n                    typeof data === 'string' ?\r\n                        data.replace( _re_new_lines, \" \" ) :\r\n                        data;\r\n            }\r\n        } );\r\n        \r\n        \r\n        \r\n        var __numericReplace = function ( d, decimalPlace, re1, re2 ) {\r\n            if ( d !== 0 && (!d || d === '-') ) {\r\n                return -Infinity;\r\n            }\r\n        \r\n            // If a decimal place other than `.` is used, it needs to be given to the\r\n            // function so we can detect it and replace with a `.` which is the only\r\n            // decimal place Javascript recognises - it is not locale aware.\r\n            if ( decimalPlace ) {\r\n                d = _numToDecimal( d, decimalPlace );\r\n            }\r\n        \r\n            if ( d.replace ) {\r\n                if ( re1 ) {\r\n                    d = d.replace( re1, '' );\r\n                }\r\n        \r\n                if ( re2 ) {\r\n                    d = d.replace( re2, '' );\r\n                }\r\n            }\r\n        \r\n            return d * 1;\r\n        };\r\n        \r\n        \r\n        // Add the numeric 'deformatting' functions for sorting and search. This is done\r\n        // in a function to provide an easy ability for the language options to add\r\n        // additional methods if a non-period decimal place is used.\r\n        function _addNumericSort ( decimalPlace ) {\r\n            $.each(\r\n                {\r\n                    // Plain numbers\r\n                    \"num\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace );\r\n                    },\r\n        \r\n                    // Formatted numbers\r\n                    \"num-fmt\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace, _re_formatted_numeric );\r\n                    },\r\n        \r\n                    // HTML numeric\r\n                    \"html-num\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace, _re_html );\r\n                    },\r\n        \r\n                    // HTML numeric, formatted\r\n                    \"html-num-fmt\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );\r\n                    }\r\n                },\r\n                function ( key, fn ) {\r\n                    // Add the ordering method\r\n                    _ext.type.order[ key+decimalPlace+'-pre' ] = fn;\r\n        \r\n                    // For HTML types add a search formatter that will strip the HTML\r\n                    if ( key.match(/^html\\-/) ) {\r\n                        _ext.type.search[ key+decimalPlace ] = _ext.type.search.html;\r\n                    }\r\n                }\r\n            );\r\n        }\r\n        \r\n        \r\n        // Default sort methods\r\n        $.extend( _ext.type.order, {\r\n            // Dates\r\n            \"date-pre\": function ( d ) {\r\n                var ts = Date.parse( d );\r\n                return isNaN(ts) ? -Infinity : ts;\r\n            },\r\n        \r\n            // html\r\n            \"html-pre\": function ( a ) {\r\n                return _empty(a) ?\r\n                    '' :\r\n                    a.replace ?\r\n                        a.replace( /<.*?>/g, \"\" ).toLowerCase() :\r\n                        a+'';\r\n            },\r\n        \r\n            // string\r\n            \"string-pre\": function ( a ) {\r\n                // This is a little complex, but faster than always calling toString,\r\n                // http://jsperf.com/tostring-v-check\r\n                return _empty(a) ?\r\n                    '' :\r\n                    typeof a === 'string' ?\r\n                        a.toLowerCase() :\r\n                        ! a.toString ?\r\n                            '' :\r\n                            a.toString();\r\n            },\r\n        \r\n            // string-asc and -desc are retained only for compatibility with the old\r\n            // sort methods\r\n            \"string-asc\": function ( x, y ) {\r\n                return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n            },\r\n        \r\n            \"string-desc\": function ( x, y ) {\r\n                return ((x < y) ? 1 : ((x > y) ? -1 : 0));\r\n            }\r\n        } );\r\n        \r\n        \r\n        // Numeric sorting types - order doesn't matter here\r\n        _addNumericSort( '' );\r\n        \r\n        \r\n        $.extend( true, DataTable.ext.renderer, {\r\n            header: {\r\n                _: function ( settings, cell, column, classes ) {\r\n                    // No additional mark-up required\r\n                    // Attach a sort listener to update on sort - note that using the\r\n                    // `DT` namespace will allow the event to be removed automatically\r\n                    // on destroy, while the `dt` namespaced event is the one we are\r\n                    // listening for\r\n                    $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\r\n                        if ( settings !== ctx ) { // need to check this this is the host\r\n                            return;               // table, not a nested one\r\n                        }\r\n        \r\n                        var colIdx = column.idx;\r\n        \r\n                        cell\r\n                            .removeClass(\r\n                                classes.sSortAsc +' '+\r\n                                classes.sSortDesc\r\n                            )\r\n                            .addClass( columns[ colIdx ] == 'asc' ?\r\n                                classes.sSortAsc : columns[ colIdx ] == 'desc' ?\r\n                                    classes.sSortDesc :\r\n                                    column.sSortingClass\r\n                            );\r\n                    } );\r\n                },\r\n        \r\n                jqueryui: function ( settings, cell, column, classes ) {\r\n                    $('<div/>')\r\n                        .addClass( classes.sSortJUIWrapper )\r\n                        .append( cell.contents() )\r\n                        .append( $('<span/>')\r\n                            .addClass( classes.sSortIcon+' '+column.sSortingClassJUI )\r\n                        )\r\n                        .appendTo( cell );\r\n        \r\n                    // Attach a sort listener to update on sort\r\n                    $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\r\n                        if ( settings !== ctx ) {\r\n                            return;\r\n                        }\r\n        \r\n                        var colIdx = column.idx;\r\n        \r\n                        cell\r\n                            .removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )\r\n                            .addClass( columns[ colIdx ] == 'asc' ?\r\n                                classes.sSortAsc : columns[ colIdx ] == 'desc' ?\r\n                                    classes.sSortDesc :\r\n                                    column.sSortingClass\r\n                            );\r\n        \r\n                        cell\r\n                            .find( 'span.'+classes.sSortIcon )\r\n                            .removeClass(\r\n                                classes.sSortJUIAsc +\" \"+\r\n                                classes.sSortJUIDesc +\" \"+\r\n                                classes.sSortJUI +\" \"+\r\n                                classes.sSortJUIAscAllowed +\" \"+\r\n                                classes.sSortJUIDescAllowed\r\n                            )\r\n                            .addClass( columns[ colIdx ] == 'asc' ?\r\n                                classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?\r\n                                    classes.sSortJUIDesc :\r\n                                    column.sSortingClassJUI\r\n                            );\r\n                    } );\r\n                }\r\n            }\r\n        } );\r\n        \r\n        /*\r\n         * Public helper functions. These aren't used internally by DataTables, or\r\n         * called by any of the options passed into DataTables, but they can be used\r\n         * externally by developers working with DataTables. They are helper functions\r\n         * to make working with DataTables a little bit easier.\r\n         */\r\n        \r\n        var __htmlEscapeEntities = function ( d ) {\r\n            if (Array.isArray(d)) {\r\n                d = d.join(',');\r\n            }\r\n        \r\n            return typeof d === 'string' ?\r\n                d\r\n                    .replace(/&/g, '&amp;')\r\n                    .replace(/</g, '&lt;')\r\n                    .replace(/>/g, '&gt;')\r\n                    .replace(/\"/g, '&quot;') :\r\n                d;\r\n        };\r\n        \r\n        /**\r\n         * Helpers for `columns.render`.\r\n         *\r\n         * The options defined here can be used with the `columns.render` initialisation\r\n         * option to provide a display renderer. The following functions are defined:\r\n         *\r\n         * * `number` - Will format numeric data (defined by `columns.data`) for\r\n         *   display, retaining the original unformatted data for sorting and filtering.\r\n         *   It takes 5 parameters:\r\n         *   * `string` - Thousands grouping separator\r\n         *   * `string` - Decimal point indicator\r\n         *   * `integer` - Number of decimal points to show\r\n         *   * `string` (optional) - Prefix.\r\n         *   * `string` (optional) - Postfix (/suffix).\r\n         * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\r\n         *   parameters.\r\n         *\r\n         * @example\r\n         *   // Column definition using the number renderer\r\n         *   {\r\n         *     data: \"salary\",\r\n         *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\r\n         *   }\r\n         *\r\n         * @namespace\r\n         */\r\n        DataTable.render = {\r\n            number: function ( thousands, decimal, precision, prefix, postfix ) {\r\n                return {\r\n                    display: function ( d ) {\r\n                        if ( typeof d !== 'number' && typeof d !== 'string' ) {\r\n                            return d;\r\n                        }\r\n        \r\n                        var negative = d < 0 ? '-' : '';\r\n                        var flo = parseFloat( d );\r\n        \r\n                        // If NaN then there isn't much formatting that we can do - just\r\n                        // return immediately, escaping any HTML (this was supposed to\r\n                        // be a number after all)\r\n                        if ( isNaN( flo ) ) {\r\n                            return __htmlEscapeEntities( d );\r\n                        }\r\n        \r\n                        flo = flo.toFixed( precision );\r\n                        d = Math.abs( flo );\r\n        \r\n                        var intPart = parseInt( d, 10 );\r\n                        var floatPart = precision ?\r\n                            decimal+(d - intPart).toFixed( precision ).substring( 2 ):\r\n                            '';\r\n        \r\n                        // If zero, then can't have a negative prefix\r\n                        if (intPart === 0 && parseFloat(floatPart) === 0) {\r\n                            negative = '';\r\n                        }\r\n        \r\n                        return negative + (prefix||'') +\r\n                            intPart.toString().replace(\r\n                                /\\B(?=(\\d{3})+(?!\\d))/g, thousands\r\n                            ) +\r\n                            floatPart +\r\n                            (postfix||'');\r\n                    }\r\n                };\r\n            },\r\n        \r\n            text: function () {\r\n                return {\r\n                    display: __htmlEscapeEntities,\r\n                    filter: __htmlEscapeEntities\r\n                };\r\n            }\r\n        };\r\n        \r\n        \r\n        /*\r\n         * This is really a good bit rubbish this method of exposing the internal methods\r\n         * publicly... - To be fixed in 2.0 using methods on the prototype\r\n         */\r\n        \r\n        \r\n        /**\r\n         * Create a wrapper function for exporting an internal functions to an external API.\r\n         *  @param {string} fn API function name\r\n         *  @returns {function} wrapped function\r\n         *  @memberof DataTable#internal\r\n         */\r\n        function _fnExternApiFunc (fn)\r\n        {\r\n            return function() {\r\n                var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(\r\n                    Array.prototype.slice.call(arguments)\r\n                );\r\n                return DataTable.ext.internal[fn].apply( this, args );\r\n            };\r\n        }\r\n        \r\n        \r\n        /**\r\n         * Reference to internal functions for use by plug-in developers. Note that\r\n         * these methods are references to internal functions and are considered to be\r\n         * private. If you use these methods, be aware that they are liable to change\r\n         * between versions.\r\n         *  @namespace\r\n         */\r\n        $.extend( DataTable.ext.internal, {\r\n            _fnExternApiFunc: _fnExternApiFunc,\r\n            _fnBuildAjax: _fnBuildAjax,\r\n            _fnAjaxUpdate: _fnAjaxUpdate,\r\n            _fnAjaxParameters: _fnAjaxParameters,\r\n            _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\r\n            _fnAjaxDataSrc: _fnAjaxDataSrc,\r\n            _fnAddColumn: _fnAddColumn,\r\n            _fnColumnOptions: _fnColumnOptions,\r\n            _fnAdjustColumnSizing: _fnAdjustColumnSizing,\r\n            _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\r\n            _fnColumnIndexToVisible: _fnColumnIndexToVisible,\r\n            _fnVisbleColumns: _fnVisbleColumns,\r\n            _fnGetColumns: _fnGetColumns,\r\n            _fnColumnTypes: _fnColumnTypes,\r\n            _fnApplyColumnDefs: _fnApplyColumnDefs,\r\n            _fnHungarianMap: _fnHungarianMap,\r\n            _fnCamelToHungarian: _fnCamelToHungarian,\r\n            _fnLanguageCompat: _fnLanguageCompat,\r\n            _fnBrowserDetect: _fnBrowserDetect,\r\n            _fnAddData: _fnAddData,\r\n            _fnAddTr: _fnAddTr,\r\n            _fnNodeToDataIndex: _fnNodeToDataIndex,\r\n            _fnNodeToColumnIndex: _fnNodeToColumnIndex,\r\n            _fnGetCellData: _fnGetCellData,\r\n            _fnSetCellData: _fnSetCellData,\r\n            _fnSplitObjNotation: _fnSplitObjNotation,\r\n            _fnGetObjectDataFn: _fnGetObjectDataFn,\r\n            _fnSetObjectDataFn: _fnSetObjectDataFn,\r\n            _fnGetDataMaster: _fnGetDataMaster,\r\n            _fnClearTable: _fnClearTable,\r\n            _fnDeleteIndex: _fnDeleteIndex,\r\n            _fnInvalidate: _fnInvalidate,\r\n            _fnGetRowElements: _fnGetRowElements,\r\n            _fnCreateTr: _fnCreateTr,\r\n            _fnBuildHead: _fnBuildHead,\r\n            _fnDrawHead: _fnDrawHead,\r\n            _fnDraw: _fnDraw,\r\n            _fnReDraw: _fnReDraw,\r\n            _fnAddOptionsHtml: _fnAddOptionsHtml,\r\n            _fnDetectHeader: _fnDetectHeader,\r\n            _fnGetUniqueThs: _fnGetUniqueThs,\r\n            _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\r\n            _fnFilterComplete: _fnFilterComplete,\r\n            _fnFilterCustom: _fnFilterCustom,\r\n            _fnFilterColumn: _fnFilterColumn,\r\n            _fnFilter: _fnFilter,\r\n            _fnFilterCreateSearch: _fnFilterCreateSearch,\r\n            _fnEscapeRegex: _fnEscapeRegex,\r\n            _fnFilterData: _fnFilterData,\r\n            _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\r\n            _fnUpdateInfo: _fnUpdateInfo,\r\n            _fnInfoMacros: _fnInfoMacros,\r\n            _fnInitialise: _fnInitialise,\r\n            _fnInitComplete: _fnInitComplete,\r\n            _fnLengthChange: _fnLengthChange,\r\n            _fnFeatureHtmlLength: _fnFeatureHtmlLength,\r\n            _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\r\n            _fnPageChange: _fnPageChange,\r\n            _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\r\n            _fnProcessingDisplay: _fnProcessingDisplay,\r\n            _fnFeatureHtmlTable: _fnFeatureHtmlTable,\r\n            _fnScrollDraw: _fnScrollDraw,\r\n            _fnApplyToChildren: _fnApplyToChildren,\r\n            _fnCalculateColumnWidths: _fnCalculateColumnWidths,\r\n            _fnThrottle: _fnThrottle,\r\n            _fnConvertToWidth: _fnConvertToWidth,\r\n            _fnGetWidestNode: _fnGetWidestNode,\r\n            _fnGetMaxLenString: _fnGetMaxLenString,\r\n            _fnStringToCss: _fnStringToCss,\r\n            _fnSortFlatten: _fnSortFlatten,\r\n            _fnSort: _fnSort,\r\n            _fnSortAria: _fnSortAria,\r\n            _fnSortListener: _fnSortListener,\r\n            _fnSortAttachListener: _fnSortAttachListener,\r\n            _fnSortingClasses: _fnSortingClasses,\r\n            _fnSortData: _fnSortData,\r\n            _fnSaveState: _fnSaveState,\r\n            _fnLoadState: _fnLoadState,\r\n            _fnImplementState: _fnImplementState,\r\n            _fnSettingsFromNode: _fnSettingsFromNode,\r\n            _fnLog: _fnLog,\r\n            _fnMap: _fnMap,\r\n            _fnBindAction: _fnBindAction,\r\n            _fnCallbackReg: _fnCallbackReg,\r\n            _fnCallbackFire: _fnCallbackFire,\r\n            _fnLengthOverflow: _fnLengthOverflow,\r\n            _fnRenderer: _fnRenderer,\r\n            _fnDataSource: _fnDataSource,\r\n            _fnRowAttributes: _fnRowAttributes,\r\n            _fnExtend: _fnExtend,\r\n            _fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\r\n                                            // in 1.10, so this dead-end function is\r\n                                            // added to prevent errors\r\n        } );\r\n        \r\n        \r\n        // jQuery access\r\n        $.fn.dataTable = DataTable;\r\n        \r\n        // Provide access to the host jQuery object (circular reference)\r\n        DataTable.$ = $;\r\n        \r\n        // Legacy aliases\r\n        $.fn.dataTableSettings = DataTable.settings;\r\n        $.fn.dataTableExt = DataTable.ext;\r\n        \r\n        // With a capital `D` we return a DataTables API instance rather than a\r\n        // jQuery object\r\n        $.fn.DataTable = function ( opts ) {\r\n            return $(this).dataTable( opts ).api();\r\n        };\r\n        \r\n        // All properties that are available to $.fn.dataTable should also be\r\n        // available on $.fn.DataTable\r\n        $.each( DataTable, function ( prop, val ) {\r\n            $.fn.DataTable[ prop ] = val;\r\n        } );\r\n    \r\n        return DataTable;\r\n}));"],"names":["factory","$","window","document","undefined","_ext","_Api","_api_register","_api_registerPlural","DataTable","selector","options","this","sSelector","oOpts","api","_","rows","data","traditional","_fnSettingsFromNode","iApiIndex","fnAddData","redraw","Array","isArray","isPlainObject","add","row","draw","flatten","toArray","fnAdjustColumnSizing","bRedraw","columns","adjust","settings","scroll","oScroll","sX","sY","_fnScrollDraw","fnClearTable","clear","fnClose","nTr","child","hide","fnDeleteRow","target","callback","aoData","remove","call","fnDestroy","destroy","fnDraw","complete","fnFilter","sInput","iColumn","bRegex","bSmart","bShowGlobal","bCaseInsensitive","search","column","fnGetData","src","col","type","nodeName","toLowerCase","cell","fnGetNodes","iRow","node","nodes","fnGetPosition","toUpperCase","index","columnVisible","fnIsOpen","isShown","fnOpen","mHtml","sClass","show","fnPageChange","mAction","page","fnSetColumnVis","iCol","bShow","visible","fnSettings","fnSort","aaSort","order","fnSortListener","nNode","fnCallback","listener","fnUpdate","mData","mRow","bAction","fnVersionCheck","_that","emptyInit","len","length","fn","oApi","internal","ext","_fnExternApiFunc","each","iLen","oInit","_fnExtend","i","sId","getAttribute","bInitHandedOff","defaults","$this","_fnCompatOpts","_fnCompatCols","_fnCamelToHungarian","extend","allSettings","s","nTable","nTHead","parentNode","nTFoot","bRetrieve","bDestroy","oInstance","_fnLog","sTableId","id","splice","_unique","oSettings","models","style","width","push","dataTable","_fnLanguageCompat","oLanguage","aLengthMenu","iDisplayLength","_fnMap","oFeatures","_fnCallbackReg","fnDrawCallback","fnServerParams","fnStateSaveParams","fnStateLoadParams","fnStateLoaded","fnRowCallback","fnCreatedRow","fnHeaderCallback","fnFooterCallback","fnInitComplete","fnPreDrawCallback","rowIdFn","_fnGetObjectDataFn","rowId","_fnBrowserDetect","oClasses","classes","addClass","sTable","iInitDisplayStart","iDisplayStart","_iDisplayStart","iDeferLoading","bDeferLoading","tmp","_iRecordsDisplay","_iRecordsTotal","sUrl","ajax","dataType","url","success","json","_fnCallbackFire","_fnInitialise","error","asStripeClasses","sStripeOdd","sStripeEven","stripeClasses","rowOne","children","find","eq","inArray","map","el","hasClass","removeClass","join","asDestroyStripes","slice","aoColumnsInit","anThs","nThead","getElementsByTagName","_fnDetectHeader","aoHeader","_fnGetUniqueThs","aoColumns","_fnAddColumn","_fnApplyColumnDefs","aoColumnDefs","oDef","_fnColumnOptions","a","name","sort","filter","features","loadedInit","aaSorting","sorting","asSorting","_fnSortingClasses","bSort","bSorted","aSort","_fnSortFlatten","sortedColumns","val","dir","_fnSortAria","_fnDataSource","bDeferRender","captions","_captionSide","css","thead","appendTo","tbody","insertAfter","nTBody","tfoot","sNoFooter","aoFooter","aaData","_fnAddData","_fnAddTr","aiDisplay","aiDisplayMaster","bInitialised","_fnSaveState","bStateSave","_fnLoadState","_re_dic","_re_new_lines","_re_html","_re_date","_re_escape_regex","RegExp","_re_formatted_numeric","_empty","d","_intVal","integer","parseInt","isNaN","isFinite","_numToDecimal","num","decimalPoint","_fnEscapeRegex","replace","_isNumber","formatted","strType","parseFloat","_htmlNumeric","html","_isHtml","_stripHtml","_pluck","prop","prop2","out","ien","_pluck_order","_range","start","end","_removeEmpty","sorted","last","_areAllUnique","j","k","again","_flatten","_includes","indexOf","_fnHungarianMap","o","match","newKey","key","_hungarianMap","user","force","hungarianKey","charAt","lang","defaultDecimal","sDecimal","_addNumericSort","zeroRecords","sZeroRecords","sEmptyTable","sLoadingRecords","sInfoThousands","sThousands","decimal","arg","Object","prototype","toString","includes","String","trim","util","throttle","freq","timer","frequency","that","now","Date","args","arguments","clearTimeout","setTimeout","apply","escapeRegex","set","source","meta","setData","b","arrayNotation","funcNotation","innerSrc","_fnSplitObjNotation","aLast","Error","__reArray","__reFn","jLen","get","t","fetchData","substring","_fnCompatMap","knew","old","init","sScrollX","scrollX","searchCols","aoSearchCols","oSearch","dataSort","aDataSort","__browser","browser","n","position","top","left","scrollLeft","height","overflow","append","outer","inner","barWidth","offsetWidth","clientWidth","bScrollOversize","bScrollbarLeft","Math","round","offset","bBounding","getBoundingClientRect","oBrowser","iBarWidth","_fnReduce","inc","value","isSet","hasOwnProperty","nTh","oDefaults","oCol","oColumn","createElement","sTitle","innerHTML","idx","aoPreSearchCols","oOptions","th","sWidthOrig","attr","mDataProp","sType","_sManualType","className","iDataSort","mDataSrc","mRender","attrTest","_bAttrSrc","_setter","rowData","innerData","fnSetData","_fnSetObjectDataFn","_rowReadObject","bSortable","sSortableNone","bAsc","bDesc","sSortingClass","sSortableAsc","sSortingClassJUI","sSortJUIAscAllowed","sSortableDesc","sSortJUIDescAllowed","sSortable","sSortJUI","_fnAdjustColumnSizing","bAutoWidth","_fnCalculateColumnWidths","sWidth","_fnVisibleToColumnIndex","iMatch","aiVis","_fnGetColumns","_fnColumnIndexToVisible","iPos","_fnVisbleColumns","vis","bVisible","sParam","_fnColumnTypes","jen","ken","detectedType","cache","types","detect","_fnGetCellData","aoColDefs","aoCols","kLen","def","aTargets","targets","aDataIn","anTds","oData","oRow","_aData","aIds","_fnCreateTr","trs","_fnGetRowElements","cells","rowIdx","colIdx","iDraw","defaultContent","sDefaultContent","cellData","iDrawError","fomatters","_fnSetCellData","str","_fnGetDataMaster","_fnClearTable","_fnDeleteIndex","iTarget","iTargetIndex","_fnInvalidate","cellWrite","childNodes","removeChild","firstChild","anCells","_aSortData","_aFilterData","cols","_fnRowAttributes","contents","tds","td","objectRead","setter","cellProcess","nextSibling","rowNode","nTrIn","nTd","create","_DT_RowIndex","sCellType","_DT_CellIndex","appendChild","fnCreatedCell","tr","DT_RowClass","split","__rowc","concat","DT_RowAttr","DT_RowData","_fnBuildHead","createHeader","iTabIndex","_fnSortAttachListener","_fnRenderer","sHeaderTH","sFooterTH","nTf","_fnDrawHead","aoSource","bIncludeHidden","nLocalTr","iRowspan","iColspan","aoLocal","aApplied","iColumns","_fnDraw","ajaxComplete","bServerSide","fnRecordsDisplay","_fnStart","aPreDraw","anRows","iRowCount","iStripes","oLang","iDisplayEnd","fnDisplayEnd","bDrawing","_fnProcessingDisplay","bDestroying","_fnAjaxUpdate","iStart","iEnd","iDataIndex","nRow","sStripe","_sRowStripe","sZero","fnRecordsTotal","sRowEmpty","body","detach","bFiltered","_fnReDraw","holdPosition","bFilter","_fnSort","_fnFilterComplete","oPreviousSearch","_drawHold","_fnAddOptionsHtml","table","holding","insertBefore","insert","sWrapper","nHolding","nTableWrapper","nTableReinsertBefore","featureNode","cOption","nNewNode","cNext","sAttr","aDom","sDom","sJUIHeader","sJUIFooter","aSplit","substr","parent","bPaginate","bLengthChange","_fnFeatureHtmlLength","_fnFeatureHtmlFilter","bProcessing","_fnFeatureHtmlProcessing","_fnFeatureHtmlTable","bInfo","_fnFeatureHtmlInfo","_fnFeatureHtmlPaginate","feature","aoFeatures","cFeature","fnInit","aanFeatures","replaceWith","aLayout","nCell","l","iColShifted","bUnique","nTrs","fnShiftCol","nHeader","aReturn","unique","bSortCellsTop","_fnBuildAjax","rbracket","ajaxData","instance","status","jqXHR","_fnAjaxDataSrc","sError","newData","baseAjax","sServerMethod","xhr","thrown","ret","readyState","oAjaxData","fnServerData","sAjaxSource","_fnAjaxParameters","_fnAjaxUpdateDraw","dataProp","columnSearch","columnCount","preSearch","preColSearch","displayStart","displayLength","_iDisplayLength","param","sSearch","regex","sName","searchable","bSearchable","orderable","legacy","compat","modern","recordsTotal","recordsFiltered","_bInitComplete","_fnInitComplete","write","dataSrc","sAjaxDataProp","tableId","language","previousSearch","input","sFilterInput","f","sFilter","searchFn","event","return","searchDelay","jqFilter","sSearchPlaceholder","on","_fnThrottle","e","keyCode","ev","activeElement","oInput","iForce","oPrevSearch","aoPrevSearch","fnSaveFilter","oFilter","fnRegex","bEscapeRegex","_fnFilter","_fnFilterColumn","_fnFilterCustom","filters","displayRows","merge","searchStr","smart","caseInsensitive","display","rpSearch","_fnFilterCreateSearch","test","invalidated","prevSearch","displayMaster","filtered","_fnFilterData","_sFilterRow","word","m","__filter_div","__filter_div_textContent","textContent","filterData","wasInvalidated","innerText","_fnSearchToCamel","obj","_fnSearchToHung","tid","sInfo","aoDrawCallback","_fnUpdateInfo","max","total","sInfoEmpty","sInfoFiltered","_fnInfoMacros","sInfoPostFix","fnInfoCallback","formatter","fnFormatNumber","all","ceil","iAjaxStart","deferLoading","_fnStringToCss","aData","_fnLengthChange","_fnLengthOverflow","menu","d2","lengths","select","sLengthSelect","Option","div","sLength","sLengthMenu","outerHTML","sPaginationType","plugin","pager","sPaging","p","visRecords","pages","buttons","_fnPageChange","action","records","floor","changed","r","sProcessing","scrollY","caption","captionSide","headerClone","cloneNode","footerClone","footer","_div","size","scroller","sScrollWrapper","sScrollHead","border","sScrollHeadInner","sXInner","removeAttr","sScrollBody","sScrollFoot","sScrollFootInner","scrollHead","scrollBody","scrollFoot","bCollapse","nScrollHead","nScrollBody","nScrollFoot","headerTrgEls","footerTrgEls","headerSrcEls","footerSrcEls","headerCopy","footerCopy","correction","sanityWidth","scrollXInner","divHeader","divHeaderStyle","divHeaderInner","divHeaderInnerStyle","divHeaderTable","divBodyEl","divBody","divBodyStyle","divFooterInner","divFooterTable","header","tableEl","tableStyle","ie67","headerWidths","footerWidths","headerContent","footerContent","zeroOut","nSizer","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","scrollBarVis","scrollHeight","clientHeight","clone","prependTo","_fnApplyToChildren","outerWidth","offsetHeight","getComputedStyle","nToSize","iOuterWidth","bScrolling","padding","trigger","scrollTop","an1","an2","nNode1","nNode2","nodeType","__re_html_remove","columnIdx","visibleColumns","headerCells","tableWidthAttr","tableContainer","userInputs","styleWidth","_fnConvertToWidth","tmpTable","margin","_fnGetWidestNode","sContentPadding","holder","right","bounding","_reszEvt","bindResize","sInstance","_fnGetMaxLenString","maxIdx","srcCol","fixed","aaSortingFixed","fixedObj","nestedSort","pre","post","_idx","sortCol","aiOrig","oExtSort","formatters","_fnSortData","x","y","dataA","dataB","label","nextSort","oAria","ariaTitle","removeAttribute","setAttribute","sSortAscending","sSortDescending","_fnSortListener","nextSortIdx","next","bSortMulti","sortIdx","attachTo","_fnBindAction","shiftKey","oldSort","aLastSort","sortClass","sSortColumn","bSortClasses","customData","customSort","sSortDataType","_bLoadingState","state","time","oSavedState","fnStateSaveCallback","fnStateLoadCallback","_fnImplementState","Api","abStateLoad","duration","iStateDuration","oLoadedState","level","msg","tn","console","log","sErrMode","errMode","alert","mappedName","extender","breakRefs","which","preventDefault","sStore","callbackArr","eventName","reverse","Event","result","renderer","host","__apiStruct","__arrayProto","context","ctxSettings","mixed","jq","tables","_toSettings","opts","any","count","ctx","iterator","alwaysNew","items","item","apiInst","_selector_row_indexes","apiSelector","lastIndexOf","pluck","pop","reduce","reduceRight","shift","to$","toJQuery","unshift","scope","__dt_wrapper","struct","methodScoping","struc","methodExt","propExt","register","method","heir","registerPlural","pluralName","singularName","__table_selector","paging","info","__reload","one","abort","resetPaging","_selector_run","selectFn","res","selectorType","_selector_opts","_selector_first","inst","displayFiltered","displayFilteredMap","sel","selInt","cellIdx","closest","rowObj","__row_selector","hash","thatIdx","loopRow","loopCells","newRows","modRows","idFn","ids","_detailsShow","childRows","loaded","every","__details_state","__details_remove","_details","__details_display","__details_events","off","drawEvent","_child_obj","klass","addRow","created","colSpan","__details_add","_child_mth","__re_column_selector","__columnData","r1","r2","names","visColumns","jqResult","__column_selector","calc","__setColumnVis","rowSelector","columnSelector","allCells","fnSelector","__cell_selector","internalOpts","cellsNoOpts","selected","caseInsen","versionCheck","version","iThis","iThat","aThis","aThat","isDataTable","fnIsDataTable","is","head","foot","fnTables","camelToHungarian","jqRows","orig","jqTable","jqTbody","jqWrapper","removedMethod","sDestroyWidth","arg1","arg2","arg3","arg4","token","plural","resolved","toFormat","JSON","parse","sessionStorage","localStorage","getItem","location","pathname","setItem","stringify","paginate","min","builder","pageButton","oJUIClasses","sVersion","afnFiltering","aTypes","ofnSearch","oSort","afnSortData","oStdClasses","oPagination","extPagination","_numbers","numbers","numbers_length","half","DT_el","simple","full","simple_numbers","full_numbers","first_last_numbers","btnDisplay","btnClass","activeEl","oPaginate","aria","counter","attach","container","button","tabIndex","disabledClass","sPageButtonDisabled","clickHandler","sFirst","sPrevious","sNext","sLast","sPageButtonActive","sPageButton","empty","parsed","string","__numericReplace","decimalPlace","re1","re2","ts","sSortAsc","sSortDesc","jqueryui","sSortJUIWrapper","sSortIcon","sSortJUIAsc","sSortJUIDesc","__htmlEscapeEntities","render","number","thousands","precision","prefix","postfix","negative","flo","toFixed","abs","intPart","floatPart","text","_fnNodeToDataIndex","_fnNodeToColumnIndex","_fnCalculateEnd","dataTableSettings","dataTableExt","define","amd","exports","module","root","require","jQuery"],"mappings":"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"}