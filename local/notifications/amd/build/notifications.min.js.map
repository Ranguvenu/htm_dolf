{"version":3,"file":"notifications.min.js","sources":["../src/notifications.js"],"sourcesContent":["/**\r\n * Add a create new group modal to the page.\r\n *\r\n * @module     local_notification/newnotification\r\n * @class      NewNotification\r\n * @package    local_notification\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\r\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\r\n \r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @param {int} contextid\r\n     *\r\n     * Each call to init gets it's own instance of this class.\r\n     */\r\n    var NewNotification = function(args, notificationid, instance, plugin) {\r\n\r\n        this.contextid = args.context;\r\n        this.id = args.id;\r\n        this.notificationid = notificationid;\r\n        this.instance = instance;\r\n        this.plugin = plugin;\r\n        var self = this;\r\n        this.args = args;\r\n        self.init(args);\r\n    };\r\n \r\n    /**\r\n     * @var {Modal} modal\r\n     * @private\r\n     */\r\n    NewNotification.prototype.modal = null;\r\n \r\n    /**\r\n     * @var {int} contextid\r\n     * @private\r\n     */\r\n    NewNotification.prototype.contextid = -1;\r\n \r\n    /**\r\n     * Initialise the class.\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewNotification.prototype.init = function(args) {\r\n        //var triggers = $(selector);\r\n        var self = this;\r\n  \r\n            if(args.id){\r\n                self.notificationid = args.id;\r\n            }else{\r\n                self.notificationid = 0;\r\n            }\r\n            if (self.notificationid) {\r\n   \r\n                var head =  {key: 'update_notification', component: 'local_notifications'};\r\n            }else{\r\n               var head =  {key: 'create_notification', component: 'local_notifications'};\r\n            }\r\n            var strings = Str.get_strings([head\r\n            , {\r\n                key: 'save_continue',\r\n                component: 'local_notifications'\r\n            }, {\r\n                key: 'cancel',\r\n                component: 'moodle'\r\n            }, {\r\n                key: 'no',\r\n                component: 'moodle'\r\n            }])\r\n            return strings.then(function(str) {\r\n                // Create the modal.\r\n                return ModalFactory.create({\r\n                type: ModalFactory.types.DEFAULT,\r\n                title: str[0],\r\n                body: this.getBody(),\r\n                footer: this.getFooter(str),\r\n                });\r\n            }.bind(this)).then(function(modal) {\r\n                // Keep a reference to the modal.\r\n                this.modal = modal;\r\n                // Forms are big, we want a big modal.\r\n                this.modal.setLarge(); \r\n                \r\n                this.modal.getRoot().addClass('openLMStransition local_notifications');\r\n\r\n \r\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\r\n                    this.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\r\n                        modal.destroy();\r\n                }.bind(this));\r\n\r\n                this.modal.getFooter().find('[data-action=\"save\"]').on('click', this.submitForm.bind(this));\r\n                // We also catch the form submit event and use it to submit the form with ajax.\r\n\r\n  \r\n                this.modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\r\n                    modal.hide();\r\n                    setTimeout(function(){\r\n                        modal.destroy();\r\n                    }, 5000);\r\n                });\r\n\r\n                this.modal.getFooter().find('[data-action=\"skip\"]').on('click', function() {\r\n                    self.args.form_status = self.args.form_status + 1;\r\n                    var data = self.getBody();\r\n                    data.then(function(html, js) {\r\n                        if(html === false) {\r\n                            window.location.reload();\r\n                        }\r\n                    });\r\n                    modal.setBody(data);\r\n                });\r\n\r\n                this.modal.getRoot().on('submit', 'form', function(form) {\r\n                    self.submitFormAjax(form, self.args);\r\n                });\r\n                this.modal.show();\r\n                this.modal.getRoot().animate({\"right\":\"0%\"}, 500);\r\n\r\n                return this.modal;\r\n            }.bind(this));       \r\n        \r\n    };\r\n \r\n    /**\r\n     * @method getBody\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewNotification.prototype.getBody = function(formdata) {\r\n        if (typeof formdata === \"undefined\") {\r\n            formdata = {};\r\n        }\r\n\r\n        this.args.jsonformdata = JSON.stringify(formdata);\r\n        return Fragment.loadFragment('local_notifications', 'new_notification_form', this.contextid, this.args);\r\n    };\r\n    /**\r\n     * @method getFooter\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewNotification.prototype.getFooter = function(str) {\r\n\r\n        $footer = '<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">'+str[1]+'</button>&nbsp;';\r\n        $footer += '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">'+str[2]+'</button>';\r\n        return $footer;\r\n    };\r\n \r\n    /**\r\n     * @method handleFormSubmissionResponse\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewNotification.prototype.handleFormSubmissionResponse = function() {\r\n        this.modal.hide();\r\n        // We could trigger an event instead.\r\n        // Yuk.\r\n        Y.use('moodle-core-formchangechecker', function() {\r\n            M.core_formchangechecker.reset_form_dirty_state();\r\n        });\r\n        // document.location.reload();\r\n        // This will be the context for our template. So {{name}} in the template will resolve to \"Tweety bird\".\r\n        var context = { id: args.id};\r\n \r\n\r\n\r\n    };\r\n \r\n    /**\r\n     * @method handleFormSubmissionFailure\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewNotification.prototype.handleFormSubmissionFailure = function(data) {\r\n        // Oh noes! Epic fail :(\r\n        // Ah wait - this is normal. We need to re-display the form with errors!\r\n        this.modal.setBody(this.getBody(data));\r\n    };\r\n \r\n    /**\r\n     * Private method\r\n     *\r\n     * @method submitFormAjax\r\n     * @private\r\n     * @param {Event} e Form submission event.\r\n     */\r\n    NewNotification.prototype.submitFormAjax = function(e ,args) {\r\n        // We don't want to do a real form submission.\r\n        e.preventDefault();\r\n        var self = this;\r\n        // Convert all the form elements values to a serialised string.\r\n        var formData = this.modal.getRoot().find('form').serialize();\r\n        // var methodname = args.plugintype + '_' + args.pluginname + '_submit_create_user_form';\r\n        var methodname = 'local_notifications_submit_create_notification_form';\r\n        var params = {};\r\n        params.contextid = this.contextid;\r\n        params.jsonformdata = JSON.stringify(formData);\r\n        params.form_status = args.form_status;\r\n\r\n        var promise = Ajax.call([{\r\n            methodname: methodname,\r\n            args: params\r\n        }]);\r\n\r\n         promise[0].done(function(resp){\r\n\r\n            self.modal.hide();\r\n            window.location.reload();\r\n    \r\n        }).fail(function(ex){\r\n            self.handleFormSubmissionFailure(formData);\r\n        })\r\n\r\n    };\r\n \r\n    /**\r\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\r\n     *\r\n     * @method submitForm\r\n     * @param {Event} e Form submission event.\r\n     * @private\r\n     */\r\n    NewNotification.prototype.submitForm = function(e) {\r\n        e.preventDefault();\r\n        var self = this;\r\n        self.modal.getRoot().find('form').submit();\r\n    };\r\n \r\n    return /** @alias module:local_notifications */ {\r\n        // Public variables and functions.\r\n        /**\r\n         * Attach event listeners to initialise this module.\r\n         *\r\n         * @method init\r\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\r\n         * @param {int} contextid The contextid for the course.\r\n         * @return {Promise}\r\n         */\r\n        init: function(args) {\r\n            return new NewNotification(args);\r\n        },\r\n        load: function(){\r\n\r\n        }\r\n    };\r\n});\r\n"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","NewNotification","args","notificationid","instance","plugin","contextid","context","id","this","init","prototype","modal","self","head","key","component","get_strings","then","str","create","type","types","DEFAULT","title","body","getBody","footer","getFooter","bind","setLarge","getRoot","addClass","on","hidden","animate","destroy","find","submitForm","hide","setTimeout","form_status","data","html","js","window","location","reload","setBody","form","submitFormAjax","show","formdata","jsonformdata","JSON","stringify","loadFragment","$footer","handleFormSubmissionResponse","use","M","core_formchangechecker","reset_form_dirty_state","handleFormSubmissionFailure","e","preventDefault","formData","serialize","params","call","methodname","done","resp","fail","ex","submit","load"],"mappings":"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"}