{"version":3,"file":"user_custom_form.min.js","sources":["../src/user_custom_form.js"],"sourcesContent":["import TPDynamicForm from 'local_trainingprogram/dynamicform';\nimport ModalForm from 'core_form/modalform';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\nimport {get_string as getString} from 'core/str';\n\nconst Selectors = {\n    actions: {\n        createuser_custom_form: '[data-action=\"user_custom_form\"]',\n        useraddwallet: '[data-action=\"user_wallet_form\"]',\n        removerequest: '[data-action=\"removerequest\"]',\n\n    },\n};\nexport const init = () => {\n    document.addEventListener('click', function(e) {\n        //e.stopImmediatePropagation()\n        let element = e.target.closest(Selectors.actions.createuser_custom_form);\n        if (element) {\n            e.preventDefault();\n            const title = element.getAttribute('data-id') ?\n                getString('editcustom', 'local_userapproval', element.getAttribute('data-name')) :\n                getString('addcustom', 'local_userapproval');\n            const form = new TPDynamicForm({\n                formClass: 'local_userapproval\\\\form\\\\user_custom_form',\n                args: {id: element.getAttribute('data-id'),userid: element.getAttribute('data-userid')},\n                modalConfig: {title},\n                returnFocus: element,\n            });\n            form.addEventListener(form.events.FORM_SUBMITTED, () => window.location.reload());\n            form.show();\n        }\n\n         let removerequest = e.target.closest(Selectors.actions.removerequest);\n        if (removerequest) {\n             e.preventDefault();\n            const orgid = removerequest.getAttribute('data-orgid');\n            const userid = removerequest.getAttribute('data-userid');\n            const orgname = removerequest.getAttribute('data-orgname');\n            ModalFactory.create({\n                title: getString('removeconfirm', 'local_userapproval'),\n                type: ModalFactory.types.SAVE_CANCEL,\n                body: getString('orgrequestremoveconfirm', 'local_userapproval',orgname)\n            }).done(function(modal) {\n                this.modal = modal;\n                modal.setSaveButtonText(getString('orgrequestremoveconfirmtext', 'local_userapproval'));\n                modal.getRoot().on(ModalEvents.save, function(e) {\n                    e.preventDefault();\n                    var params = {};\n                    params.orgid = orgid;\n                    params.userid = userid;\n                    var promise = Ajax.call([{\n                        methodname: 'local_userapproval_removeorgrequest',\n                        args: params\n                    }]);\n                    promise[0].done(function(resp) {\n                        window.location.reload(true);\n                    }).fail(function() {\n                        console.log('exception');\n                    });\n                }.bind(this));\n                modal.show();\n            }.bind(this));\n        }\n        let walletelement = e.target.closest(Selectors.actions.useraddwallet);\n        if (walletelement) {\n            e.preventDefault();\n            const title = getString('addwallet', 'local_userapproval');\n            const form = new ModalForm({\n                formClass: 'local_userapproval\\\\form\\\\user_wallet_form',\n                args: {userid: walletelement.getAttribute('data-userid')},\n                modalConfig: {title},\n                returnFocus: walletelement,\n            });\n            form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n                e.preventDefault();\n                const response = JSON.parse(e.detail);\n                window.location.href = response.returnurl;\n            });\n            form.show();\n        }\n    });\n\n};\n"],"names":["Selectors","createuser_custom_form","useraddwallet","removerequest","document","addEventListener","e","element","target","closest","preventDefault","title","getAttribute","form","TPDynamicForm","formClass","args","id","userid","modalConfig","returnFocus","events","FORM_SUBMITTED","window","location","reload","show","orgid","orgname","create","type","ModalFactory","types","SAVE_CANCEL","body","done","modal","setSaveButtonText","getRoot","on","ModalEvents","save","params","Ajax","call","methodname","resp","fail","console","log","bind","this","walletelement","ModalForm","response","JSON","parse","detail","href","returnurl"],"mappings":"0pBAOMA,kBACO,CACLC,uBAAwB,mCACxBC,cAAe,mCACfC,cAAe,+CAIH,KAChBC,SAASC,iBAAiB,SAAS,SAASC,OAEpCC,QAAUD,EAAEE,OAAOC,QAAQT,kBAAkBC,2BAC7CM,QAAS,CACTD,EAAEI,uBACIC,MAAQJ,QAAQK,aAAa,YAC/B,mBAAU,aAAc,qBAAsBL,QAAQK,aAAa,eACnE,mBAAU,YAAa,sBACrBC,KAAO,IAAIC,qBAAc,CAC3BC,UAAW,6CACXC,KAAM,CAACC,GAAIV,QAAQK,aAAa,WAAWM,OAAQX,QAAQK,aAAa,gBACxEO,YAAa,CAACR,MAAAA,OACdS,YAAab,UAEjBM,KAAKR,iBAAiBQ,KAAKQ,OAAOC,gBAAgB,IAAMC,OAAOC,SAASC,WACxEZ,KAAKa,WAGJvB,cAAgBG,EAAEE,OAAOC,QAAQT,kBAAkBG,kBACpDA,cAAe,CACdG,EAAEI,uBACGiB,MAAQxB,cAAcS,aAAa,cACnCM,OAASf,cAAcS,aAAa,eACpCgB,QAAUzB,cAAcS,aAAa,uCAC9BiB,OAAO,CAChBlB,OAAO,mBAAU,gBAAiB,sBAClCmB,KAAMC,uBAAaC,MAAMC,YACzBC,MAAM,mBAAU,0BAA2B,qBAAqBN,WACjEO,KAAK,SAASC,YACRA,MAAQA,MACbA,MAAMC,mBAAkB,mBAAU,8BAA+B,uBACjED,MAAME,UAAUC,GAAGC,sBAAYC,KAAM,SAASnC,GAC1CA,EAAEI,qBACEgC,OAAS,GACbA,OAAOf,MAAQA,MACfe,OAAOxB,OAASA,OACFyB,cAAKC,KAAK,CAAC,CACrBC,WAAY,sCACZ7B,KAAM0B,UAEF,GAAGP,MAAK,SAASW,MACrBvB,OAAOC,SAASC,QAAO,MACxBsB,MAAK,WACJC,QAAQC,IAAI,iBAElBC,KAAKC,OACPf,MAAMV,QACRwB,KAAKC,WAEPC,cAAgB9C,EAAEE,OAAOC,QAAQT,kBAAkBE,kBACnDkD,cAAe,CACf9C,EAAEI,uBACIC,OAAQ,mBAAU,YAAa,sBAC/BE,KAAO,IAAIwC,mBAAU,CACvBtC,UAAW,6CACXC,KAAM,CAACE,OAAQkC,cAAcxC,aAAa,gBAC1CO,YAAa,CAACR,MAAAA,OACdS,YAAagC,gBAEjBvC,KAAKR,iBAAiBQ,KAAKQ,OAAOC,gBAAiBhB,IAC/CA,EAAEI,uBACI4C,SAAWC,KAAKC,MAAMlD,EAAEmD,QAC9BlC,OAAOC,SAASkC,KAAOJ,SAASK,aAEpC9C,KAAKa"}