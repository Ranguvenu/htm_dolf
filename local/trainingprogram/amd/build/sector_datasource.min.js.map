{"version":3,"file":"sector_datasource.min.js","sources":["../src/sector_datasource.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n//const { exists } = require(\"grunt\");\n\n\ndefine(['jquery', 'core/ajax', 'core/notification'], function($, Ajax, Notification) {\n\n    return /** @alias module:tool_lpmigrate/frameworks_datasource */ {\n\n        /**\n         * Process the results for auto complete elements.\n         *\n         * @param {String} selector The selector of the auto complete element.\n         * @param {Array} results An array or results.\n         * @return {Array} New array of results.\n         */\n        processResults: function(selector, results) {\n            var options = [];\n\n            $.each(results.data, function(index, response) {\n                options.push({\n                    value: response.id,\n                    label: response.title\n                });\n            });\n            return options;\n        },\n\n        /**\n         * Source of data for Ajax element.\n         *\n         * @param {String} selector The selector of the auto complete element.\n         * @param {String} query The query string.\n         * @param {Function} callback A callback function receiving an array of results.\n         */\n        /* eslint-disable promise/no-callback-in-promise */\n        transport: function(selector, query, callback) {\n            var el = $(selector),\n            sectorid=0,allsegments=0,sectorlist=0,selected_sectorlist=0,\n            type = el.data('type');\n            switch(type){\n                case 'segment':\n                    sectorid = el.attr('data-sectorid');\n                    if(typeof sectorid === 'undefined' || sectorid === '0' || sectorid === 0 || sectorid === ''){\n                        var single_sector = el.attr('data-single_sector');\n                        if(single_sector == 1) {\n                            sectorlist = $(\"select[name='sectors'] option:selected\").map(function(){ return this.value }).get().join(\", \");\n                        } else {\n                            sectorlist = $(\"select[name='sectors[]'] option:selected\").map(function(){ return this.value }).get().join(\", \");\n                        }\n                    }\n                    break;\n                case 'jobfamily':\n                    //sectorid = el.data('segmentid');\n                    sectorid = el.attr('data-segmentid');\n                    console.log(sectorid);\n                    if(typeof sectorid === 'undefined'){\n                        selected_sectorlist = $(\"input[name='newjobfamilyoption']\").attr('value');\n                        if (!selected_sectorlist) {\n                            selected_sectorlist = \"\";\n                        }\n                        console.log(selected_sectorlist);\n                        // sectorlist =el.attr('data-sectorid');\n                        sectorlist = $(\"select[name='sectors[]'] option:selected\").map(function(){ return this.value }).get().join(\",\");\n                        if(sectorlist != 0){\n                            allsegments =  1;\n                        }\n                    }\n                    break;\n                case 'jobrole':\n                    //sectorid = el.data('jobfamilyid');\n                    sectorid = el.attr('data-jobfamilyid');\n                    break;\n            }\n            \n\n            Ajax.call([{\n                methodname: 'local_trainingprogram_segmentlist',\n                args: {query:query, type: type, selected_sectorlist: selected_sectorlist, sectorid: sectorid,sectorlist: sectorlist, allsegments: allsegments}\n            }])[0].then(callback).catch(Notification.exception);\n        }\n    };\n\n});\n"],"names":["define","$","Ajax","Notification","processResults","selector","results","options","each","data","index","response","push","value","id","label","title","transport","query","callback","el","sectorid","allsegments","sectorlist","selected_sectorlist","type","attr","map","this","get","join","console","log","call","methodname","args","then","catch","exception"],"mappings":"AAkBAA,iDAAO,CAAC,SAAU,YAAa,sBAAsB,SAASC,EAAGC,KAAMC,oBAEF,CAS7DC,eAAgB,SAASC,SAAUC,aAC3BC,QAAU,UAEdN,EAAEO,KAAKF,QAAQG,MAAM,SAASC,MAAOC,UACjCJ,QAAQK,KAAK,CACTC,MAAOF,SAASG,GAChBC,MAAOJ,SAASK,WAGjBT,SAWXU,UAAW,SAASZ,SAAUa,MAAOC,cAC7BC,GAAKnB,EAAEI,UACXgB,SAAS,EAAEC,YAAY,EAAEC,WAAW,EAAEC,oBAAoB,EAC1DC,KAAOL,GAAGX,KAAK,eACRgB,UACE,kBAEsB,KADvBJ,SAAWD,GAAGM,KAAK,mBACgC,MAAbL,UAAiC,IAAbA,UAA+B,KAAbA,SAGpEE,WADgB,GADAH,GAAGM,KAAK,sBAEXzB,EAAE,0CAA0C0B,KAAI,kBAAmBC,KAAKf,SAASgB,MAAMC,KAAK,MAE5F7B,EAAE,4CAA4C0B,KAAI,kBAAmBC,KAAKf,SAASgB,MAAMC,KAAK,gBAIlH,YAEDT,SAAWD,GAAGM,KAAK,kBACnBK,QAAQC,IAAIX,eACW,IAAbA,YACNG,oBAAsBvB,EAAE,oCAAoCyB,KAAK,YAE7DF,oBAAsB,IAE1BO,QAAQC,IAAIR,qBAGK,IADjBD,WAAatB,EAAE,4CAA4C0B,KAAI,kBAAmBC,KAAKf,SAASgB,MAAMC,KAAK,QAEvGR,YAAe,cAItB,UAEDD,SAAWD,GAAGM,KAAK,oBAK3BxB,KAAK+B,KAAK,CAAC,CACPC,WAAY,oCACZC,KAAM,CAACjB,MAAMA,MAAOO,KAAMA,KAAMD,oBAAqBA,oBAAqBH,SAAUA,SAASE,WAAYA,WAAYD,YAAaA,gBAClI,GAAGc,KAAKjB,UAAUkB,MAAMlC,aAAamC"}