<?php 
namespace local_lmsws\local;

require_once($CFG->dirroot .'/course/lib.php');
require_once($CFG->libdir . '/completionlib.php');
require_once($CFG->dirroot .'/mod/attendance/externallib.php');
require_once($CFG->dirroot . '/mod/zoom/lib.php');
require_once($CFG->dirroot.'/mod/zoom/locallib.php');
require_once($CFG->dirroot.'/user/lib.php');
require_once($CFG->dirroot.'/group/lib.php');
require_once($CFG->dirroot.'/lib/moodlelib.php');
require_once($CFG->dirroot.'/mod/msteams/lib.php');
require_once($CFG->dirroot .'/mod/zoom/lib.php');
require_once($CFG->dirroot .'/mod/webexactivity/lib.php');
require_once($CFG->dirroot.'/mod/quiz/lib.php');
require_once($CFG->dirroot.'/mod/attendance/lib.php');
use stdClass;
use dml_exception;
use html_writer;
use moodle_url;
use context_system;
use tabobject;
use user_create_user;
use context_user;
use core_user;
use filters_form;
use mod_attendance_external;
use local_lmsws\local\createoffering;
use local_lmsws\local\trainingprogram as tp;
use single_button;
use local_learningtracks\learningtracks as learningtracks;
// require_once($CFG->dirroot . '/local/trainingprogram/filters_form.php');
require_once($CFG->dirroot . '/local/trainingprogram/lib.php');
use local_lmsws\local\dataprovider as dataprovider;

/**
 * Training program library file
 */
class trainingprogram
{

    const CORECOMPETENCIES = 'corecompetencies';
    const TECHNICALCOMPETENCIES = 'technicalcompetencies';
    const BEHAVIORALCOMPETENCIES = 'behavioralcompetencies';
    
    public function add_new($data) {
        global $DB,$USER;


        $context = context_system::instance();
        $tpdata = new stdClass();

        $tpdata->name = ucwords($data->name);
        $tpdata->namearabic = $data->namearabic;
        $tpdata->image = $data->image ? $data->image : 0;

        if(!is_null($data->oldid)) {

            $tpdata->oldid = $data->oldid;

        }
        $tpdata->price = $data->cost;
        if($data->cost == 1) {
           $tpdata->sellingprice = $data->sellingprice;
           $tpdata->actualprice = $data->actualprice;
        } else {
           $tpdata->sellingprice = 0;
           $tpdata->actualprice = 0;
        }
        $tpdata->description = $data->description['text'];
        $tpdata->program_goals = $data->program_goals['text'];
        $tpdata->languages= is_array($data->language)?implode(',',$data->language):$data->language;
        $tpdata->methods = implode(',',$data->programmethod);
        $tpdata->evaluationmethods = $data->evaluationmethod?implode(',',$data->evaluationmethod):null;
        $tpdata->duration = $data->duration;
        $tpdata->availableto = $data->availableto;
        $tpdata->availablefrom = $data->availablefrom;
        $tpdata->hour = $data->hour;
        $tpdata->sectors = implode(',', array_filter($data->sectors));
        $tpdata->clevels =  $data->clevels;

      
        if($data->alltargetgroup == 1 ) {
            $tpdata->targetgroup = '-1';
        } else {
            $tpdata->targetgroup = implode(',',array_filter($data->targetgroup));
        }
        $tpdata->discount = $data->discount ? $data->discount: 0;
        $tpdata->competencyandlevels = implode(',', array_filter($data->competencylevel));
        //autogenerated code - starts
        $sectorcode = $DB->get_field('local_sector','code',array('id'=>$data->sectors['0']));
        $competencycode = $DB->get_field('local_competencies','code',array('id'=>$data->competencylevel['0']));
        if(empty($data->code)) {
            $tpid=$DB->get_field_sql('SELECT id FROM {local_trainingprogram} ORDER BY id DESC LIMIT 1');
            if ($tpid) {
                $autoincnum = $tpid+1;
            } else {
                $autoincnum = 1;
            }
            $num = sprintf("%'.04d", $autoincnum);
            $code = $sectorcode.'-'.$competencycode.'-'.$num;
            if($DB->record_exists('local_trainingprogram',array('code' => $code))) {
                $tpdata->code = $sectorcode.'-'.$competencycode.'-'.$num+1;
            } else {
                $tpdata->code = $sectorcode.'-'.$competencycode.'-'.$num;
            }
        } else {

            $tpdata->code = $data->code;
        }

        $tpdata->attendancecmpltn = $data->attendancecmpltn;
        $tpdata->attendancepercnt = $data->attendancepercnt;

        $course = new stdClass();
        $course->fullname = '{mlang en}'.$data->name.'{mlang}{mlang ar}'.$data->namearabic.'{mlang}';
        $course->shortname = $tpdata->code;
        $course->category = self::get_category();

        try{

            //set default value for completion
            $courseconfig = get_config('moodlecourse');
            if (\completion_info::is_enabled_for_site()) {
                $course->enablecompletion = 1;
            } else {
                $course->enablecompletion = 0;
            }

            $course = create_course($course);
            $tpdata->courseid = $course->id;

            if($data->evaluationmethod){

                $modinfo = [
                    'modulename' => 'quiz',
                    'gradepass'=>0,
                    'grade'=>10,
                    'gradecat'=>$course->category,
                    'course' => $tpdata->courseid,
                    'section' => 0,
                    'visible' => 1,
                    'quizpassword'=>0,
                    'completion' => 2,
                    'completiongradeitemnumber'=>0,
                    'cmidnumber' => '',
                    'preferredbehaviour'=>'deferredfeedback',
                    'introeditor' => ['text' => '', 'format' => FORMAT_HTML, 'itemid' => null],
            ];

                $evlmethodsfields = dataprovider::$evaluationmethods;

                $evlmethods = array_values(dataprovider::$evaluationmethods);


               

            }

        } catch(moodle_exception $e){
            print_r($e);
        }
       try{
          $createdid =  $DB->insert_record('local_trainingprogram', $tpdata); 
          $event = \local_trainingprogram\event\trainingprogram_created::create(array( 'context'=>$context, 'objectid' =>$createdid));
          $event->trigger();
                $tpdata->program_name=$tpdata->name;                  
                    (new \local_trainingprogram\notification())->trainingprogram_notification('trainingprogram_create', $touser=null,$fromuser=$USER,$tpdata,$waitinglistid=0);
          return $createdid;
       } catch(dml_exception $e){
            print_r($e);
       }
    }

    public function update_program($data) {
        global $DB,$USER;
        $tpdata = new stdClass();
    
        $context = context_system::instance();

        

        $tpdata->id = $data->id;
        $tpdata->name = $data->name;
        $tpdata->namearabic = $data->namearabic;
        $tpdata->image = $data->image ? $data->image : 0;
        if(!is_null($data->oldid)) {

            $tpdata->oldid = $data->oldid;

        }
        $tpdata->price = $data->cost ? $data->cost : 0;
        if($data->cost == 1) {
           $tpdata->sellingprice = $data->sellingprice;
           $tpdata->actualprice = $data->actualprice;
        } else {
           $tpdata->sellingprice = 0;
           $tpdata->actualprice = 0;
        }
        $tpdata->description = $data->description['text'];
        $tpdata->program_goals = $data->program_goals['text'];
        $tpdata->languages= implode(',', $data->language);
        $tpdata->methods = implode(',',$data->programmethod);
        $tpdata->evaluationmethods = $data->evaluationmethod?implode(',',$data->evaluationmethod):null;
        $tpdata->duration = $data->duration;
        $tpdata->availableto = $data->availableto;
        $tpdata->availablefrom = $data->availablefrom;
        $tpdata->hour = $data->hour;
        $tpdata->sectors = implode(',', array_filter($data->sectors));
        $tpdata->clevels = $data->clevels;
        if($data->alltargetgroup == 1) { 
           
            $tpdata->targetgroup = '-1';
        } else {
            $tpdata->targetgroup = implode(',',array_filter($data->targetgroup));
        }
        $tpdata->discount = $data->discount?$data->discount:0;
        $tpdata->competencyandlevels =implode(',',array_filter($data->competencylevel));

        $tpdata->attendancecmpltn = $data->attendancecmpltn;
        $tpdata->attendancepercnt = $data->attendancepercnt;

        $course = new stdClass();
        $course->id = $data->courseid;
        $course->fullname = '{mlang en}'.$data->name.'{mlang}{mlang ar}'.$data->namearabic.'{mlang}';
        $course->summary = $data->description['text'];
        $course->category = self::get_category();

        try{
             //set default value for completion
            $courseconfig = get_config('moodlecourse');
            if (\completion_info::is_enabled_for_site()) {
                $course->enablecompletion = 1;
            } else {
                $course->enablecompletion = 0;
            }

             update_course($course);
            $tpdata->courseid = $data->courseid;

            $modinfo = [
                    'modulename' => 'quiz',
                    'gradepass'=>0,
                    'grade'=>10,
                    'gradecat'=>$course->category,
                    'course' => $course->id,
                    'section' => 0,
                    'visible' => 1,
                    'quizpassword'=>0,
                    'completion' => 2,
                    'completiongradeitemnumber'=>0,
                    'cmidnumber' => '',
                    'preferredbehaviour'=>'deferredfeedback',
                    'introeditor' => ['text' => '', 'format' => FORMAT_HTML, 'itemid' => null],
             ];


            $evlmethodsfields = dataprovider::$evaluationmethods;

            $evlmethods = array_values(dataprovider::$evaluationmethods);

            
        } catch(moodle_exception $e){
            print_r($e);
        }
        
        try{
           $DB->update_record('local_trainingprogram', $tpdata); 
           $event = \local_trainingprogram\event\trainingprogram_updated::create(array( 'context'=>$context, 'objectid' => $data->id));
           $event->trigger();
           $tpdata->program_name=$tpdata->name;                      
               (new \local_trainingprogram\notification())->trainingprogram_notification('trainingprogram_update', $touser=null,$fromuser=$USER,$tpdata,$waitinglistid=0);
         
       } catch(dml_exception $e){
            print_r($e);
       }
    }

    public function get_trainingprograms() {
        global $DB, $PAGE, $OUTPUT;
        $systemcontext = context_system::instance();
        $renderer = $PAGE->get_renderer('local_trainingprogram');
        $training_programs = $renderer->get_catalog_trainingprograms();
    }

    public function get_programdata($stable, $filterdata){
        global $DB,$CFG;
        $sql = "SELECT lo.id, lo.name,lo.namearabic,lo.image,lo.description,lo.sectors, lo.sellingprice,lo.duration, lo.hour,lo.availableto
                  FROM {local_trainingprogram} lo  
                 WHERE lo.published=1 AND lo.id NOT IN (SELECT programid FROM {program_completions} WHERE  completion_status = 1) AND date(FROM_UNIXTIME(lo.availableto)) >= CURDATE() "; 

        if($filterdata->sector){

            $sectorid = $DB->get_field('local_sector', 'id', ['code' => $filterdata->sector]);
            if($sectorid){
                $sql .=' AND FIND_IN_SET('.$sectorid.', lo.sectors) ';
            }else{
                $othersectors = $DB->get_fieldset_sql('select id from {local_sector} where  code not in("finance", "capitalmarket", "banking", "insurance")');
                if(empty($othersectors)){
                    return [];
                }
                $sectorlist = implode(',', $othersectors);
                $sql .=' AND  lo.sectors not in('.$sectorlist.')';
            }
            
        }
        $programs = $DB->get_records_sql($sql, array(), $stable->start,$stable->length);

        $programdata = [];
        foreach($programs as $program){
          $banking = false;
          $capitalmarket = false;
          $finance = false;
          $insurance = false;
            if (!empty($program->image)) {
                $programimageurl =trainingprogramlogo_url($program->image);
            }else{
                $programimageurl ='';
            }
            if($program->sectors){
                $programsectors = $DB->get_fieldset_sql('select code from {local_sector} where id in('.$program->sectors.')');
                $listedsectors = ['capitalmarket', 'finance', 'insurance', 'banking'];
                foreach($listedsectors as $sector){
                    if(in_array($sector, $programsectors)){
                        ${$sector} = true;
                    }
                }
            }else{
                $programsectors = '';
            }
            if(current_language() == 'ar'){
                $programname = $program->namearabic;
            }else{
                $programname = $program->name;
            }
            $programdata[] = ['id' => $program->id,
                              'title' => $programname,
                              'description' => mb_substr(strip_tags(format_text($program->description, FORMAT_HTML)),0, 200),
                              'sellingprice' => $program->sellingprice,
                              'imageurl'=> $programimageurl,
                              'capitalmarket' => $capitalmarket,
                              'finance' => $finance,
                              'insurance' => $insurance,
                              'banking' => $banking,
                              'hours' =>round($program->hour / 86400),
                              'durationindays' => round($program->duration / 86400),
                              'rooturl' =>$CFG->wwwroot
                            ];
        }
        return $programdata;

    }

    private function program_rolewise_query($filterdata) {
        global $USER;
        $systemcontext = context_system::instance();
        if(!$filterdata->status) {
            if(is_siteadmin() || has_capability('local/organization:manage_trainingofficial',$systemcontext) 
               ){
                $where = " WHERE date(FROM_UNIXTIME(lo.availableto)) >= CURDATE() ";
                // if(!is_siteadmin() && has_capability('local/organization:manage_organizationofficial',$systemcontext)){
                //     $where.= " AND lo.id NOT IN (SELECT tpofr.trainingid 
                //                     FROM {tp_offerings} AS tpofr
                //                     JOIN {tool_order_approval_seats} AS ordaprst ON ordaprst.tablename='tp_offerings' AND ordaprst.fieldname='id' AND ordaprst.fieldid=tpofr.id AND ordaprst.orguserid=$USER->id) ";
                // }
            }elseif(!is_siteadmin() && has_capability('local/organization:manage_organizationofficial',$systemcontext)){
                 $where = " WHERE lo.published = 1 AND date(FROM_UNIXTIME(lo.availableto)) >= CURDATE() ";

            }else if(!is_siteadmin() && has_capability('local/organization:manage_trainer', $systemcontext)) {
               
                $where = " JOIN {program_enrollments} ue ON ue.programid=lo.id AND ue.courseid=lo.courseid WHERE ue.userid = ".$USER->id." AND lo.published = 1 AND date(FROM_UNIXTIME(lo.availableto)) >= CURDATE() ";

            } else {
                $where = " JOIN {program_enrollments} ue ON ue.programid=lo.id AND  ue.courseid=lo.courseid WHERE ue.userid = ".$USER->id." AND lo.published = 1 AND lo.id NOT IN (SELECT pc.programid FROM {program_completions} pc WHERE pc.userid = ".$USER->id."  AND pc.completion_status = 1) ";
            }
        }else{

            if(is_siteadmin() || has_capability('local/organization:manage_trainingofficial',$systemcontext) 
               || has_capability('local/organization:manage_organizationofficial',$systemcontext)){

                $where= " WHERE date(FROM_UNIXTIME(lo.availableto)) < CURDATE()"; 
       

            } else if(!is_siteadmin() && has_capability('local/organization:manage_trainer', $systemcontext)) {

                $where = " JOIN {program_enrollments} ue ON ue.programid=lo.id AND ue.courseid=lo.courseid WHERE ue.userid = ".$USER->id." AND lo.published = 1 AND date(FROM_UNIXTIME(lo.availableto)) < CURDATE() ";

            } else {
                $where = " JOIN {program_completions} pc ON pc.programid = lo.id 
                          WHERE  pc.userid = ".$USER->id." AND pc.completion_status = 1";
            }
        }
        return $where;
    }
    private function programs_filter_query($filterdata) {
        if  (isset($filterdata->search_query) && trim($filterdata->search_query) != ''){
            $formsql .= " AND (lo.name LIKE :firstnamesearch) ";
            $searchparams = array('firstnamesearch' => '%'.trim($filterdata->search_query).'%');
        } else {
            $searchparams = array();
        }

        if (!empty($filterdata->sectors)){
             $sectorids = explode(',', $filterdata->sectors);
             if(!empty($sectorids)){
                $sectorquery = array();
                foreach ($sectorids as $sector) {
                    $sectorquery[] = " CONCAT(',',lo.sectors,',') LIKE CONCAT('%,',$sector,',%') "; 
                }
                $sectoqueeryparams =implode('OR',$sectorquery);
                $formsql .= ' AND ('.$sectoqueeryparams.') ';
            }
        }
        
        if(!empty($filterdata->targetgroup)){

            $jobfamilyids = explode(',', $filterdata->targetgroup);
            if(!empty($jobfamilyids)){
                $jobfamilyquery = array();
                foreach ($jobfamilyids as $jobfamily) {
                    $jobfamilyquery[] = " CONCAT(',',lo.targetgroup,',') LIKE CONCAT('%,',$jobfamily,',%') "; 
                }
                $jobfamilyparams =implode('OR',$jobfamilyquery);
                $formsql .= ' AND ( ('.$jobfamilyparams.') OR lo.targetgroup = -1 ) ';
            }
        }

        if(!empty($filterdata->program_competencylevel)){

            $competencylevelsids = explode(',', $filterdata->program_competencylevel);
            if(!empty($competencylevelsids)){
                $competencylevelquery = array();
                foreach ($competencylevelsids as $competencylevel) {
                    $competencylevelquery[] = " CONCAT(',',lo.competencyandlevels,',') LIKE CONCAT('%,',$competencylevel,',%') "; 
                }
                $competencylevelparams =implode('OR',$competencylevelquery);
                $formsql .= ' AND ('.$competencylevelparams.') ';
            }
        }
       // if(!empty($filterdata->sectors)){

       //      $formsql.=" AND  lo.sectors IN ($filterdata->sectors) ";
       //  }


       //  if(!empty($filterdata->targetgroup)){

       //      $formsql.=" AND (lo.targetgroup IN ($filterdata->targetgroup) OR lo.targetgroup = -1) ";
       //  }
       //  if(!empty($filterdata->program_competencylevel)){

       //      $formsql.=" AND  lo.competencyandlevels IN ($filterdata->program_competencylevel) ";
       //  }
        if($filterdata->{'availablefrom[enabled]'} == 1 ){

            $start_year = $filterdata->{'availablefrom[year]'};
            $start_month = $filterdata->{'availablefrom[month]'};
            $start_day = $filterdata->{'availablefrom[day]'};
            $filter_starttime_con = mktime(0,0,0, $start_month, $start_day, $start_year);
            $formsql.= " AND lo.availablefrom >= '$filter_starttime_con' ";

        }
        if($filterdata->{'availableto[enabled]'} == 1 ){
            $start_year = $filterdata->{'availableto[year]'};
            $start_month = $filterdata->{'availableto[month]'};
            $start_day = $filterdata->{'availableto[day]'};
            $filter_endtime_con=mktime(23,59,59, $start_month, $start_day, $start_year);
            $formsql.=" AND lo.availableto <= '$filter_endtime_con' ";
        }
        return array($formsql, $searchparams);
    }

    
    public function get_listof_programs($stable, $filterdata) {
        global $DB, $PAGE, $OUTPUT, $CFG, $USER;
        $lang= current_language();
        $systemcontext = context_system::instance();
        $selectsql = "SELECT lo.id as traineeid,lo.name as programname,lo.namearabic,lo.availableto,lo.availablefrom,
                             lo.image,lo.courseid,lo.description,lo.sectors,lo.targetgroup,
                             lo.competencyandlevels,lo.published,lo.duration 
                        FROM {local_trainingprogram} lo";

        $countsql  = "SELECT COUNT(lo.id) FROM {local_trainingprogram} lo";

        $where = $this->program_rolewise_query($filterdata);
        list($formsql, $searchparams) = $this->programs_filter_query($filterdata);

        $params = array_merge($searchparams);
    
        $totalprograms = $DB->count_records_sql($countsql.$where.$formsql,$params);
        $formsql .=" ORDER BY lo.id DESC";

        $trainingprograms = $DB->get_records_sql($selectsql.$where.$formsql, $params, $stable->start,$stable->length);
        $trainingprogramlist = array();
        $count = 0;
        foreach($trainingprograms as $trainingprogram) {

               $privateofferings = $DB->count_records('tp_offerings', ['trainingid' => $trainingprogram->traineeid, 
                                                                'type' => dataprovider::PRIVATEPROGRAM]);

               $nonprivateofferings = $DB->count_records_sql('SELECT COUNT(DISTINCT id) FROM {tp_offerings} WHERE trainingid = '.$trainingprogram->traineeid.' AND type <> 1');


               $totalofferings = $DB->count_records_sql('SELECT COUNT(DISTINCT id) FROM {tp_offerings} WHERE trainingid = '.$trainingprogram->traineeid.'');

               if($privateofferings == 1){
                    if(is_siteadmin() || has_capability('local/organization:manage_trainingofficial',$systemcontext) 
                        || has_capability('local/organization:manage_organizationofficial',$systemcontext)){
                        if(!is_siteadmin() && has_capability('local/organization:manage_organizationofficial',$systemcontext)){


                            $organization = $DB->get_field_sql("SELECT lu.organization
                                                                   FROM {local_users} as lu 
                                                                   JOIN {user} as u ON u.id= lu.userid
                                                                   JOIN {role_assignments} as  ra on ra.userid=u.id
                                                                   JOIN {role} as r ON ra.roleid = r.id  AND r.shortname = 'organizationofficial'
                                                                    AND u.id=$USER->id");
                            if(!$organization){
                                continue;
                            }else{
                                $offeringorg = $DB->get_field_sql('SELECT tpo.organization 
                                                                     FROM {tp_offerings} as tpo
                                                                    WHERE tpo.organization=:orgnization AND tpo.trainingid =:trainingid', 
                                                                        ['orgnization' => $organization, 'trainingid' => $trainingprogram->traineeid]);
                                if($offeringorg != $organization){

                                    if($nonprivateofferings == 0 ||  $totalofferings == 0) {
                                        continue;
                                    }
                                    
                                }
                            }
                        }
                    }else{
                        continue;
                    }
                }

                $trainingprogramlist[$count]['trainingid'] = $trainingprogram->traineeid;
                
               

                 $offering_record_data_sql = "SELECT tpo.startdate, tpo.enddate,tpo.trainingmethod  FROM {local_trainingprogram} loc 
                 JOIN {program_enrollments} ue ON ue.programid=loc.id AND  ue.courseid =loc.courseid  
                 JOIN {tp_offerings} as tpo ON tpo.id=ue.offeringid
                 WHERE ue.userid =:userid AND loc.published = 1  AND ue.programid=loc.id AND loc.id =:programid ";
                 $offering_record_data = $DB->get_record_sql($offering_record_data_sql,['userid' => $USER->id,'programid' => $trainingprogram->traineeid]);

                 $offering_record_data_exists = $DB->record_exists_sql($offering_record_data_sql,['userid' => $USER->id,'programid' => $trainingprogram->traineeid]);

                $programenddate = date('Y-m-d',$trainingprogram->availableto);
                $currdate = date('Y-m-d');


                if(!is_siteadmin() && has_capability('local/organization:manage_trainee',$systemcontext)) {

                     $trainingprogramlist[$count]['availablefrom'] = userdate($offering_record_data->startdate, 
                                                                        get_string('strftimedatemonthabbr', 'core_langconfig'));
                $trainingprogramlist[$count]['availableto'] = userdate($offering_record_data->enddate, 
                                                                        get_string('strftimedatemonthabbr', 'core_langconfig'));
                $trainingprogramlist[$count]['enddatedisplay']=($offering_record_data->trainingmethod == 'elearning') ? false : true;


                } else {
                    
                    $trainingprogramlist[$count]['availablefrom'] = userdate($trainingprogram->availablefrom, 
                                                                        get_string('strftimedatemonthabbr', 'core_langconfig'));
                    $trainingprogramlist[$count]['availableto'] = userdate($trainingprogram->availableto, 
                                                                        get_string('strftimedatemonthabbr', 'core_langconfig'));

                    $trainingprogramlist[$count]['enddatedisplay']= true;


                }
                               
             if($trainingprogram->sectors != null && $trainingprogram->sectors !=0){
                        
                    $trainingprogramlist[$count]['sectorexists'] =true;        
                }else{
                   
                    $trainingprogramlist[$count]['sectorexists'] =false;  
                }
                list($sectorsql,$sectorparams) = $DB->get_in_or_equal(explode(',',$trainingprogram->sectors));
                $currentlang= current_language();

                if( $currentlang == 'ar'){

                    $sectorquerysql = "SELECT id AS sectorid,titlearabic AS sectorname FROM {local_sector} WHERE titlearabic <> '' AND titlearabic IS NOT NULL AND  id $sectorsql";
                } else {

                    $sectorquerysql = "SELECT id AS sectorid,title AS sectorname FROM {local_sector} WHERE id $sectorsql";
                }
                
                $sectorslists= $DB->get_records_sql($sectorquerysql,$sectorparams);

                if(!empty($sectorslists)){
                    $trainingprogramlist[$count]['sectors'] = array_values($sectorslists);
                } else {
                    $trainingprogramlist[$count]['sectors']  = array();
                }  
       
                if($trainingprogram->targetgroup != null){

                    if($trainingprogram->targetgroup == '-1') {

                     $jobfamilies = (new trainingprogram)->get_all_job_families_by_sectors($trainingprogram->sectors);
                     $trainingprogram->targetgroup = implode(',', $jobfamilies);

                    } else {
                      $trainingprogram->targetgroup = $trainingprogram->targetgroup;

                    }    


                     $total_jobfamily_count = $DB->count_records_sql('SELECT COUNT(id) FROM {local_jobfamily} WHERE id in('.$trainingprogram->targetgroup.')');

                     if( $currentlang == 'ar'){

                        $limitedjobfamilyquery = 'select familynamearabic AS familyname from {local_jobfamily} where familynamearabic <> "" AND familynamearabic IS NOT NULL AND id in('.$trainingprogram->targetgroup.') LIMIT 2';

                        $alljobbfamiliesquery = 'select familynamearabic AS familyname from {local_jobfamily} where familynamearabic <> "" AND familynamearabic IS NOT NULL AND id in('.$trainingprogram->targetgroup.') LIMIT '.$total_jobfamily_count.' OFFSET 2';
                        

                      } else {

                        $limitedjobfamilyquery = 'select familyname from {local_jobfamily} where id in('.$trainingprogram->targetgroup.') LIMIT 2';

                         $alljobbfamiliesquery = 'select familyname from {local_jobfamily} where id in('.$trainingprogram->targetgroup.') LIMIT '.$total_jobfamily_count.' OFFSET 2';


                      } 

                    $limitedjobfamily = $DB->get_fieldset_sql($limitedjobfamilyquery);
                    $trainingprogramlist[$count]['limitedjobfamily'] = implode(',', $limitedjobfamily); 

                    $trainingprogramlist[$count]['moreactinview'] = ($total_jobfamily_count > 2) ? true : false;

                    $alljobbfamilies = $DB->get_fieldset_sql($alljobbfamiliesquery);
                    $trainingprogramlist[$count]['alljobbfamilies'] = implode(',', $alljobbfamilies);


                    

                        

               
                }else{
                    $trainingprogramlist[$count]['limitedjobfamily'] = '';
                    $trainingprogramlist[$count]['alljobbfamilies'] = '';
                    $trainingprogramlist[$count]['moreactinview'] = false;
                }
                if($trainingprogram->competencyandlevels != null && $trainingprogram->competencyandlevels !=0){
                   $trainingprogramlist[$count]['competenciesexists']=true;
                } else {
                   $trainingprogramlist[$count]['competenciesexists']=false;
                } 

                

                $trainingprogramlist[$count]['programstatus']=($trainingprogram->published == 0) ? get_string('un_published','local_trainingprogram'): get_string('published','local_trainingprogram');
                      
                
                $certid = $DB->get_field('tool_certificate_issues', 'code', array('moduleid'=>$trainingprogram->traineeid,'userid'=>$USER->id,'moduletype'=>'trainingprogram'));
                $trainingprogramlist[$count]['certid'] = $certid? $certid : 0;

                $trainingprogramlist[$count]['certificateview'] = (!is_siteadmin() && $filterdata->status == 1 && has_capability('local/organization:manage_trainee', $systemcontext))? true : false;


                $trainingprogramlist[$count]['currentofferingsexists'] =$DB->record_exists('tp_offerings', 
                                                                           ['trainingid' => $trainingprogram->traineeid]) ? true : false;         
                $trainingprogramlist[$count]['published'] = $trainingprogram->published;
                $trainingprogramlist[$count]['courseid'] = $trainingprogram->courseid; 
                $trainingprogramlist[$count]['published'] = $trainingprogram->published == 0 ? true :false; 
                $trainingprogramlist[$count]['deleteaction'] = $DB->record_exists('tp_offerings',
                                                                    array('trainingid' => $trainingprogram->traineeid))? true :false; 

                $trainerroleid = $DB->get_field('role', 'id', array('shortname' => 'trainer'));

                $currentlang= current_language();

                if($currentlang == 'ar') {

                    $displaying_name = "concat(lu.firstnamearabic,' ',lu.lastnamearabic)";

                } else {
                     
                    $displaying_name = "concat(u.firstname,' ',u.lastname)";

                }

              
                $trainer_sql_query = "SELECT $displaying_name as fullname 
                                                  FROM {user} AS u JOIN {local_users} AS lu ON lu.userid = u.id WHERE u.id IN (SELECT ue.userid FROM {program_enrollments} AS ue 
                                                        WHERE ue.roleid=$trainerroleid AND programid = $trainingprogram->traineeid)";

        
               $triners=$DB->get_fieldset_sql($trainer_sql_query);
               $trainingprogramlist[$count]['triners'] = $triners ? implode(', ', $triners):get_string('no_trainer','local_trainingprogram');

                if( $lang == 'ar'){
                        $programname = $trainingprogram->namearabic;
                }else{
                        $programname = $trainingprogram->programname;
                }

                if($programenddate >= $currdate) {

                    $trainingprogramlist[$count]['tainingprogramname'] = html_writer::tag('a', $programname,array('href' =>$CFG->wwwroot. '/local/trainingprogram/programcourseoverview.php?programid='.$trainingprogram->traineeid)) ; 

                }else {

                    if(!is_siteadmin() && has_capability('local/organization:manage_organizationofficial',$systemcontext)) {
                        $purchasedseats =$DB->get_field_sql("SELECT SUM(tos.purchasedseats) 
                        FROM {tool_org_order_seats} AS tos 
                        JOIN {tp_offerings} AS tpo ON tpo.id = tos.fieldid
                        WHERE tos.tablename = 'tp_offerings' AND tos.fieldname = 'id' AND tpo.trainingid = $trainingprogram->traineeid") ;

                      $trainingprogramlist[$count]['tainingprogramname'] = ($purchasedseats > 0) ?  html_writer::tag('a', $programname,array('href' =>$CFG->wwwroot. '/course/view.php?id='.$trainingprogram->courseid)) :  $programname ;

                    } elseif(!is_siteadmin() && has_capability('local/organization:manage_trainee',$systemcontext)) {


                        $trainingprogramlist[$count]['tainingprogramname'] =html_writer::tag('a', $programname,array('href' =>$CFG->wwwroot. '/course/view.php?id='.$trainingprogram->courseid)) ;

                    } else {
                      

                       $trainingprogramlist[$count]['tainingprogramname'] = html_writer::tag('a', $programname,array('href' =>$CFG->wwwroot. '/local/trainingprogram/programcourseoverview.php?programid='.$trainingprogram->traineeid)); 

                    }


                }

               $trainingprogramlist[$count]['manageprogramactions']=((is_siteadmin() || 
                                                                        has_capability('local/organization:manage_trainingofficial',$systemcontext)) && 
                                                                        !$filterdata->status ) ? true : false;

               $trainingprogramlist[$count]['completedprofileactionview']=((is_siteadmin() || 
                                                                        has_capability('local/organization:manage_trainingofficial',$systemcontext)) && 
                                                                        $filterdata->status == 1 ) ? true : false;

             $program_duration_in_days = $trainingprogram->duration/86400;

             $trainingprogramlist[$count]['programagendaview']=($program_duration_in_days > 0) ? true : false;


             $trainingprogramlist[$count]['detailedprogramviewurl'] = $CFG->wwwroot.'/local/trainingprogram/programdetailedview.php?programid='.$trainingprogram->traineeid;

            $count++;
        }
            
        $coursesContext = array(
            "hascourses" => $trainingprogramlist,
            "nocourses" => $nocourse,
            "totalprograms" => $totalprograms,
            "length" => count($trainingprogramlist),
        );
        return $coursesContext;
    }

    public static function get_category() {
        global $DB;
        try{
            $categoryid = $DB->get_field('course_categories', 'id', ['idnumber' => 'trainingprogram']);
         } catch(dml_exception $e){
            print_r($e->message);
       }
        return $categoryid;
    }

     public function add_update_schedule_program($data) {
        global $DB, $USER;
        $row = array();

         $systemcontext = context_system::instance();

  
        $traineeroleid = $DB->get_field('role', 'id', array('shortname' => 'trainee'));
        $row['id'] = $data->id;
        if($data->id > 0 && $DB->record_exists('program_enrollments',array('programid' => $data->trainingid, 'offeringid' => $data->id,'courseid'=>$data->courseid, 'roleid' => $traineeroleid))){
         
           
           $row['availableseats'] = $data->availableseats;
           $row['timemodified'] = time();
           $row['useremodified'] = $USER->id;
           $row['organization'] = $data->organization;
           try{
              $transaction = $DB->start_delegated_transaction();
              $record= $DB->update_record('tp_offerings', $row);
               $transaction->allow_commit();
               return $record;
            } catch(moodle_exception $e){
                $transaction->rollback($e);
             return false;

            }
        }
        $row['startdate'] = $data->startdate;
        $row['enddate'] = $data->enddate;
        $row['time'] = ($data->starttime['hours'] * 3600) + ($data->starttime['minutes'] * 60);
        $row['endtime'] = ($data->endtime['hours'] * 3600) + ($data->endtime['minutes'] * 60);
        $start = $data->startdate+$row['time'];
        $end = $data->startdate+$row['endtime'];
        $duration = abs($start-$end);
        $row['duration'] = $duration;
        $data->duration = $duration;
        $date_duration = $data->enddate - $data->startdate;
        $starttime = ceil($data->startdate + $row['time']);
        $days_between = ceil(abs($date_duration) / 86400);

        $row['type'] = $data->type;
        $row['availableseats'] = $data->availableseats;
        $row['organization'] = $data->organization;
        $row['sellingprice'] = $data->sellingprice?$data->sellingprice:0;
        $row['actualprice'] = $data->actualprice?$data->actualprice:0;
        $row['trainingid'] = $data->trainingid;
        $row['meetingtype'] = $data->meetingtype ? $data->meetingtype: 0;
        $row['trainingmethod'] = $data->trainingmethod;
        if ($data->trainingmethod == 'online'){
          $row['halladdress'] = 0;
        } else {
           $row['halladdress'] = $data->halladdress? $data->halladdress : 0;
        }

        $courseid = $DB->get_field('local_trainingprogram', 'courseid', ['id' => $data->trainingid]);

        $program = $DB->get_record('local_trainingprogram',array('id' => $data->trainingid));
        
        if($data->id > 0) {

            $existingcode = $DB->get_field('tp_offerings','code',array('id' => $data->id));
            $code =substr($existingcode, -1);
     
            $row['id'] = $data->id;
            $row['timemodified'] = time();
            $row['useremodified'] = $USER->id;
            if($data->trainingmethod == 'offline' && $code !='R'){
                $updatedcode = substr($existingcode, 0, -1);
                $row['code'] = $updatedcode.'R';
                (new trainingprogram)->update_group_idnumber($existingcode,$row['code'],$courseid);
            } elseif($data->trainingmethod == 'online' && $code !='P') {
                $updatedcode = substr($existingcode, 0, -1);
                $row['code'] = $updatedcode.'P';
                (new trainingprogram)->update_group_idnumber($existingcode,$row['code'],$courseid);
            }
            $attendenceidsql="SELECT ats.attendanceid 
                                    FROM {attendance_sessions} as ats 
                                    JOIN {offering_sessions} ofs ON ats.id=ofs.sessionid 
                                   WHERE ofs.offeringid = $data->id";

            $attendanceid=$DB->get_field_sql($attendenceidsql);
            $sessionidsql ="SELECT sessionid 
                              FROM {offering_sessions}
                              WHERE offeringid = $data->id";
            $sessionids=$DB->get_records_sql($sessionidsql);
            $existingsessionstartdate=$DB->get_field_sql("SELECT ats.sessdate 
                                    FROM {attendance_sessions} as ats 
                                    JOIN {offering_sessions} ofs ON ats.id=ofs.sessionid 
                                   WHERE ofs.offeringid = $data->id ORDER BY ofs.id ASC LIMIT 1"); 
            $existingsessionenddate=$DB->get_field_sql("SELECT ats.sessdate 
                                    FROM {attendance_sessions} as ats 
                                    JOIN {offering_sessions} ofs ON ats.id=ofs.sessionid 
                                   WHERE ofs.offeringid = $data->id ORDER BY ofs.id DESC LIMIT 1");

            $existingofferingrecord = $DB->get_record('tp_offerings',array('id'=>$data->id));

            if(empty($row['code']) || is_null($row['code'])) {
                
                $offering_code = $existingofferingrecord->code;

            } else {
              
              $offering_code = $row['code'];

            }

        
            try{
              $transaction = $DB->start_delegated_transaction();

              $createoffering = new \local_trainingprogram\local\createoffering($courseid,$offering_code,$data,$program);

              
              $row['meetingid'] = $createoffering->meetingid ? $createoffering->meetingid : 0;
              
                if ($data->trainingmethod == 'online') {
                    foreach ($sessionids AS $sessionid) {
                        (new trainingprogram)->delete_session_record($sessionid->sessionid);
                    }  

                    $row['sections'] = $createoffering->sectionid;     
                }else{
                     if($existingofferingrecord->trainingmethod == 'offline' && ($existingsessionstartdate != $data->startdate ||  $existingsessionenddate != $data->enddate)){
                        foreach ($sessionids AS $sessionid) {
                            (new trainingprogram)->delete_session_record($sessionid->sessionid);
                        }
                        for($i=0; $i <= $days_between; $i++){
                            // $sessionid=mod_attendance_external::add_session($attendanceid,'',  $starttime,$duration, 0,true);
                            // (new trainingprogram)->insert_offering_session_record($sessionid['sessionid'],$data->id,$starttime,$data->trainingid,$courseid);
                            // $starttime += 86400;

                            $attendance = $DB->get_record('attendance', ['id' => $attendanceid]);
                            $cm = $DB->get_record_sql("SELECT cm.* FROM {course_modules} AS cm JOIN {modules} AS m ON m.name = 'attendance' AND cm.module = m.id WHERE cm.instance = $attendanceid");

                            $course = get_course($cm->course);
                            $session_structure = new \mod_attendance_structure($attendance, $cm, $course);
                            $sessioninfo = new \stdClass();
                            $sessioninfo->sessdate= $starttime;
                            $sessioninfo->duration= $duration;
                            $sessioninfo->description= $program->description;
   
                            $sessioninfo->groupid=0;
                            $sessionid= $session_structure->add_session($sessioninfo);
                            (new trainingprogram)->insert_offering_session_record($sessionid,$data->id,$starttime,$data->trainingid,$courseid);
                            $starttime += 86400;
                        }
                    } else {

                        $createoffering->createattendance();
                        $row['groupid'] = $createoffering->groupid;
                        $row['sections'] = $createoffering->sectionid;
                        
                        $evaluationmethods = explode(',', $program->evaluationmethods);
                        foreach($evaluationmethods as $method ){
                            if($method == 0){
                                $type = 'prequiz';
                            }else if($method == 1){
                                $type = 'postquiz';
                            }else{
                                continue;
                            }
                            $row[$type] = $createoffering->createquiz(dataprovider::$evaluationmethods[$method],$data);
                        }


                        for($i=0; $i <= $days_between; $i++){
                           /* $sessionid=mod_attendance_external::add_session($createoffering->attendanceid,'',  $starttime,$duration, 0,true);
                            (new trainingprogram)->insert_offering_session_record($sessionid['sessionid'],$data->id,$starttime,$data->trainingid,$courseid);
                            $starttime += 86400;*/

                            $attendance = $DB->get_record('attendance', ['id' => $createoffering->attendanceid]);
                            $cm = $DB->get_record_sql("SELECT cm.* FROM {course_modules} AS cm JOIN {modules} AS m ON m.name = 'attendance' AND cm.module = m.id WHERE cm.instance = $createoffering->attendanceid");

                            $course = get_course($cm->course);
                            $session_structure = new \mod_attendance_structure($attendance, $cm, $course);
                            $sessioninfo = new \stdClass();
                            $sessioninfo->sessdate= $starttime;
                            $sessioninfo->duration= $duration;
                            $sessioninfo->description= $program->description;
   
                            $sessioninfo->groupid=0;
                            $sessionid= $session_structure->add_session($sessioninfo);
                            (new trainingprogram)->insert_offering_session_record($sessionid,$data->id,$starttime,$data->trainingid,$courseid);
                            $starttime += 86400;
                       }

                    } 
                }

              $record= $DB->update_record('tp_offerings', $row);

              $event = \local_trainingprogram\event\tpofferings_updated::create(array( 'context'=>$systemcontext, 'objectid' =>$data->id));
              $event->trigger();
                
              $transaction->allow_commit();
               return $record;
            } catch(moodle_exception $e){
                $transaction->rollback($e);
             return false;

            }
        } else {
            $row['timecreated'] = time();
            $row['usercreated'] = $USER->id;
            $tpoid = $DB->get_field_sql('SELECT id FROM {tp_offerings} ORDER BY id DESC LIMIT 1');
            if ($tpoid) {
                $autoincnum = $tpoid+1;
            } else {
                $autoincnum = 1;
            }
            $num = sprintf("%'.02d", $autoincnum);
            $incnum = $num + 1;
            $tpodate = date('dmY',$data->enddate);
            if($data->trainingmethod == 'online'){
                $trmethod='P';
            } else {
                $trmethod='R';
            }
            
            $ofcode = $data->trainingid.'-'.$tpodate.'-'.$num.'-'.$trmethod;
            if($DB->record_exists('tp_offerings',array('code' => $ofcode))) {
                $row['code'] = $data->trainingid.'-'.$tpodate.'-'.$incnum.'-'.$trmethod;
            } else {
                $row['code'] = $data->trainingid.'-'.$tpodate.'-'.$num.'-'.$trmethod;
            }
            // $courseid = $DB->get_field('local_trainingprogram', 'courseid', ['id' => $data->trainingid]); 
             
            try {
                $transaction = $DB->start_delegated_transaction();
                if($courseid){
                    $createoffering = new \local_trainingprogram\local\createoffering($courseid, $row['code'],$data,$program);
                    if($data->trainingmethod == 'offline'){

                        $createoffering->createattendance();
                        $evaluationmethods = explode(',', $program->evaluationmethods);
                        foreach($evaluationmethods as $method ){
                            if($method == 0){
                                $type = 'prequiz';
                            }else if($method == 1){
                                $type = 'postquiz';
                            }else{
                                continue;
                            }
                            $evaluationmethods = [];
                            $evaluationmethods['0'] = '{mlang en}Pre Exam{mlang}{mlang ar}الاختبار القبلي{mlang}';
                            $evaluationmethods['1'] = '{mlang en}Post Exam{mlang}{mlang ar}الاختبار البعدي{mlang}';
                            $row[$type] = $createoffering->createquiz($evaluationmethods[$method],$data);
                        }


                    }
                   
                    $row['groupid'] = $createoffering->groupid;
                    $row['sections'] = $createoffering->sectionid;
                    $row['meetingid'] = $createoffering->meetingid ? $createoffering->meetingid: 0;
                    
                    try{
                      $record->id = $DB->insert_record('tp_offerings', $row);

                      if($createoffering->attendanceid){

                        for($i=0; $i <= $days_between; $i++){
                            // $sessionid= mod_attendance_external::add_session($createoffering->attendanceid,'',  $starttime,$duration, 0,true);
                            // (new trainingprogram)->insert_offering_session_record($sessionid['sessionid'],$data->id,$starttime,$data->trainingid,$courseid);
                            // $starttime += 86400;
                            $attendance = $DB->get_record('attendance', ['id' => $createoffering->attendanceid]);
                            $cm = $DB->get_record_sql("SELECT cm.* FROM {course_modules} AS cm JOIN {modules} AS m ON m.name = 'attendance' AND cm.module = m.id WHERE cm.instance = $createoffering->attendanceid");

                            $course = get_course($cm->course);
                            $session_structure = new \mod_attendance_structure($attendance, $cm, $course);
                            $sessioninfo = new \stdClass();
                            $sessioninfo->sessdate= $starttime;
                            $sessioninfo->duration= $duration;
                            $sessioninfo->description= $program->description;
   
                            $sessioninfo->groupid=0;
                            $sessionid= $session_structure->add_session($sessioninfo);
                            (new trainingprogram)->insert_offering_session_record($sessionid,$record->id,$starttime,$data->trainingid,$courseid);
                            $starttime += 86400;
                        }

                      }

                       if($data->entitycode) {
                            $draftrecords = $DB->get_records('reservations_draft', ['entitycode' => $data->entitycode]);
                            foreach($draftrecords AS $draftrecord) {
                                $draftdata = new stdClass();
                                $draftdata->typeid = $record->id;
                                $draftdata->hallid = $draftrecord->hallid;
                                $draftdata->seats = $draftrecord->seats;
                                $draftdata->examdate = $draftrecord->date;
                                $draftdata->slotstart = $draftrecord->slotstart;
                                $draftdata->slotend = $draftrecord->slotend;
                                $draftdata->userid = $draftrecord->userid;
                                $draftdata->type = 'tprogram';
                                $draftdata->status = 1;
                                $DB->insert_record('hall_reservations', $draftdata);
                            }
                            $sessionkey = $DB->delete_records('reservations_draft', ['entitycode' => $data->entitycode, 'type' => 'tprogram']);
                        }
                      
                    } catch(moodle_exception $e){
                      print_r($e);
                    }
                    
                }
                $systemcontext = context_system::instance();
                $event = \local_trainingprogram\event\tpofferings_created::create(array( 'context'=>$systemcontext, 'objectid' =>$record->id));
                $event->trigger();
                $transaction->allow_commit();
                return $record;
            } catch(Exception $e) {
                $transaction->rollback($e);
                return false;
            }

        }
    }
     public function set_schedule_program($id) {
        global $DB;
        $data = $DB->get_record('tp_offerings', ['id' => $id], '*', MUST_EXIST);
        $row['id'] = $data->id;
        $row['startdate'] = $data->startdate;
        $row['enddate'] = $data->enddate;
        $row['time'] = $data->time;
        $row['type'] = $data->type;
        $row['availableseats'] = $data->availableseats;
        $row['organization'] = $data->organization;
        $row['sellingprice'] = $data->sellingprice;
        $row['actualprice'] = $data->actualprice;
        $row['trainingmethod'] = $data->trainingmethod;
        if($row['trainingmethod'] == 'online') {
          $row['meetingtype'] = $data->meetingtype;
        } else {

           $row['halladdress'] = $data->halladdress;
        }
        $dur_min = $data->time/60;
        if($dur_min){
            $hours = floor($dur_min / 60);
            $minutes = ($dur_min % 60);
        }
        $row['starttime[hours]'] = $hours;
        $row['starttime[minutes]'] = $minutes;

        $dur__min = $data->endtime/60;
        if($dur__min){
            $hours = floor($dur__min / 60);
            $minutes = ($dur__min % 60);
        }
        $row['endtime[hours]'] = $hours;
        $row['endtime[minutes]'] = $minutes;

        return $row; 
    }
    //  public function offerings($id) {
    //     global $DB, $PAGE, $OUTPUT, $CFG;
    //     $systemcontext = context_system::instance();
    //     $url = $CFG->wwwroot;
    //     $sql = "SELECT *
    //       FROM {tp_offerings}  WHERE id =".$id;
    //     $offerings = $DB->get_records_sql($sql);
    //     foreach($offerings as $offering) {
    //         $listofoffering['id'] = $offering->id;
    //         $listofoffering['startdate'] = $offering->startdate;
    //         $listofoffering['endate'] = $offering->endate;
    //         $listofoffering['time'] = $offering->time;
    //         $listofoffering['variation_params'] = array(
    //             'id' => $offering->id, 
    //             'parent' => $offering->trainingid,
    //             'label'     =>  get_string('select', 'tool_product'),
    //         );
    //         // $listofusers['rolename'] = $DB->get_field_sql("SELECT name FROM {role} WHERE id =".$user->roleid);
    //         // if(has_capability('local/organization:assignusers', $systemcontext) && has_capability('local/organization:manage', $systemcontext)){
    //         //     $listofusers["unassignuser"] = true;
    //         // }                        
    //         $listofofferings[] = $listofoffering;
    //     }
    //    // $userroles = $this->enrolledusers($orgid);
    //     $renderer = $PAGE->get_renderer('local_organization');
    //     $renderer->currentofferings($id, $listofofferings);
    // }

    public  function viewprogramsectors($programid) { 
        global $DB, $PAGE, $OUTPUT;
        $systemcontext = context_system::instance();
        $PAGE->set_context($systemcontext);
        $data = $DB->get_record('local_trainingprogram', ['id' => $programid], '*', MUST_EXIST);
        $renderer = $PAGE->get_renderer('local_trainingprogram');
        $coursedata  = $renderer->programsectors_view($data);
        return $coursedata;
    }
    public function program_enrolled_users($offeringid=0,$params){
        global $DB, $USER;
        $systemcontext = context_system::instance();
        $traineerole= $DB->get_field('role', 'id', array('shortname' => 'trainee'));
        $program= $DB->get_record_sql('SELECT tp.* FROM {local_trainingprogram} as tp 
                                         JOIN {tp_offerings} as tpo ON tpo.trainingid = tp.id 
                                        WHERE tpo.id=:offeringid', ['offeringid' => $offeringid]);
        $currentlang= current_language();

        if($currentlang == 'ar') {

            $displaying_name = "concat(lc.firstnamearabic,' ',lc.lastnamearabic,' ','(',u.email,')')";


        } else {
                     
            $displaying_name = "concat(u.firstname,' ',u.lastname,' ','(',u.email,')')";

        }

        $fromsql = "SELECT distinct u.id,$displaying_name as fullname";
        $countsql = "SELECT count(u.id) as total";

        $sql =" FROM {user} AS u 
                JOIN {local_users} AS lc ON lc.userid = u.id 
                JOIN {course} as c ON c.id=$program->courseid
                JOIN {context} as ccnt ON  ccnt.instanceid = c.id AND ccnt.contextlevel = 50  
                WHERE  u.id > 2 AND u.deleted = 0 ";

        if(!is_siteadmin() && has_capability('local/organization:manage_organizationofficial',$systemcontext)) {
            $organization = $DB->get_field('local_users','organization',array('userid'=>$USER->id));
            $sql.= " AND lc.organization = $organization";
        }        
        if($lastitem!=0){
           $sql.=" AND u.id > $lastitem";
        }
        $sql .=" AND u.id <> $USER->id";
        if (!empty($params['query'])) {
            $sql .= " AND ((u.firstname LIKE :firstnamesearch OR u.lastname LIKE :lastnamesearch) OR u.email LIKE :email) ";
            $searchparams = array('firstnamesearch' => '%'.trim($params['query']).'%',
                                  'lastnamesearch' => '%'.trim($params['query']).'%', 
                                  'email' => '%'.trim($params['query']).'%');
        }  else {
            $searchparams = array();
        }
        if (!empty($params['email'])) {
             $sql.=" AND u.id IN ({$params['email']})";
        }
        if (!empty($params['organizationusers'])) {
            $sql.=" AND lc.organization IN ({$params['organizationusers']}, 0)";
        }
        $order = 'ORDER BY u.id ASC ';
        $sql .= " AND u.id IN (SELECT roa.userid 
                                          FROM {role_assignments} as roa 
                                         WHERE roa.roleid =:roleid1)";

         if(is_siteadmin() ||  has_capability('local/organization:manage_trainingofficial',$systemcontext))   {

           
           $existingsql = " SELECT pe.userid 
                             FROM {program_enrollments} AS pe 
                            WHERE  pe.programid =:programid AND pe.offeringid =:offeringid AND pe.courseid =:courseid  AND pe.roleid =:roleid ";
         }  else {

            $existingsql = " SELECT pe.userid 
                             FROM {program_enrollments} AS pe 
                            WHERE  pe.programid =:programid AND pe.offeringid =:offeringid AND pe.courseid =:courseid  AND pe.roleid =:roleid AND pe.usercreated =:currentuserid";


         }                             

        $availablesql .= " AND u.id NOT IN (SELECT pe.userid 
                                              FROM {program_enrollments} AS pe 
                                              JOIN {tp_offerings} as tpo ON pe.offeringid=tpo.id 
                                             WHERE pe.programid =:programid AND date(FROM_UNIXTIME(tpo.enddate)) > CURDATE()
                                               AND pe.courseid =:courseid  AND pe.roleid =:roleid)";

        $params = array_merge(['programid' => $program->id, 
                               'offeringid' => $offeringid, 
                               'courseid' => $program->courseid, 
                               'roleid' => $traineerole,
                               'roleid1' => $traineerole,
                               'currentuserid' => $USER->id], $searchparams);
        $ausers = $DB->get_records_sql($fromsql . $sql . $availablesql .$order,$params);

        foreach($ausers as $auser){
            // if($this->is_enrolled($program->id, $auser->id)){
            //     continue;
            // }
            $availableusers[] = ['id' => $auser->id, 'fullname' => $auser->fullname];
        };

        $enrolledsql .= " AND u.id IN ($existingsql)";
        $eusers = $DB->get_records_sql($fromsql . $sql. $enrolledsql .$order,$params);
        foreach($eusers as $euser){
            $enrolledusers[] = ['id' => $euser->id, 
                                'fullname' => $euser->fullname];
        };

        $enrolleduserscount = $DB->count_records_sql($countsql . $sql . $availablesql,$params);
        $availableuserscount = $DB->count_records_sql($countsql . $sql . $enrolledsql,$params);

        return compact('availableusers', 'enrolledusers', 'availableuserscount', 'enrolleduserscount');
    }
    public function program_enrollment($offeringid,$userid,$role) {
        global $DB,$USER;
         $timestart = $course->startdate;                                                                                                                                                                  
          $timeend = 0;
          if ($timestart==''){
            $timestart=0;
          }
        $availableseats = $this->get_available_seats($offeringid);

        $trainingmethod = $DB->get_field_sql('SELECT trainingmethod FROM {tp_offerings} WHERE id = '.$offeringid.'');

        $userstoassign = $add;
        $program= $DB->get_record_sql('SELECT tp.id,tp.courseid,tp.price,tpo.code AS offeringcode FROM {local_trainingprogram} as tp 
            JOIN {tp_offerings} as tpo ON tpo.trainingid = tp.id 
            WHERE tpo.id=:offeringid', ['offeringid' => $offeringid]);
      
            if(!$roleid){
                $traineesql = "SELECT id FROM {role} 
                                WHERE shortname ='$role'";
               $role_id = $DB->get_field_sql($traineesql);
            }else{
                $role_id = $roleid;
            }


            $manual = enrol_get_plugin('manual');
            
            $instance = $DB->get_record('enrol', array('courseid' => $program->courseid, 'enrol' => 'manual'), '*', MUST_EXIST);
            $manual->enrol_user($instance, $userid,$role_id,$timestart, $timeend);


            //$group = groups_get_group_by_idnumber($program->courseid, $program->offeringcode);

            if($trainingmethod != 'elearning') {
                $group = $DB->get_record_sql("SELECT grop.id FROM {groups} as grop JOIN {tp_offerings} as tpo ON tpo.code = grop.idnumber WHERE tpo.id = $offeringid");

                $groupid = (int) $group->id;

                if ($groupid) {
                    groups_add_member($groupid, $userid,null,0);
                }
            }

            $row = array();
            $row['programid'] = $program->id;
            $row['offeringid'] = $offeringid?$offeringid:0;
            $row['courseid'] = $program->courseid;
            $row['userid'] = $userid;
            $row['roleid'] = $role_id;
            $row['timecreated'] = time();
            $row['usercreated'] = $USER->id;
            $record= $DB->insert_record('program_enrollments', $row);
            
            $enrolment = array();
            $enrolment['roleid'] = $role_id;
            $enrolment['contextid'] = 1;
            $enrolment['userid'] = $userid;
            $enrolment['timemodified'] = time();
            $enrolment['modifierid'] = 2;
            $records= $DB->insert_record('role_assignments', $enrolment);

            if($role_id){
                $tpdata=new \stdClass();
                $tpdata->program_name=$DB->get_field('local_trainingprogram','name',array('id'=>$program->id));
                $tpdata->program_userfullname=$DB->get_field('user','firstname',array('id'=>$userid)).$DB->get_field('user','lastname',array('id'=>$userid));
                $trainee=$DB->get_record('user',array('id'=>$userid)); 
                (new \local_trainingprogram\notification())->trainingprogram_notification('trainingprogram_enroll', $touser=$trainee,$fromuser=$USER,$tpdata,$waitinglistid=0);
            } 

            $trainee_role_id = $DB->get_field('role','id',array('shortname' => 'trainee'));   

            if($role_id == $trainee_role_id) {

                (new \tool_product\product)->upadte_availableseats('tp_offerings', 'id', $offeringid, -1);
            } 

            return $record;
        
    }
    public function program_unenrollment($programid,$offeringid,$courseid,$userid,$roleid) {
        global $DB,$USER;
        $systemcontext = context_system::instance();

        $enrolled_by_user = (int) $DB->get_field_sql('SELECT usercreated FROM {program_enrollments} WHERE programid = '.$programid.' AND offeringid = '.$offeringid.' AND courseid = '.$courseid.' AND userid = '.$userid.' AND roleid = '.$roleid.'');
      
       $org_official_roleid = $DB->get_field('role','id',array('shortname' => 'organizationofficial')); 

        $is_enrolled_by_user_org_official = $DB->record_exists_sql('SELECT id FROM {role_assignments} WHERE roleid = '.$org_official_roleid.' AND userid IN ('.$enrolled_by_user.')');

        $record=$DB->delete_records('program_enrollments',array('programid'=>$programid,'offeringid'=>$offeringid,'courseid'=>$courseid,'userid'=>$userid,'roleid'=>$roleid)); 
        $trainee_role_id = $DB->get_field('role','id',array('shortname' => 'trainee'));   
        if($roleid == $trainee_role_id) {

        if((is_siteadmin() ||  has_capability('local/organization:manage_trainingofficial',$systemcontext)) && $is_enrolled_by_user_org_official) {
         
          (new \tool_product\product)->upadte_availableseats('tp_offerings', 'id', $offeringid, +1, $enrolled_by_user);

        } else {

            (new \tool_product\product)->upadte_availableseats('tp_offerings', 'id', $offeringid, +1);
        }
            
        } 
        return $record;
    }
    public function competency_data($stable, $filterdata) {
        global $DB, $PAGE, $OUTPUT;
        $systemcontext = context_system::instance();
        $competencies =  $DB->get_field('local_trainingprogram', 'competencyandlevels', ['id' => $filterdata->programid]);
        $lang = current_language();
         if( $lang == 'ar'){

               $selectsql ="SELECT le.id, le.arabicname AS competencyname, le.type,le.code FROM {local_competencies} as le WHERE 1=1 AND le.id IN ($competencies)" ;
               
        } else {
                $selectsql ="SELECT le.id, le.name AS competencyname, le.type,le.code FROM {local_competencies} as le WHERE 1=1 AND le.id IN ($competencies)" ;
        }
        $countsql  = "SELECT COUNT(le.id) FROM {local_competencies} le WHERE 1=1 AND id IN ($competencies) ";
        if(isset($filterdata->search_query) && trim($filterdata->search_query) != ''){
            $formsql .= " AND le.name LIKE :search";
            $searchparams = array('search' => '%'.trim($filterdata->search_query).'%');
        }else{
            $searchparams = array();
        }     
        $params = array_merge($searchparams);
        $totalcompetency = $DB->count_records_sql($countsql.$formsql, $params);
        $formsql .=" ORDER BY le.id DESC";
        $addedcompetencies = $DB->get_records_sql($selectsql.$formsql, $params, $stable->start,$stable->length);

        $constcompetencytypes = tp::constcompetency_types();
     
        foreach ($addedcompetencies AS $competenciestype) {

            $competenciestype->fullname = $constcompetencytypes[$competenciestype->type];


        }    

        $coursesContext = array(
            "acompetencies" => $addedcompetencies,
            "nocourses" => $nocourse,
            "totalcount" => $totalcompetency,
            "length" => $totalcompetency
        );        
        return $coursesContext;
    }

    public function get_listof_competencies($query = null,$programid = 0,$ctype = null,$offeringid = 0, $level=0) {
        global $DB;
        $fields = array('lc.name');
        $likesql = array();
        $i = 0;
        $currentlang= current_language();
        if( $currentlang == 'ar'){
            $display_name = 'lc.arabicname';

        } else {
            $display_name = 'lc.name';

        }
        foreach ($fields as $field) {
            $i++;
            $likesql[] = $DB->sql_like($field, ":queryparam$i", false);
            $sqlparams["queryparam$i"] = "%$query%";
        }
        $sqlfields = implode(" OR ", $likesql);
        $concatsql = " AND ($sqlfields) ";


        $ctype=json_decode($ctype);
        if(is_string($ctype)){
            
            $ctype = json_decode($ctype);
        }


        if(empty($ctype)) {
            $data =array();

        }elseif(!empty($ctype) && $ctype !='all') {

            array_walk($ctype, function($x){
               $x= "'$x'";
               return $x;
            });

            $types=implode('\',\'',$ctype);

            // $sql = " SELECT ljbl.id
            //             FROM mdl_local_jobrole_level ljbl
            //             WHERE ljbl.level = '$level' ";
            // $jobroleids = $DB->get_fieldset_sql($sql);

            // if(!empty($jobroleids)){

                // $sectorquery = array();
                // foreach ($jobroleids as $jobroleid) {
                //     $sectorquery[] = " CONCAT(',',lc.jobroleid,',') LIKE CONCAT('%,',$jobroleid,',%') "; 
                // }
                // $sectoqueeryparams =implode('OR',$sectorquery);
                // $formsql .= ' AND ('.$sectoqueeryparams.') ';

            
        

                 $sql = "SELECT lc.id , $display_name AS fullname
                      FROM {local_competencies} lc 
                      WHERE FIND_IN_SET('$level', lc.level) AND lc.type IN ('$types')";

        

                $data= $DB->get_records_sql($sql.$formsql, $sqlparams);
                $return = array_values(json_decode(json_encode(($data)), true));

            // } else {
            //     $data = [];
            // }

        } else { 

            
            $sql = "SELECT lc.id,$display_name AS fullname FROM {local_competencies} lc  $concatsql ";
            $data = $DB->get_records_sql($sql, $sqlparams);
            $return = array_values(json_decode(json_encode(($data)), true));
        }

        return $data;
    }
    public function get_listof_competencies_for_filters($query = null,$programid = 0,$ctype = 0,$offeringid = 0) {
        global $DB;
        $fields = array('lc.name');
        $likesql = array();
        $i = 0;
        foreach ($fields as $field) {
            $i++;
            $likesql[] = $DB->sql_like($field, ":queryparam$i", false);
            $sqlparams["queryparam$i"] = "%$query%";
        }
        $sqlfields = implode(" OR ", $likesql);
        $concatsql = " WHERE ($sqlfields) ";

        $currentlang= current_language();

        if( $currentlang == 'ar'){

            $sql = "SELECT lc.id,lc.arabicname AS fullname FROM {local_competencies} lc  $concatsql  AND arabicname <> '' AND arabicname IS NOT NULL ";
        } else {

            $sql = "SELECT lc.id,lc.name AS fullname FROM {local_competencies} lc  $concatsql ";
        }

        
        $data = $DB->get_records_sql($sql, $sqlparams);
        $return = array_values(json_decode(json_encode(($data)), true));
        return $return;
    }

    
    public function get_listof_trainerusers($query = null,$programid = 0,$ctype = null,$offeringid = 0) {
        global $DB;

        $courseid=$DB->get_field('local_trainingprogram','courseid', array('id' => $programid));
        $trainerroleid= $DB->get_field('role', 'id', array('shortname' => 'trainer'));
        $fields = array("lc.firstname",'lc.lastname','lc.firstnamearabic','lc.lastnamearabic');
        $likesql = array();
        $i = 0;

        foreach ($fields as $field) {
            $i++;
            $likesql[] = $DB->sql_like($field, ":queryparam$i", false);
            $sqlparams["queryparam$i"] = "%$query%";
        }
        $sqlfields = implode(" OR ", $likesql);
        $concatsql = " AND ($sqlfields) ";
        $currentlang= current_language();
        if($currentlang == 'ar') {

            $displaying_name = "concat(lc.firstnamearabic,' ',lc.lastnamearabic)";

        } else {
                     
            $displaying_name = "concat(lc.firstname,' ',lc.lastname)";

        }
          
        $sql = " SELECT u.id, $displaying_name AS fullname 
                 FROM {user} u 
                 JOIN {local_users} lc ON lc.userid = u.id 
                 JOIN {course} c  ON c.id=$courseid
                 JOIN {role_assignments} as ra ON ra.userid = u.id
                 JOIN {role} as r ON r.id = ra.roleid AND r.shortname = 'trainer'
                 WHERE u.id > 2 AND u.deleted = 0 AND u.id NOT IN 
                 (SELECT pe.userid FROM {program_enrollments} AS pe                         
                JOIN {tp_offerings} as tpo ON pe.offeringid = tpo.id 
                WHERE pe.programid = $programid AND pe.offeringid = $offeringid  AND pe.courseid = $courseid AND pe.roleid = $trainerroleid) AND u.id $concatsql ";
       
        $data = $DB->get_records_sql($sql, $sqlparams);
        $return = array_values(json_decode(json_encode(($data)), true));
        return $return;
    }

    

     public function get_card_view_trainingprograms_list($searchquery='', $sector='') {
        global $DB, $PAGE, $OUTPUT;
        $systemcontext = context_system::instance();
        $renderer = $PAGE->get_renderer('local_trainingprogram');
        $filterparams  = $renderer->get_trainingprograms_cardview(true);
        $filterparams['submitid'] = 'form#filteringform';
        $training_programs = $renderer->get_trainingprograms_cardview(false, '', $sector);
        $cfform = trainingprogram_filters_form($filterparams);
        $filterparams['training_programs_cards'] = $training_programs;
        $filterparams['widthclass'] = 'col-md-12';
        $filterparams['inputclasses'] = 'trainingprogramsearchinput';
        $filterparams['placeholder'] = get_string('sreach_program', 'local_trainingprogram');
        $filterparams['q'] = $searchquery;
        $filterparams['filterinput'] = $renderer->global_filter($filterparams);
        $filterparams['card_view_programs_filterform'] = $cfform->render();

        $renderer->listofcardviewprograms($filterparams);
    }

     public function card_view_programs($stable, $filterdata) {
        global $DB, $PAGE, $OUTPUT, $CFG;
        $current_language = current_language();
        $selectsql = "SELECT * FROM {local_trainingprogram} lo WHERE published = 1 AND date(FROM_UNIXTIME(lo.availableto)) >= CURDATE() "; 
        $countsql  = "SELECT COUNT(lo.id) FROM {local_trainingprogram} lo WHERE published = 1 AND date(FROM_UNIXTIME(lo.availableto)) >= CURDATE() ";
        if  (isset($filterdata->search_query) && trim($filterdata->search_query) != ''){
            $formsql .= " AND (lo.name LIKE :firstnamesearch) ";
            $searchparams = array('firstnamesearch' => '%'.trim($filterdata->search_query).'%');
        } else {
            $searchparams = array();
        }


        if (!empty($filterdata->sectors)){
             $sectorids = explode(',', $filterdata->sectors);
             if(!empty($sectorids)){
                $sectorquery = array();
                foreach ($sectorids as $sector) {
                    $sectorquery[] = " CONCAT(',',lo.sectors,',') LIKE CONCAT('%,',$sector,',%') "; 
                }
                $sectoqueeryparams =implode('OR',$sectorquery);
                $formsql .= ' AND ('.$sectoqueeryparams.') ';
            }
        }
        
        if(!empty($filterdata->targetgroup)){

            $jobfamilyids = explode(',', $filterdata->targetgroup);
            if(!empty($jobfamilyids)){
                $jobfamilyquery = array();
                foreach ($jobfamilyids as $jobfamily) {
                    $jobfamilyquery[] = " CONCAT(',',lo.targetgroup,',') LIKE CONCAT('%,',$jobfamily,',%') "; 
                }
                $jobfamilyparams =implode('OR',$jobfamilyquery);
                $formsql .= ' AND ( ('.$jobfamilyparams.') OR lo.targetgroup = -1 ) ';
            }
        }

        if(!empty($filterdata->program_competencylevel)){

            $competencylevelsids = explode(',', $filterdata->program_competencylevel);
            if(!empty($competencylevelsids)){
                $competencylevelquery = array();
                foreach ($competencylevelsids as $competencylevel) {
                    $competencylevelquery[] = " CONCAT(',',lo.competencyandlevels,',') LIKE CONCAT('%,',$competencylevel,',%') "; 
                }
                $competencylevelparams =implode('OR',$competencylevelquery);
                $formsql .= ' AND ('.$competencylevelparams.') ';
            }
        }

        if($filterdata->{'availablefrom[enabled]'} == 1 ){

            $start_year = $filterdata->{'availablefrom[year]'};
            $start_month = $filterdata->{'availablefrom[month]'};
            $start_day = $filterdata->{'availablefrom[day]'};
            $filter_starttime_con = mktime(0,0,0, $start_month, $start_day, $start_year);
            $formsql.= " AND lo.availableto >= '$filter_starttime_con' ";

        }
        if($filterdata->{'availableto[enabled]'} == 1 ){
            $start_year = $filterdata->{'availableto[year]'};
            $start_month = $filterdata->{'availableto[month]'};
            $start_day = $filterdata->{'availableto[day]'};
            $filter_endtime_con=mktime(23,59,59, $start_month, $start_day, $start_year);
            $formsql.=" AND lo.availableto <= '$filter_endtime_con' ";
        }

        $params = array_merge($searchparams);

        $cardviewtotalprograms = $DB->count_records_sql($countsql.$formsql,$params);
        $formsql .=" ORDER BY lo.id DESC";

        $cardviewtrainingprograms = $DB->get_records_sql($selectsql.$formsql, $params, $stable->start,$stable->length);
        $cardviewtrainingprogramlist = array();
        $count = 0;
        foreach($cardviewtrainingprograms as $cardviewtrainingprogram) {
              $cardviewtrainingprogramlist[$count]['trainingid'] = $cardviewtrainingprogram->id;
              if($current_language == 'ar') {
                $cardviewtrainingprogramlist[$count]['programname'] = $cardviewtrainingprogram->namearabic;

              } else {

                $cardviewtrainingprogramlist[$count]['programname'] = $cardviewtrainingprogram->name;
              }
              $programdesciption =format_text($cardviewtrainingprogram->description, FORMAT_HTML);
              
              $cardviewtrainingprogramlist[$count]['sellingprice'] = number_format($cardviewtrainingprogram->sellingprice);
              $cardviewtrainingprogramlist[$count]['actualprice'] = number_format($cardviewtrainingprogram->actualprice);
              $cardviewtrainingprogramlist[$count]['description'] = mb_substr(strip_tags($programdesciption),0,200);
              $cardviewtrainingprogramlist[$count]['courseid'] = $cardviewtrainingprogram->courseid;
              list($sectorsql,$ectorparams) = $DB->get_in_or_equal(explode(',',$cardviewtrainingprogram->sectors));
              $querysql = "SELECT id AS sectorid ,title AS sectorname FROM {local_sector} WHERE id $sectorsql";
              $sectorslists= $DB->get_records_sql($querysql,$ectorparams);
              if (!empty($cardviewtrainingprogram->image)) {
                 $cardviewtrainingprogramlist[$count]['imageurl']=trainingprogramlogo_url($cardviewtrainingprogram->image);
               }
              $cardviewtrainingprogramlist[$count]['sectors'] = array_values($sectorslists);
              $cardviewtrainingprogramlist[$count]['actionview'] = (isloggedin() && !$DB->record_exists('tp_offerings', array('trainingid' => $cardviewtrainingprogram->id))) ? false : true;

              $banking = false;
              $capitalmarket = false;
              $finance = false;
              $insurance = false;
                if($cardviewtrainingprogram->sectors){
                    $programsectors = $DB->get_fieldset_sql('select code from {local_sector} where id in('.$cardviewtrainingprogram->sectors.')');
                    $listedsectors = ['capitalmarket', 'finance', 'insurance', 'banking'];
                    foreach($listedsectors as $sector){
                        if(in_array($sector, $programsectors)){
                            ${$sector} = true;
                        }
                    }
                }else{
                    $programsectors = '';
                }

              $cardviewtrainingprogramlist[$count]['banking'] = $banking;
              $cardviewtrainingprogramlist[$count]['capitalmarket'] = $capitalmarket;
              $cardviewtrainingprogramlist[$count]['finance'] = $finance;
              $cardviewtrainingprogramlist[$count]['insurance'] = $insurance;
              $cardviewtrainingprogramlist[$count]['hours'] = round($cardviewtrainingprogram->hour / 86400);
              $cardviewtrainingprogramlist[$count]['durationindays'] = round(($cardviewtrainingprogram->duration / 86400));
              $cardviewtrainingprogramlist[$count]['programdetailsurl'] = $CFG->wwwroot.'/local/trainingprogram/programcourseoverview.php?programid='.$cardviewtrainingprogram->id;
                 
            $count++;
        }
        if($cardviewtotalprograms > 6){
            $noloadmore = true;
        }
        if($cardviewtotalprograms == count($cardviewtrainingprogramlist)){
            $noloadmore = false;
        }
        $coursesContext = array(
            "programs" => $cardviewtrainingprogramlist,
            "nocourses" => $nocourse,
            "totalprograms" => $cardviewtotalprograms,
            "length" => count($cardviewtrainingprogramlist),
            'noloadmore' => $noloadmore
        );
        return $coursesContext;
    }

     public function remove_all_program_offerings($programid,$courseid) {
        global $DB, $USER;

        $systemcontext = context_system::instance();

        if($DB->record_exists('tp_offerings',array('trainingid'=>$programid))){

            $allofferings  = $DB->get_records_sql('SELECT * FROM {tp_offerings} WHERE trainingid = '.$programid.'');

            foreach ($allofferings AS $offering) {

                $DB->start_delegated_transaction();
                try{
                    $transaction = $DB->start_delegated_transaction();
                   
                    $enrolledusers = $DB->get_records_sql('SELECT * FROM {program_enrollments} WHERE programid = '.$programid.' AND offeringid = '.$offering->id.' AND courseid = '.$courseid.' ');
                    foreach ($enrolledusers AS $enrolleduser) {

                        role_unassign($enrolleduser->roleid,$enrolleduser->userid,$systemcontext->id);
                    }
                    $DB->delete_records('program_enrollments', array('programid' => $programid, 'offeringid' => $offering->id,'courseid' => $courseid));
                    $result = course_delete_section($courseid, $offering->sections);
                    (new trainingprogram)->delete_offering_sessions($offering->id);
                    (new trainingprogram)->delete_offering_mapped_groups($offering->code);
                    $offdelete = $DB->delete_records('tp_offerings', array('id' => $offering->id));

                   $transaction->allow_commit();
                   return true;
                } catch(moodle_exception $e){

                  $transaction->rollback($e);
                  return false;

                }
            }
        }    
    }

    public function remove_schedule_program($sheduleid) {
        global $DB;
        $record = $DB->get_record('tp_offerings', ['id' => $sheduleid]);
        $courseid = $DB->get_field('local_trainingprogram', 'courseid', ['id' => $record->trainingid]);

        try{
            $transaction = $DB->start_delegated_transaction();
            course_delete_section($courseid, $record->sections);
            (new trainingprogram)->delete_offering_sessions($sheduleid);
            (new trainingprogram)->delete_offering_mapped_groups($record->code);
            $offresult = $DB->delete_records('tp_offerings',array('id' =>$sheduleid));
            $transaction->allow_commit();
           return true;
        } catch(moodle_exception $e){
            $transaction->rollback($e);
         return false;
        }
    }

    public function detailed_program_course_overview($programid,$courseid,$api = false) {
        global $DB,$USER,$OUTPUT,$CFG;
        $systemcontext = context_system::instance();
        $program_exists = $DB->record_exists('local_trainingprogram',array('id' => $programid));
        if (!$program_exists) {

            if(!isloggedin()) {

                redirect($CFG->wwwroot.'/local/trainingprogram/trainingprogram.php');

            } else {

                redirect($CFG->wwwroot.'/local/trainingprogram/index.php');

            }
            
        }

        $lang = current_language();
         
        $traineeeid = $DB->get_field('role', 'id', array('shortname' => 'trainee'));
        $programrecord=$DB->get_record('local_trainingprogram',array('id'=>$programid));
        list($sectorsql,$sectorparams) = $DB->get_in_or_equal(explode(',',$programrecord->sectors));

        if( $lang == 'ar'){

            $sectorquerysql = "SELECT id AS sectorid,titlearabic AS sectorname FROM {local_sector} WHERE id $sectorsql";

        } else {

            $sectorquerysql = "SELECT id AS sectorid,title AS sectorname FROM {local_sector} WHERE id $sectorsql";
        }   
        
        $sectorslists= $DB->get_records_sql($sectorquerysql,$sectorparams);

        if($programrecord->targetgroup == '-1') {

         $jobfamilies = (new trainingprogram)->get_all_job_families_by_sectors($programrecord->sectors);
         $targetgroup = implode(',', $jobfamilies);

        } else {
          $targetgroup = $programrecord->targetgroup;

        }  

        list($jobfamilysql,$jobfamilyparams) = $DB->get_in_or_equal(explode(',',$targetgroup));
        if( $lang == 'ar'){

           $jobfamilyquerysql = "SELECT id AS jobfamilyid,familynamearabic AS fullname FROM {local_jobfamily} WHERE id $jobfamilysql";

        } else {

            $jobfamilyquerysql = "SELECT id AS jobfamilyid,familyname AS fullname FROM {local_jobfamily} WHERE id $jobfamilysql";
        } 
        
        $jobfamilylist= $DB->get_records_sql($jobfamilyquerysql,$jobfamilyparams);

        list($competencysql,$competencyparams) = $DB->get_in_or_equal(explode(',',$programrecord->competencyandlevels));
       
        $compquerysql = "SELECT type,type AS fullname, id FROM {local_competencies} WHERE id $competencysql";
        
        $programcompetencies= $DB->get_records_sql($compquerysql,$competencyparams);
         
        $constcompetencytypes = tp::constcompetency_types();
     
        foreach ($programcompetencies AS $competenciestype) {

            $competenciestype->fullname = $constcompetencytypes[$competenciestype->fullname];

            if( $lang == 'ar'){

               $competenciessql ="SELECT id as competencyid, arabicname AS competencyname FROM {local_competencies} WHERE 1=1" ;
            } else {
                $competenciessql ="SELECT id as competencyid, name AS competencyname FROM {local_competencies} WHERE 1=1" ;
            }
            $competencyids = explode(',', $programrecord->competencyandlevels);
            $competencyquery =array();
            foreach ($competencyids as $competency) {
                $competencyquery[] = "  id = $competency "; 
            }
            $ctype = "'$competenciestype->type'";
            $competencyqueryparams =implode('OR',$competencyquery);
            $formsql = ' AND ('.$competencyqueryparams.') AND type = '.$ctype.'';
            $competencieslists = $DB->get_records_sql($competenciessql.$formsql); 
            foreach ($competencieslists AS $competencieslist) {
            
              $competencieslist->competencylevel= $programrecord->clevels ? str_replace("level","", $programrecord->clevels):0;
            }
            $competenciestype->competencies=array_values($competencieslists);
        }


        $sectionsquerysql = "SELECT id AS sectionid FROM {course_sections} WHERE course = $courseid";
        $sections= $DB->get_records_sql($sectionsquerysql); 
        $totalsectionscount_sql="SELECT count(id) FROM {course_sections} WHERE course =$courseid";
        $totalsectionscount=$DB->count_records_sql($totalsectionscount_sql); 
        $total_modules_sql="SELECT COUNT(module) FROM {course_modules} WHERE course = $courseid AND section IN (SELECT id FROM {course_sections} WHERE course = $courseid)";
        $total_modules = $DB->count_records_sql($total_modules_sql);
        $i=1;

        $programagendasql ="SELECT id,day,description AS agenda, programid FROM {program_agenda} WHERE programid =:programid" ;
        $programagenda = $DB->get_records_sql($programagendasql,['programid'=>$programrecord->id]);
        
        foreach ( $programagenda as $key => $value) {

            $programagenda[$key]->selected = true;
            $programagenda[$key]->agenda = format_text($value->agenda,FORMAT_HTML);
    
            break;

        }

        $tpofferings = self::get_offerings($programid);
      
        $eprogrammethods = explode(',',$programrecord->methods);
        foreach ( $eprogrammethods AS $eprogrammethod) {

            if($eprogrammethod == 0) {
                $aprogrammethods[]['name']= get_string('lecture','local_trainingprogram');
            } elseif ($eprogrammethod == 1) {
                $aprogrammethods[]['name']= get_string('case_studies','local_trainingprogram');

            } elseif ($eprogrammethod == 2) {
                $aprogrammethods[]['name']= get_string('dialogue_teams','local_trainingprogram');

            } else {
                $aprogrammethods[]['name']= get_string('exercises_assignments','local_trainingprogram');

            }
           
        }


        $emethods = explode(',',$programrecord->evaluationmethods);
        foreach ( $emethods AS $method) {
           
            $aevaluationmethods[]['name']= ($method == '0') ? get_string('pre_exam','local_trainingprogram') : get_string('post_exam','local_trainingprogram');
        }

      
        $languages = explode(',',$programrecord->languages);
        foreach ( $languages AS $language) {

            $actuallang[]=($language == '0') ? get_string('arabic','local_trainingprogram') : get_string('english','local_trainingprogram');

        }  

    
        if( $lang == 'ar' && !empty($programrecord->namearabic)){
            $programname = $programrecord->namearabic;
        }else{
            $programname = $programrecord->name;
        }

        $imageurl=trainingprogramlogo_url($programrecord->image);
        $viewdata=[
            'courseid'=>$courseid,
            'programid'=>$programid,
            'programname'=>$programname,
            'programcode'=>$programrecord->code,
            'programnameview'=>(isloggedin())? true : false,
            'sellingprice'=> number_format($programrecord->sellingprice),
            'program_description'=> format_text($programrecord->description,FORMAT_HTML),
            'program_goals'=> format_text($programrecord->program_goals,FORMAT_HTML),
            'priceview'=>($programrecord->price == 1 &&  !is_null($programrecord->sellingprice)) ? true : false,
            'sectorview'=>$programrecord->sectors? true : false,
            'competenciesview'=>$programrecord->competencyandlevels? true : false,
            'jobfamilyview'=>$programrecord->targetgroup? true : false,
            'duration'=>$programrecord->duration,
            'currentofferings'=>$tpofferings,
            'jobfamilylist'=>array_values($jobfamilylist),
            'releasedate'=>userdate($programrecord->availablefrom, get_string('strftimedatemonthabbr', 'langconfig')),
            'availabletodate'=>userdate($programrecord->availableto, get_string('strftimedatemonthabbr', 'langconfig')),
            'availabletotime'=>date('h:i A', $programrecord->availableto ),
            'sectorslists'=>array_values($sectorslists),
            'evaluationmethod'=>$aevaluationmethods,
            'evaluationmethoddisplay'=>($programrecord->evaluationmethods != '')? true : false,
            'trainingmethods'=>$aprogrammethods,
            'totalmodules'=>$total_modules ? $total_modules : 0,
            'totaltopics'=>$total_topics ? $total_topics : 0,
            'courselanguage'=>$actuallang ? implode('/',$actuallang) :'-',
            'programcompetencies'=>array_values($programcompetencies),
            'sections'=>array_values($sections),
            'programagenda'=>array_values($programagenda),
            'sectionscount'=>$totalsectionscount,
            'durationinweeks'=>round(($programrecord->duration / 86400)/7),
            'durationindays'=>round($programrecord->duration / 86400), 
            'programagendaview'=>(($programrecord->duration / 86400) > 0 && $DB->record_exists('program_agenda',array('programid' => $programrecord->id))) ? true : false, 
            'offeringview'=>($DB->record_exists('tp_offerings',array('trainingid' => $programid)) && COUNT($tpofferings) > 0) ? true : false, 
            'imageurl'=>$imageurl,
            'isloggedin' => (!isloggedin()) ? true : false,
            'product_attributes' => (new \tool_product\product)->get_product_attributes($programid, 1, 'addtocart', true),
            'cartactionview'=> (isloggedin() && !is_siteadmin() && has_capability('local/organization:manage_trainee', $systemcontext) &&
                                 !$this->is_enrolled($programrecord->id, $USER->id) && date('Y-m-d',$programrecord->availableto) > date('Y-m-d')) || 
                                (!isloggedin() && date('Y-m-d',$programrecord->availableto) > date('Y-m-d')) ? true : false,

        ];

        if($api) {
            return $viewdata;
        } else {
           echo $OUTPUT->render_from_template('local_trainingprogram/detailed_program_course_overview', $viewdata);
        }
    }

    public static function get_offerings($programid, $dedicated=false,$learningpath=false) {
        global $DB, $USER;

        $systemcontext = context_system::instance();
        $offeringsql = "SELECT tpo.id,tpo.startdate,tpo.enddate,tpo.type,tpo.time,tpo.duration,tpo.trainingmethod,tpo.trainingid,tpo.organization,
                                tpo.availableseats, tpo.sellingprice,h.name AS hallname,
                                h.maplocation, h.seatingcapacity, h.city,tpo.time,tpo.duration 
                          FROM  {tp_offerings} AS tpo 
                     LEFT JOIN {hall} AS h ON tpo.halladdress=h.id WHERE tpo.trainingid = '$programid' AND date(FROM_UNIXTIME(tpo.startdate)) > CURDATE() ";
        if($dedicated){

            $offeringsql .=" AND tpo.type=2 ";
            
        } else {

            $offeringsql .=" AND tpo.type <> 2 ";
        }


        $tpofferings = $DB->get_records_sql($offeringsql);
        
        $i=1;

        $tpofferinglowestseats=0;

        foreach ($tpofferings AS $key => $tpoffering) {

            $offeringstartdate = date('Y-m-d',$tpoffering->startdate);
            $currdate = date('Y-m-d');

            $offeringstarttime = gmdate("H:i",$tpoffering->time);
            $currenttime = date('H:i');

            $offeriing_available_seats = self::get_available_seats($tpoffering->id);
            $coid=$i++;

            if($tpofferinglowestseats == 0 || ($tpofferinglowestseats > $offeriing_available_seats)){

                $tpofferinglowestseats=$offeriing_available_seats;
                
            }

            if(!isloggedin()  &&  (($tpoffering->type == 1 && $tpoffering->organization > 0) || $offeriing_available_seats <= 0 || $offeringstartdate  < $currdate || ($offeringstartdate  ==  $currdate &&  $tpoffering->time > 0 &&  $offeringstarttime < $currenttime))){
                unset($tpofferings[$key]);
                continue;
            }
            $tpoffering = self::get_offering($tpoffering, $coid);
        }
        

        if($learningpath){

            $tpofferings= array_values($tpofferings);

            return compact('tpofferings', 'tpofferinglowestseats');

        }else{
            return array_values($tpofferings);
        }
    }

    public static function get_offering($tpoffering, $coid=false, $offeringaction=true) {
        global $DB, $CFG,$USER, $PAGE;


        $currentlang = current_language();
        $systemcontext = context_system::instance();

        $programrecord=$DB->get_record('local_trainingprogram',array('id'=>$tpoffering->trainingid));

        $programavailable = $DB->get_field('local_trainingprogram', 'availableto', ['id' => $tpoffering->trainingid]);
        $traineeeid = $DB->get_field('role', 'id', array('shortname' => 'trainee'));
        $tpoffering->coid = (new trainingprogram)->ordinal_number($coid);
        $tpoffering->url = $CFG->wwwroot;

        $tpoffering->product_variations = (new \tool_product\product)->get_product_variations($tpoffering->trainingid, $tpoffering->id, 1);
        $tpoffering->offeringstartdate =  userdate($tpoffering->startdate, get_string('strftimedatemonthabbr', 'langconfig'));

        if($tpoffering->trainingmethod == 'elearning') {

            $tpoffering->offeringstatus = get_string('open','local_exams') ; 
            $tpoffering->offeringstatuslable = 'open';
            $tpoffering->enddatedisplay = false;

        } else {

            $tpoffering->offeringstatus = (date('Y-m-d',$tpoffering->enddate) > date('Y-m-d')) ? get_string('open','local_exams') : get_string('complete','local_exams'); 
           $tpoffering->offeringstatuslable = (date('Y-m-d',$tpoffering->enddate) > date('Y-m-d')) ? 'open' : 'complete';
           $tpoffering->enddatedisplay = true;
        }

        $trainingmethod=  $tpoffering->trainingmethod;
        
        if($trainingmethod == 'online') {

            $tpoffering->trainingmethod= get_string('online','local_trainingprogram'); 
           

        } elseif($trainingmethod == 'offline') {

            $tpoffering->trainingmethod = get_string('offline','local_trainingprogram');
                
        } else {

            $tpoffering->trainingmethod = get_string('elearning','local_trainingprogram');  
         
        }

        $offeriing_available_seats = self::get_available_seats($tpoffering->id);
        
        $enrolledsql = " SELECT count(userid) AS total
                              FROM {program_enrollments} AS pe
                             WHERE pe.offeringid = $tpoffering->id AND pe.roleid=$traineeeid";


        $enrolled =  self::get_erolled_seats($tpoffering->id);
           
        $purchasedseats = (new \tool_product\product)->purchasedseats_check('tp_offerings','id', $tpoffering->id);
        $tpoffering->availableseats = self::get_available_seats($tpoffering->id);
        $totalseatssql = " SELECT  tp.availableseats AS total
                                     FROM {tp_offerings} tp
                                    WHERE tp.id = $tpoffering->id";
           
        $total = $DB->get_field_sql($totalseatssql);


        $tpoffering->orderseats = $purchasedseats ? $purchasedseats : 0;

        $tpoffering->enrolledseats = ($enrolled > 0) ? $enrolled : 0;

        $tpoffering->totalseats = $total;


        $offeringstartdate = date('Y-m-d',$tpoffering->startdate);
        $currdate = date('Y-m-d');

        $offeringstarttime = gmdate("H:i",$tpoffering->time);
        $currenttime = date('H:i');

        $offeringtype = (int)$DB->get_field('tp_offerings','type',array('id'=>$tpoffering->id));
        $offeringorganization = (int)$DB->get_field('tp_offerings','organization',array('id'=>$tpoffering->id));

         $tpoffering->offeringorganizationname = $DB->get_field_sql("SELECT org.fullname FROM {local_organization} AS org JOIN {tp_offerings} AS tpo ON tpo.organization = org.id WHERE tpo.id = $tpoffering->id");

        $tpoffering->offeringtype = $offeringtype;
        $tpoffering->seatsview = (isloggedin() && (is_siteadmin() || has_capability('local/organization:manage_trainingofficial', $systemcontext) || has_capability('local/organization:manage_organizationofficial', $systemcontext))) ?  true : false;
        $tpoffering->offeringorganization = $offeringorganization;

        $tpoffering->privateofferingmessage = ((is_siteadmin() || has_capability('local/organization:manage_trainingofficial',$systemcontext))  && $offeringtype == 1 && $offeringorganization > 0) ? true : false ;
        $tpoffering->nonprivateofferingmessage = ((is_siteadmin() || has_capability('local/organization:manage_trainingofficial',$systemcontext)) && $offeringtype != 1 ) ? true : false ;

        $tpoffering->enrolledseatsbyme = self::get_erolled_seats($tpoffering->id,true);
        $tpoffering->myenrolled = (isloggedin() && (is_siteadmin() || has_capability('local/organization:manage_trainingofficial', $systemcontext))) ?  true : false;

       

        $tpoffering->offeringview = ((!isloggedin() && !has_capability('local/organization:manage_trainingofficial', $systemcontext) && !has_capability('local/organization:manage_communication_officer',$systemcontext) && !has_capability('local/organization:manage_financial_manager',$systemcontext) && $offeriing_available_seats > 0 && ($offeringstartdate > $currdate || ($offeringstartdate  ==  $currdate &&  $offering->time > 0 &&  $offeringstarttime >= $currenttime)))  || (isloggedin() && !is_siteadmin() && has_capability('local/organization:manage_trainee', $systemcontext) && 
                                    !self::is_enrolled($tpoffering->trainingid, $USER->id) && $offeriing_available_seats > 0 && ($offeringstartdate > $currdate || ($offeringstartdate  ==  $currdate &&  $offering->time > 0 &&  $offeringstarttime >= $currenttime)))) ? true : false;




        $tpoffering->orgofficialseatsview = (isloggedin() && !is_siteadmin() && has_capability('local/organization:manage_organizationofficial', $systemcontext)) ? true :  false;

        $tpoffering->purchasedseatsview = (isloggedin() && (is_siteadmin() || has_capability('local/organization:manage_organizationofficial', $systemcontext))) ? true :  false;

        $starttimemeridian = gmdate('a',$tpoffering->time); 
        $endtimemeridian = gmdate('a',($tpoffering->time + $tpoffering->duration)); 

        $starttime = gmdate("h:i",$tpoffering->time);
        $endttime = gmdate("h:i",($tpoffering->time + $tpoffering->duration));


        if($currentlang == 'ar') {
            $startmeridian = ($starttimemeridian == 'am')? 'صباحا':'مساءً';
            $endmeridian =  ($endtimemeridian == 'am')? 'صباحا':'مساءً';
        } else {
            $startmeridian = ($starttimemeridian == 'am')? 'AM':'PM';
            $endmeridian =  ($endtimemeridian == 'am')? 'AM':'PM';
        }

        $tpoffering->starttime =$starttime .' '.$startmeridian;
        $tpoffering->endtime =$endttime .' '.$endmeridian;
        $tpoffering->offeringenddate = userdate($tpoffering->enddate, get_string('strftimedatemonthabbr', 'langconfig'));
        $tpoffering->locationview = ($tpoffering->trainingmethod == 1) ? true : false; 


        return $tpoffering;
    }


    public function others_program_course_overview($programid, $action='booknow') {
        global $DB, $PAGE, $OUTPUT;
        $systemcontext = context_system::instance();
        $renderer = $PAGE->get_renderer('local_trainingprogram');
        $filterparams  = $renderer->other_programs_course_view(true);
        $filterparams['submitid'] = 'form#filteringform';
        $filterparams['widthclass'] = 'col-md-6';
        $filterparams['placeholder'] = 'Search Hall..';
        $globalinput=$renderer->global_filter($filterparams);
        $training_programs = $renderer->other_programs_course_view();
        $filterparams['training_programs'] = $training_programs;
        $filterparams['globalinput'] = $globalinput;
        $renderer->listofothers_program_course_view($filterparams);
    }

    public function get_others_program_course_overview($stable, $filterdata,$dataoptions) {
        global $DB, $PAGE, $OUTPUT, $CFG, $USER;
        $systemcontext = context_system::instance();
        $PAGE->set_context($systemcontext);
        $traineeeid = $DB->get_field('role', 'id', array('shortname' => 'trainee'));
        $programid = json_decode($dataoptions)->programid;
        $action = json_decode($dataoptions)->action;
        $lang= current_language();

        if( $lang == 'ar'){
            $programnamesql = "SELECT namearabic FROM {local_trainingprogram} WHERE id = $programid";

        }else{
            $programnamesql = "SELECT name FROM {local_trainingprogram} WHERE id = $programid";
        }

        $programname=$DB->get_field_sql($programnamesql);
        $selectsql = "SELECT tpo.id,tpo.startdate,tpo.enddate,tpo.type,h.city,tpo.availableseats,tpo.organization,tpo.sellingprice,h.name AS hallname,h.maplocation, h.seatingcapacity,h.buildingname,tpo.trainingmethod,tpo.code,tpo.time 
                        FROM  {tp_offerings} AS tpo 
                   LEFT JOIN {hall} AS h ON tpo.halladdress=h.id  
                       WHERE tpo.trainingid = $programid";

        $countsql  = "SELECT COUNT(tpo.id) 
                        FROM  {tp_offerings} AS tpo 
                   LEFT JOIN {hall} AS h ON tpo.halladdress=h.id  
                       WHERE tpo.trainingid = $programid";
        if  (isset($filterdata->search_query) && trim($filterdata->search_query) != ''){
            $formsql .= " AND (h.name LIKE :firstnamesearch) ";
            $searchparams = array('firstnamesearch' => '%'.trim($filterdata->search_query).'%');
        } else {
            $searchparams = array();
        }
        $params = array_merge($searchparams);
        $totalofferings = $DB->count_records_sql($countsql.$formsql,$params);;
        $formsql .=" ORDER BY tpo.startdate DESC";
        $offerings = $DB->get_records_sql($selectsql.$formsql, $params, $stable->start,$stable->length);
        $offeringslist = array();
        $count = 0;
        $i = 1;
        foreach($offerings as $offering) {

            if($offering->type == dataprovider::PRIVATEPROGRAM){
                if(is_siteadmin() || has_capability('local/organization:manage_trainingofficial',$systemcontext) 
                        || has_capability('local/organization:manage_organizationofficial',$systemcontext)){
                    if(!is_siteadmin() && has_capability('local/organization:manage_organizationofficial',$systemcontext)){


                         $organization = $DB->get_field_sql("SELECT lu.organization
                                                               FROM {local_users} as lu 
                                                               JOIN {user} as u ON u.id= lu.userid
                                                               JOIN {role_assignments} as  ra on ra.userid=u.id
                                                               JOIN {role} as r ON ra.roleid = r.id  AND r.shortname = 'organizationofficial'
                                                                AND u.id=$USER->id");

                        if(!$organization){
                            continue;
                        }else{
                    
                            if($offering->organization != $organization){
                                continue;
                            }
                        }
                    }

                }else{
                    continue;
                }
            }
            if(!is_siteadmin() && has_capability('local/organization:manage_organizationofficial',$systemcontext)){
                if($action == 'enrol'){
                    if(!$DB->record_exists('tool_org_order_seats',  array('tablename'=>'tp_offerings',
                                                                          'fieldname'=>'id',
                                                                          'fieldid'=>$offering->id,
                                                                          'orguserid'=>$USER->id))){

                        continue;
                    }
                }
            }
            $program=$DB->get_record('local_trainingprogram',array('id'=>$programid),'name,price');

            $totalseatssql = " SELECT  tp.availableseats AS total
                FROM {tp_offerings} tp
                WHERE tp.id = $offering->id";
            $total = $DB->get_record_sql($totalseatssql);
    
            $enrolledseatsselectsql = "SELECT COUNT(pe.id) as enrolled
                FROM {tp_offerings} tp
                LEFT JOIN {program_enrollments} as pe ON pe.offeringid = tp.id
                WHERE tp.id = $offering->id AND pe.roleid = $traineeeid";
            $enrolled = $DB->get_record_sql($enrolledseatsselectsql);

            $availableseats = $this->get_after_approved_available_seats($offering->id); 

            $totalseats =  $total->total;

           

            if( $lang == 'ar'){
                $programname = $program->namearabic;

            }else{
                $programname = $program->name;
            }

            $starttime = gmdate("h:i",$offering->time);
            $starttimemeridian = gmdate('a',$offering->time);

            if($lang == 'ar') {
                $startmeridian = ($starttimemeridian == 'am')? 'صباحا':'مساءً';
                
            } else {
                $startmeridian = ($starttimemeridian == 'am')? 'AM':'PM';
            }

            $offeringvailableseats = $DB->get_field_sql("SELECT SUM(purchasedseats) FROM {tool_org_order_seats} WHERE tablename = 'tp_offerings' AND fieldname = 'id' AND fieldid = $offering->id");
            // $bookingseats=$offeringvailableseats ? ($totalseats - $offeringvailableseats) : $availableseats ;
            $offeringslist[$count]['coid'] = $i++;
            $offeringslist[$count]['code'] = $offering->code;
            $trainingmethod=  $offering->trainingmethod;
        
            if($trainingmethod == 'online') {

                $offeringslist[$count]['offeringmethod'] = get_string('online','local_trainingprogram'); 
               

            } elseif($trainingmethod == 'offline') {

               $offeringslist[$count]['offeringmethod'] = get_string('offline','local_trainingprogram');
                    
            } else {

               $offeringslist[$count]['offeringmethod'] = get_string('elearning','local_trainingprogram');  
             
            }


            $offeringslist[$count]['enddatedisplay']=($trainingmethod == 'elearning') ? false : true;
            $offeringslist[$count]['offeringid'] = $offering->id;
            $offeringslist[$count]['programid'] = $programid;
            $offeringslist[$count]['offeringid'] = $offering->id;
            $offeringslist[$count]['seatingcapacity'] = $offering->seatingcapacity;
            $offeringslist[$count]['totalseats'] = $totalseats;
            $offeringslist[$count]['availableseats'] =  $availableseats ;
            $offeringslist[$count]['buildingname'] = $offering->buildingname;
            $offeringslist[$count]['hallname'] = $offering->hallname;
            $offeringslist[$count]['city'] = $offering->city;
            $offeringslist[$count]['programname'] = $programname;
            $offeringslist[$count]['sellingprice'] = $offering->sellingprice;
            $offeringslist[$count]['seatingcapacity'] = $offering->seatingcapacity;
            $offeringslist[$count]['startdate'] = userdate($offering->startdate, get_string('strftimedatemonthabbr', 'langconfig'));
            $offeringslist[$count]['enddate'] = userdate($offering->enddate, get_string('strftimedatemonthabbr', 'langconfig'));
            $offeringslist[$count]['starttime'] = $offering->time ? gmdate("h:i",$offering->time).' '.$startmeridian: '';
            $offeringslist[$count]['halldisplayaction'] = $offering->trainingmethod == 'offline' ? true :false; 
            $offeringslist[$count]['action'] = ($action == 'enrol') ? true :false; 
            $offeringslist[$count]['orderseats'] = (new \tool_product\product)->purchasedseats_check('tp_offerings','id', $offering->id);
            $offeringslist[$count]['approvalseats'] = (new \tool_product\product)->approvedseats_check('tp_offerings','id', $offering->id);
            $offeringslist[$count]['enavailableseats'] = $this->get_available_seats($offering->id);
            $offeringslist[$count]['enrolledseats'] = $this->get_erolled_seats($offering->id);
            if(!is_siteadmin() && has_capability('local/organization:manage_organizationofficial', $systemcontext)) {

            $offeringstartdate = date('Y-m-d',$offering->startdate);
            $offeringenddate = date('Y-m-d',$offering->enddate);

            $currdate = date('Y-m-d');

            $offeringstarttime = gmdate("H:i",$offering->time);
            $currenttime = date('H:i');

 

            if(!is_siteadmin() && has_capability('local/organization:manage_organizationofficial', $systemcontext)) {

                 if($offeringstartdate > $currdate || ($offeringstartdate  ==  $currdate &&  $offering->time > 0 &&  $offeringstarttime >= $currenttime ) && $availableseats > 0 ) {

                    if($program->price == '1'){

                        $offeringslist[$count]['bookseats'] = (new \tool_product\product)->get_button_order_seats($label=get_string('booknow','local_trainingprogram'),'tp_offerings','id',$offering->id, $availableseats,$programid, $action);
                    } else {

                        $trainingurl = new \moodle_url('/local/trainingprogram/programenrollment.php',array('programid'=>$programid,'roleid'=>$traineeeid,'offeringid'=>$offering->id));
                        $offeringslist[$count]['bookseats'] =html_writer::link($trainingurl,get_string('enrollbtn',  'tool_product'));

                    }

                } else {
                   

                    if(($offeringstartdate  < $currdate || ($offeringstartdate  ==  $currdate &&  $offering->time > 0 &&  $offeringstarttime < $currenttime )) && $offeringenddate > $currdate) {
                       

                      $offeringslist[$count]['bookseats'] = get_string('offering_in_progress','local_trainingprogram');
    
                    }

                    if(($offeringstartdate  < $currdate || ($offeringstartdate  ==  $currdate &&  $offering->time > 0 &&  $offeringstarttime < $currenttime )) && $offeringenddate <= $currdate){
                        

                        $offeringslist[$count]['bookseats'] = get_string('offering_expired','local_trainingprogram');

                    }
                    if($availableseats <= 0){


                        $offeringslist[$count]['bookseats'] = get_string('noseats','local_trainingprogram');
                    }
                    
                

                } 

            } 

            $count++;
        }

    }
        
        $coursesContext = array(
            "hascourses" => $offeringslist,
            "nocourses" => $nocourse,
            "totalofferings" => $totalofferings,
            "length" => count($offeringslist),
            "programname" => $programname,
    

            
        );
        return $coursesContext;
    }

    public function trainee_program_course_overview($programid,$courseid) {
        global $DB,$USER,$OUTPUT,$CFG;
    
        $programrecord=$DB->get_record('local_trainingprogram',array('id'=>$programid));
         $currentlang= current_language();
        list($competencysql,$competencyparams) = $DB->get_in_or_equal(explode(',',$programrecord->competencyandlevels));
        if($currentlang == 'ar') {

            $cname = 'arabicname';

        } else {

            $cname = 'name';
        }
        $compquerysql = "SELECT id AS competencyid,$cname AS competencyname, level AS competencylevel FROM {local_competencies} WHERE id $competencysql";
        $competencieslists= $DB->get_records_sql($compquerysql,$competencyparams);

        foreach ($competencieslists AS $competencieslist) {
          $competencieslist->level=$programrecord->clevels ? str_replace("Level","", $programrecord->clevels):0;
        }
        $sql = 'SELECT tpo.id,tpo.startdate,tpo.enddate,tpo.availableseats, tpo.sellingprice,tpo.prequiz, tpo.postquiz,tpo.trainingmethod,
                       h.name AS hallname, h.maplocation, h.seatingcapacity, h.city 
                  FROM {tp_offerings} AS tpo 
                  JOIN {program_enrollments} as pe ON pe.offeringid=tpo.id AND pe.userid =:userid
             LEFT JOIN {hall} AS h ON tpo.halladdress=h.id 
                 WHERE tpo.trainingid =:programid';
        $tpofferings = $DB->get_records_sql($sql, ['programid' => $programid, 'userid' => $USER->id]);
        $i=1;
        foreach ($tpofferings AS $tpoffering) {
            $tpoffering->coid=$i++;
            $tpoffering->url = $CFG->wwwroot;
            $tpoffering->startdate =  userdate($tpoffering->startdate, get_string('strftimedatemonthabbr', 'langconfig'));
            $tpoffering->enddate = userdate($tpoffering->enddate, get_string('strftimedatemonthabbr', 'langconfig'));
            $tpoffering->offeringstatus = (!$DB->record_exists('program_completions',array('programid' => $programid,'offeringid'=>$tpoffering->id,'completion_status' => 1 ))) ? get_string('in_progress','local_trainingprogram') : get_string('completed','local_trainingprogram');  
           
            $trainerroleid = $DB->get_field('role', 'id', array('shortname' => 'trainer'));

          
            if($currentlang == 'ar') {

               $displaying_name = "concat(lc.firstnamearabic,' ',lc.lastnamearabic)";

            } else {
                         
                $displaying_name = "concat(u.firstname,' ',u.lastname)";

            }

            $trainer_sql_query = "SELECT $displaying_name as fullname 
                                        FROM {user} AS u 
                                        JOIN {local_users} lc ON lc.userid = u.id 
                                        WHERE u.id IN (SELECT ue.userid 
                                        FROM {program_enrollments} AS ue 
                                        WHERE ue.roleid=$trainerroleid AND programid = $programid AND offeringid = $tpoffering->id)";
        
            $triners=$DB->get_fieldset_sql($trainer_sql_query);
            $tpoffering->trainers = $triners ? implode(', ', $triners):get_string('no_trainer','local_trainingprogram');
            if($DB->record_exists('quiz',array('id'=> $tpoffering->prequiz))){
                $prequiz = get_coursemodule_from_instance('quiz',  $tpoffering->prequiz,  0,  false,  MUST_EXIST);
                if(!$DB->record_exists('course_modules_completion', ['coursemoduleid' => $prequiz->id, 'completionstate' => 1, 'userid' => $USER->id])){
                    $tpoffering->todoactivities[] = ['name' => get_string('pre_exam','local_trainingprogram'), 'link' => ''.$CFG->wwwroot.'/mod/quiz/view.php?id='.$prequiz->id.''];                    
                }
            }
             if($tpoffering->postquiz){
                $postquiz = get_coursemodule_from_instance('quiz',  $tpoffering->postquiz,  0,  false,  MUST_EXIST);
                if(!$DB->record_exists('course_modules_completion', ['coursemoduleid' => $postquiz->id, 'completionstate' => 1, 'userid' => $USER->id])){
                    $tpoffering->todoactivities[] = ['name' => get_string('post_exam','local_trainingprogram'),'link' => ''.$CFG->wwwroot.'/mod/quiz/view.php?id='.$postquiz->id.''];                    
                }
            }
         
            $k=1;
            $topssql = "SELECT ofs.sessionid,ats.attendanceid,ats.id as session_id,ats.sessdate,ats.duration,ofs.courseid,ofs.programid 
                          FROM {offering_sessions} AS ofs 
                         LEFT JOIN {attendance_sessions} AS ats ON ofs.sessionid = ats.id 
                            WHERE ofs.offeringid =:offeringid";
            $tpofferingssessions = $DB->get_records_sql($topssql, ['offeringid' => $tpoffering->id]);
            $k=1;
            foreach ($tpofferingssessions AS $tpofferingssession) {
                $tpofferingssession->cid=$k++;
                $starttimemeridian = date('a',$tpofferingssession->sessdate); 
                $endtimemeridian = date('a',($tpofferingssession->sessdate + $tpofferingssession->duration)); 
                $starttime = date('h:i',$tpofferingssession->sessdate);
                $endtime = date("h:i",($tpofferingssession->sessdate + $tpofferingssession->duration));

                if($currentlang == 'ar') {
                        $startmeridian = ($starttimemeridian == 'am')? 'صباحا':'مساءً';
                        $endmeridian =  ($endtimemeridian == 'am')? 'صباحا':'مساءً';
                } else {
                        $startmeridian = ($starttimemeridian == 'am')? 'AM':'PM';
                        $endmeridian =  ($endtimemeridian == 'am')? 'AM':'PM';
                }
                
                $session_status = $DB->get_field_sql('SELECT sstatus.acronym FROM  {attendance_statuses} as sstatus
                                                   JOIN {attendance_log} as alog ON alog.statusid = sstatus.id 
                                                   WHERE alog.sessionid = '.$tpofferingssession->session_id.' AND 
                                                   alog.studentid = '.$USER->id.' AND sstatus.attendanceid = '.$tpofferingssession->attendanceid.'');

                $off_starttime =$starttime .' '.$startmeridian;
                $off_endtime =$endtime .' '.$endmeridian;
                $tpofferingssession->sessiondate =userdate($tpofferingssession->sessdate, get_string('strftimedatemonthabbr', 'langconfig')) .' '. $off_starttime .' - '.$off_endtime;

                if($session_status == 'P') {

                    $tpofferingssession->status = get_string('present', 'local_trainingprogram');

                } elseif($session_status == 'L') {
                    $tpofferingssession->status = get_string('late', 'local_trainingprogram');

                } elseif($session_status == 'E') {
                    $tpofferingssession->status = get_string('excused', 'local_trainingprogram');

                } elseif($session_status == 'A') {
                    $tpofferingssession->status = get_string('absent', 'local_trainingprogram');

                } else {
                    $tpofferingssession->status = '-';

                }

            } 
            if(!empty($tpofferingssessions)){
                $tpoffering->sessiondata = array_values($tpofferingssessions);
            } else {
                $tpoffering->sessiondata = array();
            }
        }

        $launchurl=$CFG->wwwroot.'/course/view.php?id='.$programrecord->courseid; 
        $lang= current_language();

        if( $lang == 'ar'){
            $programname = $programrecord->namearabic;

        }else{
            $programname = $programrecord->name;
        }

        $viewdata=[
            'courseid'=>$courseid,
            'programid'=>$programid,
            'programname'=>$programname,
            'offerings'=>array_values($tpofferings),
            'enddatedisplay'=>($tpoffering->trainingmethod == 'elearning') ? false : true,
            'todoactivitiesdisplay'=> (COUNT($tpoffering->todoactivities) > 0) ? true : false ,
            'sessiondatadisplay'=> (COUNT($tpofferingssessions) > 0) ? true : false ,
            'competencieslists'=>array_values($competencieslists),
            'launchurl'=>$launchurl,
        ];
        echo $OUTPUT->render_from_template('local_trainingprogram/trainee_program_course_overview', $viewdata);
    }

    public function remove_training_program($programid) {
        global $DB;
        $systemcontext = context_system::instance();
        $courseid =(int) $DB->get_field('local_trainingprogram','courseid',array('id'=>$programid));
        (new trainingprogram)->remove_all_program_offerings($programid,$courseid);
        if($courseid) {
          delete_course($courseid,false);  
        }
        $data = $DB->delete_records('local_trainingprogram', array('id' => $programid));
        $event = \local_trainingprogram\event\trainingprogram_deleted::create(array( 'context'=>$systemcontext, 'objectid' => $programid));
        $event->trigger();
        return $data;
    }
    public static function trainingprogram_jobfamily($jobroleid=0,$jobfamilies= array(),$programid=0, $type=false) {

        global $DB, $USER;

        $currentlang= current_language();

        if($jobroleid){

            if( $currentlang == 'ar'){

                $sql = "SELECT jbfm.id,jbfm.familynamearabic as title 
                                                    FROM {local_jobfamily} as jbfm 
                                                    JOIN {local_jobrole_level} as jbrl ON jbrl.jobfamily=jbfm.id 
                                                     WHERE jbfm.familynamearabic <> '' AND  jbfm.familynamearabic IS NOT NULL AND jbrl.id=:jobroleid";

            } else {

                $sql = 'SELECT jbfm.id,jbfm.familyname as title 
                                                    FROM {local_jobfamily} as jbfm 
                                                    JOIN {local_jobrole_level} as jbrl ON jbrl.jobfamily=jbfm.id 
                                                     WHERE jbrl.id=:jobroleid';


            }                                          

            $jobfamily= $DB->get_record_sql($sql,['jobroleid' => $jobroleid]);

        }elseif(!empty($jobfamilies)){

            $params = array();

            list($jobfamiliessql, $jobfamiliesparams) = $DB->get_in_or_equal($jobfamilies);
            $params = array_merge($params, $jobfamiliesparams);

            if( $currentlang == 'ar'){

                $jobfamily = $DB->get_records_sql_menu("SELECT jfly.id,jfly.familynamearabic as title FROM {local_jobfamily} jfly  WHERE jfly.familynamearabic <> '' AND  jfly.familynamearabic IS NOT NULL  AND jfly.id $jobfamiliessql",$params);

            } else {

                $jobfamily = $DB->get_records_sql_menu("SELECT jfly.id,jfly.familyname as title FROM {local_jobfamily} jfly  WHERE jfly.id $jobfamiliessql",$params);

            }
            


        }elseif($programid){

            if($type == 'exam') {

                $table = 'local_exams';

            } else {

                $table = 'local_trainingprogram';

            }

            if( $currentlang == 'ar'){

                $sql = "SELECT jbfm.id,jbfm.familynamearabic as title 
                                                    FROM {local_jobfamily} as jbfm 
                                                     JOIN {$table} as cmtc ON concat(',', cmtc.targetgroup, ',') LIKE concat('%,',jbfm.id,',%')
                                                 WHERE  jbfm.familynamearabic <> '' AND  jbfm.familynamearabic IS NOT NULL AND cmtc.id=:programid";

            

            } else {
                
                $sql = "SELECT jbfm.id,jbfm.familyname as title
                          FROM {local_jobfamily} as jbfm 
                          JOIN {$table} as cmtc ON concat(',', cmtc.targetgroup, ',') LIKE concat('%,',jbfm.id,',%')
                         WHERE cmtc.id=:programid";

            }

            $jobfamily= $DB->get_records_sql_menu($sql,['programid' => $programid]);

        }

        return $jobfamily;
            
    }
    

    public static function trainingprogram_competencytypes($competencietypes= array(),$programid=0) {

        global $DB, $USER;

      if(!empty($competencietypes)){

            $params = array();

            

            list($competenciessql, $competenciesparams) = $DB->get_in_or_equal($competencietypes);
            $params = array_merge($params, $competenciesparams);
            $competencytypes= $DB->get_records_sql_menu("SELECT cmt.type,cmt.type as fullname FROM {local_competencies} AS cmt WHERE cmt.type $competenciessql",$params);

        }elseif(!empty($programid)){

            $competencytypes= $DB->get_records_sql_menu("SELECT loc.type,loc.type as fullname 
                                                        FROM {local_competencies} as loc
                                                        GROUP BY loc.type");


        }
         
        return $competencytypes;
            
    }

     public static function trainingprogram_competencylevels($competencies= array(),$programid=0) {
        global $DB, $USER;
      if(!empty($competencies)){

            $params = array();

            list($competenciessql, $competenciesparams) = $DB->get_in_or_equal($competencies);
            $params = array_merge($params, $competenciesparams);
            $competency= $DB->get_records_sql_menu("SELECT id,name as title FROM {local_competencies} WHERE id $competenciessql",$params);

        }elseif(!empty($programid)){

            $competency= $DB->get_records_sql_menu("SELECT loc.id, loc.name as title 
                                                        FROM {local_competencies} as loc
                                                        JOIN {local_trainingprogram} as lot 
                                                        ON concat(',', lot.competencyandlevels, ',') LIKE concat('%,',loc.id,',%')
                                                        WHERE lot.id=:programid",['programid' => $programid]);


            }
         
        return $competency;
            
    }
    public function programsfakeblock() { 
        global $DB, $PAGE, $OUTPUT, $CFG, $USER;
        $systemcontext = context_system::instance();
        //$trainerroleid = $DB->get_field('role', 'id', array('shortname' => 'trainer'));

        // $sql = "SELECT rc.capability
        //                       FROM {role_capabilities} rc
        //                       JOIN {program_enrollments} pe ON pe.roleid = rc.roleid
        //                       WHERE pe.roleid=$trainerroleid AND
        //                            pe.userid=$USER->id AND
        //                            rc.permission=1";
        // $capabilty = $DB->get_field_sql($sql);
        $bc = new \block_contents();
        if(!is_siteadmin() && (has_capability('local/organization:manage_trainee', $systemcontext) || has_capability('local/organization:manage_trainer', $systemcontext))) {
            $bc->title = '';
            $bc->attributes['class'] = 'my_training';
            $bc->content =(new trainingprogram)->trainee_dashboard_programs_data();
             $PAGE->blocks->add_fake_block($bc, 'content');
        } elseif(!is_siteadmin() && (has_capability('local/organization:manage_trainingofficial', $systemcontext) || has_capability('local/organization:manage_organizationofficial', $systemcontext))) {
            $bc->title = get_string('trainings','local_trainingprogram');
            $bc->attributes['class'] = 'training';
            $bc->content =(new trainingprogram)->official_dashboard_programs_data();
            $PAGE->blocks->add_fake_block($bc, 'content');
        } 
       
   }   
    public function trainee_dashboard_programs_data() {
        global $DB, $PAGE, $OUTPUT, $CFG, $USER;
        $systemcontext = context_system::instance();
        $selectsql = 'SELECT loc.id as traineeid,loc.name as programname,loc.namearabic as namearabic,tpo.startdate,tpo.enddate,loc.image,loc.courseid,loc.description,loc.availableto,tpo.trainingmethod ';
        $countsql = 'SELECT count(loc.id)';
        $limitsql = 'ORDER BY tpo.startdate DESC LIMIT 5';

        if(has_capability('local/organization:manage_trainer', $systemcontext)){

            $sql = ' FROM {local_trainingprogram} loc 
                JOIN {tp_offerings} as tpo ON tpo.trainingid=loc.id
                JOIN {program_enrollments} ue ON ue.programid=loc.id AND ue.offeringid = tpo.id
                WHERE ue.userid ='.$USER->id.' AND loc.published = 1  AND ue.programid=loc.id AND date(FROM_UNIXTIME(loc.availableto)) >= CURDATE() ';

            $completedselect = 'SELECT loc.id as traineeid,loc.name as programname,loc.namearabic as namearabic,loc.image,loc.courseid,loc.description,loc.availableto,tpo.startdate,tpo.enddate,tpo.trainingmethod  ';

            $completedsql =' FROM {local_trainingprogram} loc 
                            JOIN {tp_offerings} as tpo ON tpo.trainingid=loc.id
                            JOIN {program_enrollments} ue ON ue.programid=loc.id AND ue.offeringid =tpo.id  
                            WHERE  ue.userid ='.$USER->id.' AND loc.published = 1 AND date(FROM_UNIXTIME(loc.availableto)) < CURDATE() ';
        } else {


            $sql = 'FROM {local_trainingprogram} loc 
                   JOIN {tp_offerings} as tpo ON tpo.trainingid=loc.id
                   JOIN {program_enrollments} ue ON ue.programid=loc.id AND ue.offeringid = tpo.id
                   WHERE ue.userid ='.$USER->id.' AND loc.published = 1  AND ue.programid=loc.id AND loc.id 
                   NOT IN (SELECT pc.programid FROM {program_completions} pc 
                             WHERE pc.userid ='.$USER->id.'  AND pc.completion_status = 1)';

            $completedselect = 'SELECT loc.id as traineeid,loc.name as programname,loc.namearabic as namearabic,loc.image,loc.courseid,loc.description,pc.completiondate,loc.availableto,tpo.startdate,tpo.enddate,tpo.trainingmethod ';     

             $completedsql =' FROM {local_trainingprogram} loc 
                        JOIN {tp_offerings} as tpo ON tpo.trainingid=loc.id
                        JOIN {program_completions} pc ON pc.programid = loc.id  AND pc.offeringid = tpo.id
                        WHERE  pc.userid ='.$USER->id.' AND loc.published = 1 AND pc.completion_status = 1 ';       
        }


        $inprogressprograms = $DB->get_records_sql($selectsql .$sql.$limitsql);
        $inprogresscount =$DB->count_records_sql($countsql .$sql.$limitsql); 

        $completeprograms = $DB->get_records_sql($completedselect .$completedsql.$limitsql);
        $comp_count =$DB->count_records_sql($countsql . $completedsql.$limitsql);
        $i=1;

        foreach ($inprogressprograms AS $inprogram) {

            $lang= current_language();

            if( $lang == 'ar' && !empty($inprogram->namearabic)){
                $programname = $inprogram->namearabic;

            }else{
                $programname = $inprogram->programname;
            }
            $programsdata= array();
            $programsdata['coid']=$i++;
            $programsdata['programid']=$inprogram->traineeid;
            $programsdata['enddatedisplay']=($inprogram->trainingmethod == 'elearning') ? false : true;
            $programsdata['programname'] =$programname;
            $programsdata['availableto'] =(has_capability('local/organization:manage_trainer', $systemcontext))?userdate($inprogram->availableto, get_string('strftimedatemonthabbr', 'langconfig')) :userdate($inprogram->enddate, get_string('strftimedatemonthabbr', 'langconfig')); 
            $programsdata['availablefrom'] =(has_capability('local/organization:manage_trainer', $systemcontext))?userdate($inprogram->availablefrom, get_string('strftimedatemonthabbr', 'langconfig')) :userdate($inprogram->startdate, get_string('strftimedatemonthabbr', 'langconfig'));
            $programsdata['courseid'] =$inprogram->courseid;
            if (!empty($inprogram->image)) {
                $programsdata['imageurl']=trainingprogramlogo_url($inprogram->image);
            }
            $programsdata['launchurl']=$CFG->wwwroot.'/course/view.php?id='.$inprogram->courseid;
            $programsdata['programviewurl']=$CFG->wwwroot.'/local/trainingprogram/programcourseoverview.php?programid='.$inprogram->traineeid;
          
            $total_in_progress_programs[] = $programsdata;
        }
        foreach ($completeprograms AS $program) {

            $lang= current_language();

            if( $lang == 'ar' && !empty($inprogram->namearabic)){
                $programname = $program->namearabic;

            }else{
                $programname = $program->programname;
            }

            $compprogramsdata= array();
            $compprogramsdata['coid']=$i++;
            $compprogramsdata['programid']=$program->traineeid;
            $compprogramsdata['programname'] =$programname;
            $compprogramsdata['description'] =format_text($program->description,FORMAT_HTML);
            $compprogramsdata['timecompleted'] = (has_capability('local/organization:manage_trainer', $systemcontext)) ? userdate($program->availableto, get_string('strftimedatemonthabbr', 'langconfig')) :userdate($program->completiondate, get_string('strftimedatemonthabbr', 'langconfig'));
            $compprogramsdata['courseid'] =$program->courseid;
            if (!empty($program->image)) {
                $compprogramsdata['imageurl']=trainingprogramlogo_url($program->image);
            }
            $compprogramsdata['launchurl']=$CFG->wwwroot.'/course/view.php?id='.$program->courseid;
            $programsdata['programviewurl']=$CFG->wwwroot.'/local/trainingprogram/programcourseoverview.php?programid='.$program->traineeid;
            $certid = $DB->get_field('tool_certificate_issues', 'code', array('moduleid'=>$program->traineeid,'userid'=>$USER->id,'moduletype'=>'trainingprogram'));
             $compprogramsdata['certid'] = $certid? $certid : 0;
            
            $total_completed_programs[] = $compprogramsdata;
        }
        $viewmoreurl = $CFG->wwwroot.'/local/trainingprogram/index.php';
        $viewdata=[
        'total_in_progress_programs'=>$total_in_progress_programs,
        'total_completed_programs'=>$total_completed_programs,
        'completed_programs_view'=>(COUNT($total_completed_programs) > 0) ?  true : false,
        'in_progress_view_more_action'=>$inprogresscount > 4 ? true : false,
        'comp_count_view_more_action'=>$comp_count > 4 ? true : false,
        'path'=>$CFG->wwwroot,
        'viewmoreurl'=>$viewmoreurl,
        'certificateview'=>(has_capability('local/organization:manage_trainee', $systemcontext))? true : false,
        ];
        $result = $OUTPUT->render_from_template('local_trainingprogram/trainings_block', $viewdata);
        return $result;
    }

     public function official_dashboard_programs_data()
    { 
        global $DB, $PAGE, $OUTPUT, $CFG, $USER;

        $renderer = $PAGE->get_renderer('local_trainingprogram');
        $renderable = new \local_trainingprogram\output\trainingprogram();
        return $renderer->render($renderable);
    }

    public function publish_current_program($programid) {
        global $DB;
        $data=$DB->execute('UPDATE {local_trainingprogram} SET published = 1 WHERE id='.$programid);
        return $data;
    }
   public function program_enrolled_users_view($programid,$selectedroleid) {
        global $DB, $PAGE, $OUTPUT;

        $systemcontext = context_system::instance();        
        $renderer = $PAGE->get_renderer('local_trainingprogram');
        $filterparams  = $renderer->get_catalog_program_enrolled_users(true);
         $filterparams['submitid'] = 'form#filteringform';
        $filterparams['labelclasses'] = 'd-none';
        $filterparams['inputclasses'] = 'form-control';
        $filterparams['placeholder'] = get_string('search_enrolled_users','local_trainingprogram');
        $filterparams['programid'] = $programid;
        $filterparams['selectedroleid'] = $selectedroleid;
        $globalinput=$renderer->global_filter($filterparams);
        $fform = trainingprogram_tp_offerings_filters_form($filterparams);
        $enroledusers_view = $renderer->get_catalog_program_enrolled_users();
        $filterparams['enrolledusers_view'] = $enroledusers_view;
        $filterparams['globalinput'] = $globalinput;
        $filterparams['filterform'] = $fform->render();
        $renderer->listofenrolledusers($filterparams);
      

   }

    public function get_listof_programenrolledusers($stable, $filterdata, $dataoptions) {

        global $DB, $PAGE, $OUTPUT, $USER;
        $programid = json_decode($dataoptions)->programid;
        $selectedroleid = json_decode($dataoptions)->selectedroleid;

        $courseid=(int)$DB->get_field('local_trainingprogram','courseid', array('id' => $programid));

        $systemcontext = context_system::instance();
        $traineeeid = $DB->get_field('role', 'id', array('shortname' => 'trainee'));

        $currentlang = current_language();
        if($currentlang == 'ar') {

            $displaying_name = "concat(lc.firstnamearabic,' ',lc.lastnamearabic)";

        } else {
             
            $displaying_name = "concat(u.firstname,' ',u.lastname)";

        }

        $selectsql = "SELECT CONCAT(tpo.code,u.id),u.id,$displaying_name as fullname,u.email,lc.id_number,u.phone1,pe.roleid,pe.offeringid,tpo.code,pe.timecreated,lc.organization 
            FROM {user} u 
            JOIN {local_users} lc ON lc.userid = u.id 
            JOIN {program_enrollments} pe ON pe.programid =$programid AND pe.courseid = $courseid AND pe.userid = u.id  
            JOIN {tp_offerings} tpo ON tpo.id = pe.offeringid 
            JOIN {role} crole ON crole.id = pe.roleid "; 

        $countsql = "SELECT COUNT(tpo.code) 
              FROM {user} u 
              JOIN {local_users} lc ON lc.userid = u.id 
              JOIN {program_enrollments} pe ON pe.programid = $programid AND pe.courseid = $courseid AND pe.userid=u.id 
              JOIN {tp_offerings} tpo ON tpo.id=pe.offeringid
              JOIN {role} crole ON crole.id=pe.roleid ";
        
        

        if(!is_siteadmin() &&  has_capability('local/organization:manage_organizationofficial',$systemcontext))
        {

          $organization = $DB->get_field('local_users','organization',array('userid' => $USER->id));
          $where = ' WHERE  u.id > 2 AND u.deleted = 0  AND lc.deleted=0 AND lc.approvedstatus= 2 AND lc.organization = '.$organization.' AND pe.roleid = '.$traineeeid.' AND pe.usercreated = '.$USER->id.' ';
        } else {
            $where = ' WHERE  u.id > 2 AND u.deleted = 0  AND lc.deleted=0 AND lc.approvedstatus= 2 ';
            
        }
        if(isset($filterdata->search_query) && trim($filterdata->search_query) != ''){

            $formsql .= " AND (u.firstname LIKE :firstnamesearch OR u.lastname LIKE :lastnamesearch OR u.email LIKE :emailsearch  OR u.phone1 LIKE :mobilesearch OR lc.id_number LIKE :id_numbersearch OR crole.name LIKE :role_namesearch OR tpo.code LIKE :codesearch) ";
            $searchparams = array('firstnamesearch' => '%'.trim($filterdata->search_query).'%','lastnamesearch' => '%'.trim($filterdata->search_query).'%','emailsearch' => '%'.trim($filterdata->search_query).'%' ,'mobilesearch' => '%'.trim($filterdata->search_query).'%','id_numbersearch' => '%'.trim($filterdata->search_query).'%','role_namesearch' => '%'.trim($filterdata->search_query).'%','codesearch' => '%'.trim($filterdata->search_query).'%');

        }else{
            $searchparams = array();
        }

        if(!empty($filterdata->tp_offerings)){

            $formsql.=" AND  pe.offeringid IN ($filterdata->tp_offerings) ";
        }

        if(!empty($filterdata->tp_role)){

            $formsql.=" AND  pe.roleid IN ($filterdata->tp_role) ";
        }

        if(!empty($filterdata->tp_organization)){

            $formsql.=" AND  lc.organization IN ($filterdata->tp_organization)";
        }


        if(!empty($selectedroleid) AND !is_null($selectedroleid)) {

            $selected_role_id = (int) $selectedroleid;

            $formsql.=" AND  pe.roleid = $selected_role_id ";

        }   


        $params = array_merge($searchparams);
        $totalusers = $DB->count_records_sql($countsql.$where.$formsql, $params);
        $formsql .=" ORDER BY u.id DESC";

        $users = $DB->get_records_sql($selectsql.$where.$formsql, $params, $stable->start,$stable->length);
        $listofusers = array();
        $count = 0;
        foreach($users as $user) {

            if($currentlang == 'ar') {

                $organization = $DB->get_field('local_organization','fullnameinarabic',array('id'=>$user->organization));

            } else {

                $organization = $DB->get_field('local_organization','fullname',array('id'=>$user->organization));

            }

            $listofusers[$count]['id'] = $user->id;
            $listofusers[$count]['fullname'] = $user->fullname;
            $listofusers[$count]['email'] = $user->email;
            $listofusers[$count]['id_number'] = $user->id_number;
            $listofusers[$count]['phone'] = $user->phone1;
            $listofusers[$count]['offeringid'] = $user->offeringid;
            $listofusers[$count]['organization'] = $user->organization > 0 ? $organization : '';
            $listofusers[$count]['offeringcode'] = $user->code;
            $role = $DB->get_record('role',array('id' => trim($user->roleid)));
            $listofusers[$count]['roleid'] = !empty($role->id) ? $role->id : 0;
            $listofusers[$count]['rolename'] = get_string($role->shortname,'local_trainingprogram');
            $listofusers[$count]['enrolledat'] = userdate($user->timecreated,get_string('strftimedatemonthabbr', 'core_langconfig')) ;
            $listofusers[$count]['roleshortname'] = !empty($role->shortname) ? $role->shortname : '--';
            $listofusers[$count]["unassignuser"] =  true ;
            $listofusers[$count]["programid"] = $programid;
            $coursename= $DB->get_field('course','fullname',array('id'=>$courseid));
            $listofusers[$count]["coursename"] = format_text($coursename,FORMAT_HTML);
            $count++;
        }
        $usersContext = array(
            "hascourses" => $listofusers,
            "nocourses" => $nocourse,
            "totalusers" => $totalusers,
            "length" => COUNT($listofusers),
        );
        return $usersContext;


   }


   public function get_listof_traineeusers($programid,$offeringid) {
        global $DB, $PAGE, $OUTPUT, $CFG, $USER;
        $systemcontext = context_system::instance();
        $role = array();
        if(is_siteadmin()  ||  has_capability('local/organization:manage_trainingofficial',$systemcontext)){
           $assigntrainer = true;
        }   
        
        $courseid=$DB->get_field('local_trainingprogram','courseid', array('id' => $programid));
        $trainerroleid = $DB->get_field('role', 'id', array('shortname' => 'trainer'));
        $traineeeid = $DB->get_field('role', 'id', array('shortname' => 'trainee'));

        if(!is_siteadmin() &&  has_capability('local/organization:manage_organizationofficial',$systemcontext))
        {
             $organization = $DB->get_field('local_users','organization',array('userid' => $USER->id));

            $sql1 = 'SELECT COUNT(userid) FROM {program_enrollments}  WHERE  programid = '.$programid.' AND offeringid = '.$offeringid.' AND courseid = '.$courseid .' AND roleid = '.$trainerroleid.' AND usercreated = '.$USER->id.' AND userid IN (SELECT userid FROM {local_users} WHERE organization = '.$organization.')';

            $sql2 = 'SELECT COUNT(userid) FROM {program_enrollments} WHERE  programid = '.$programid.' AND offeringid = '.$offeringid.' AND courseid = '.$courseid .' AND roleid = '.$traineeeid.' AND usercreated = '.$USER->id.' AND userid IN (SELECT userid FROM {local_users} WHERE organization = '.$organization.') ';
        } else {

            $sql1 = 'SELECT COUNT(userid) FROM {program_enrollments}  WHERE  programid = '.$programid.' AND offeringid = '.$offeringid.' AND courseid = '.$courseid .' AND roleid = '.$trainerroleid.'';

            $sql2 = 'SELECT COUNT(userid) FROM {program_enrollments} WHERE  programid = '.$programid.' AND offeringid = '.$offeringid.' AND courseid = '.$courseid .' AND roleid = '.$traineeeid.'';

        }
        $programoffusers =$DB->count_records_sql($sql1);

        $traineeusers =$DB->count_records_sql($sql2);
       
        $programid = $programid;
        $enrollid = $DB->get_field('enrol','id', array('courseid' => $courseid, 'enrol' => 'manual'));

        $viewdata=[
        'trainerid'=>$DB->get_field('role', 'id', array('shortname' => 'trainer')),
        'traineeid'=>$DB->get_field('role', 'id', array('shortname' => 'trainee')),
        'programoffusers'=>$programoffusers ? $programoffusers : 0,
        'traineeusers'=>$traineeusers ? $traineeusers : 0,
        'programid'=>$programid,
        'enrollid'=>$enrollid,
        'courseid'=>$courseid,
        'offeringid'=>$offeringid,
        'url'=>$CFG->wwwroot,
        'assigntrainer'=>$assigntrainer,
        'enrolledurl'=>$CFG->wwwroot.'/local/trainingprogram/programenrolleduserslist.php?programid='.$programid,
        'enrolledaction' => (is_siteadmin() ||  has_capability('local/organization:manage_trainingofficial',$systemcontext)) ? true: false,
        ];

        echo $OUTPUT->render_from_template('local_trainingprogram/viewptrainers', $viewdata);
    }

    public function enroll_trainer($data) {
        global $DB, $PAGE, $OUTPUT, $CFG;
       if($data->users) {
            $programid = $data->programid;
            $offeringid = $data->offeringid;
            $roleid = $data->roleid;
            $courseid=$DB->get_field('local_trainingprogram','courseid', array('id' => $programid));
            $trainers=implode(',', $data->users);
            list($trainersql,$trainerparams) = $DB->get_in_or_equal($data->users);
            $querysql = "SELECT id,firstname  FROM {user} WHERE id $trainersql";
            $trainerslist= $DB->get_records_sql($querysql,$trainerparams);
            foreach ($trainerslist AS $trainer) {
               (new trainingprogram)->program_enrollment($offeringid,$trainer->id,$roleid);
            } 

         }   

    }
    public function unassignuser($programid,$offeringid,$userid,$roleid) {
        global $DB, $PAGE, $OUTPUT, $CFG;

        $offering = $DB->get_record('tp_offerings', array('id' => $offeringid), '*', MUST_EXIST);
        $courseid=$DB->get_field('local_trainingprogram','courseid', array('id' => $programid));
        $manual = enrol_get_plugin('manual');
        $instance = $DB->get_record('enrol', array('courseid' => $courseid, 'enrol' => 'manual'), '*', MUST_EXIST);
        $manual->unenrol_user($instance, $userid);
        $group = groups_get_group_by_idnumber($courseid, $offering->code);
        if ($group->id) {
            groups_remove_member($group->id, $userid,null,0);
        }
       (new trainingprogram)->program_unenrollment($programid,$offeringid,$courseid,$userid,$roleid);
    }

      public function update_trainingprogram_status($trainingprogram) {
        global $DB, $USER;
        $program         = new stdClass();
        $program->programid     = $trainingprogram->programid;
        $program->offeringid     = $trainingprogram->offeringid;
        $program->userid     = $trainingprogram->userid;

        $completions=$DB->get_record('program_completions',array('programid'=>$program->programid,'offeringid'=>$program->offeringid,'userid'=>$program->userid),'id,preexam_completion_status,postexam_completion_status,completion_status,completiondate');
        
        try {

            if((isset($trainingprogram->cmid) && isset($trainingprogram->preexam)) && ($trainingprogram->cmid==$trainingprogram->preexam)){

                $program->preexam_completion_status = $trainingprogram->completionstate;
                $program->completion_status = $trainingprogram->completionstate;

                if($completions->postexam_completion_status == 0 && $trainingprogram->postexam > 0){

                    $program->completion_status = 0;
                    
                }

            }elseif((isset($trainingprogram->cmid) && isset($trainingprogram->postexam)) && ($trainingprogram->cmid==$trainingprogram->postexam)){

                $program->postexam_completion_status = $trainingprogram->completionstate;
                $program->completion_status = $trainingprogram->completionstate;

                if($completions->preexam_completion_status == 0 && $trainingprogram->preexam > 0){

                    $program->completion_status = 0;
                    
                }
            }else{

                if($trainingprogram->postexam > 0 ){

                    $program->completion_status = $completions->postexam_completion_status;
                    
                }

                if($trainingprogram->preexam > 0){

                    $program->completion_status = $completions->preexam_completion_status;
                    
                }
            }

            $completionstatus=$program->completion_status;

            if($trainingprogram->attendancecmpltn > 0 && $trainingprogram->attendancepercnt > 0){

                $program->completion_status = 0;


                $sql = "SELECT COUNT(atdnlg.id) 
                        FROM {attendance} as atdn 
                        JOIN {attendance_sessions} as atdnsn ON atdnsn.attendanceid=atdn.id 
                        JOIN {attendance_log} as atdnlg ON atdnlg.sessionid=atdnsn.id 
                        WHERE atdn.course=:courseid AND atdnlg.studentid=:userid AND atdnlg.statusid IN (SELECT id FROM {attendance_statuses} WHERE attendanceid = atdn.id AND acronym='P') ";

                $params = array('userid'=>$program->userid,'courseid'=>$trainingprogram->courseid);

                $user_attendancecount = $DB->count_records_sql($sql, $params);


                if($user_attendancecount){

                    $sql = "SELECT COUNT(ofsn.id) 
                        FROM {offering_sessions} as ofsn 
                        JOIN {tp_offerings} as tpofr ON tpofr.id=ofsn.offeringid 
                        WHERE tpofr.trainingid=:trainingid AND tpofr.id=:offeringid  ";


                    $params = array('trainingid'=>$program->programid,'offeringid'=>$program->offeringid);

                    $program_offerings = $DB->count_records_sql($sql, $params);

                    if($program_offerings){

                        $ttlcnt_cmpc_cmpln=$program_offerings;

                        $percentage=($user_attendancecount/$ttlcnt_cmpc_cmpln)*100;

                        if($ttlcnt_cmpc_cmpln > 0 && $percentage >= $trainingprogram->attendancepercnt ){

                            $program->completion_status = $completionstatus;

                        }

                    }
                }
            }

            $program->completiondate = ($program->completion_status) ? time() : 0;


            if($completions){

                $program->id   = $completions->id;

                $program->usermodified   = $USER->id;
                $program->timemodified   = time();

                $DB->update_record('program_completions', $program);

                // Trigger an event for training program completion changed.
                $event = \local_trainingprogram\event\trainingprogram_completion_updated::create(array(
                    'objectid' => $program->id,
                    'context' => \context_system::instance(),
                    'relateduserid' => $trainingprogram->userid,
                    'other' => array(
                        'relateduserid' => $trainingprogram->userid,
                        'programid' => $program->programid,
                        'offeringid' => $program->offeringid,
                        'completion_status' => $program->completion_status ? $program->completion_status : 0,
                    )
                ));
                $event->add_record_snapshot('program_completions', $program);
                $event->trigger();

            }else{

                $program->usercreated   = $USER->id;
                $program->timecreated   = time();

                $program->id=$DB->insert_record('program_completions', $program);

                // Trigger an event for training program completion changed.
                $event = \local_trainingprogram\event\trainingprogram_completion_updated::create(array(
                    'objectid' => $program->id,
                    'context' => \context_system::instance(),
                    'relateduserid' => $trainingprogram->userid,
                    'other' => array(
                        'relateduserid' => $trainingprogram->userid,
                        'programid' => $program->programid,
                        'offeringid' => $program->offeringid,
                        'completion_status' => $program->completion_status ? $program->completion_status : 0,
                    )
                ));
                $event->add_record_snapshot('program_completions', $program);
                $event->trigger();


                $traineesql = "SELECT ra.id
                FROM {role_assignments} ra 
                JOIN {role} as r ON r.id = ra.roleid
                 WHERE ra.contextid = 1 AND r.shortname = 'trainee' AND ra.userid = ".$trainingprogram->userid;
                $traineerole = $DB->get_field_sql($traineesql);
                if($traineerole){
                $tpdata=new \stdClass();
                $tpdata->program_name=$DB->get_field('local_trainingprogram','name',array('id'=>$trainingprogram->programid));
                $tpdata->program_userfullname=$DB->get_field('user','firstname',array('id'=>$trainingprogram->userid)).$DB->get_field('user','lastname',array('id'=>$trainingprogram->userid));
                $trainee=$DB->get_record('user',array('id'=>$trainingprogram->userid));             
                (new \local_trainingprogram\notification())->trainingprogram_notification('trainingprogram_completion', $touser=$trainee,$fromuser=$USER,$tpdata,$waitinglistid=0);
                }                              


            }


        } catch (dml_exception $ex) {
            print_error($ex);
        }
        return true;
    }  

    public function completedprograms() {
         global $DB, $PAGE, $OUTPUT, $USER;
          $systemcontext = context_system::instance();
          $trainingprogramlist = array();

           $selectsql = "SELECT lo.id as traineeid,lo.name as programname,lo.availableto,lo.availablefrom,lo.image,lo.courseid,lo.description,lo.sectors,lo.targetgroup,lo.competencyandlevels FROM {local_trainingprogram} lo WHERE FROM_UNIXTIME(lo.availableto,'%D %M %Y') < FROM_UNIXTIME(CURDATE(),'%D %M %Y')";

            $trainingprograms = $DB->get_records_sql($selectsql);
             $i=1;
            foreach($trainingprograms as $trainingprogram) {
            $lang= current_language();

            if( $lang == 'ar'){
                $programname = $trainingprogram->namearabic;

            }else{
                $programname = $trainingprogram->name;
            }

                $trainingprogramlist['sno'] = $i++;
                $trainingprogramlist['trainingid'] = $trainingprogram->traineeid;
                $trainingprogramlist['tainingprogramname'] = $programname;
                $trainingprogramlist['availablefrom'] = userdate($trainingprogram->availablefrom, get_string('strftimedatemonthabbr', 'langconfig'));
                $trainingprogramlist['availableto'] = userdate($trainingprogram->availableto, get_string('strftimedatemonthabbr', 'langconfig'));         
                $trainingprogramlist['published'] = $trainingprogram->published;
                $trainingprogramlist['courseid'] = $trainingprogram->courseid; 
                $trainingprogramlist['enrolledusers'] = $DB->count_records('program_enrollments', array('programid'=>$trainingprogram->id)); 
                list($competencysql,$competencyparams) = $DB->get_in_or_equal(explode(',',$trainingprogram->competencyandlevels));
                $compquerysql = "SELECT id AS competencyid,name AS competencyname, level AS competencylevel FROM {local_competencies} WHERE id $competencysql";
                $competencieslists= $DB->get_records_sql($compquerysql,$competencyparams);
                $competencies=[];
                foreach ($competencieslists AS $competency) {
                    $competencies[]=$competency->competencyname;
                }    
                $trainingprogramlist['competencies'] = implode(',', $competencies);
                $trainingprogramlist['deleteaction'] = $DB->record_exists('tp_offerings',array('trainingid' => $trainingprogram->traineeid))? true :false; 
                $trainingprogramlist['detailedprogramviewurl'] = $CFG->wwwroot.'/local/trainingprogram/programdetailedview.php?programid='.$trainingprogram->traineeid;    


            }

            return $trainingprogramlist;

    }

    public function mycompletedprograms() {
         global $DB, $PAGE, $OUTPUT, $USER;

          $trainingprogramlist = array();

           $selectsql = "SELECT loc.id as traineeid,loc.name as programname,loc.availableto,loc.availablefrom,loc.image,loc.courseid,loc.description,loc.sectors,loc.targetgroup,loc.competencyandlevels FROM {local_trainingprogram} loc JOIN {course} c ON loc.courseid =c.id JOIN {enrol} e ON e.courseid = c.id JOIN {user_enrolments} ue ON e.id = ue.enrolid  JOIN {course_completions} cc ON cc.course = c.id WHERE ue.userid = ".$USER->id." AND cc.timecompleted IS NOT NULL ORDER BY loc.availablefrom DESC";

            $trainingprograms = $DB->get_records_sql($selectsql);
             $i=1;
            foreach($trainingprograms as $trainingprogram) {

            $lang= current_language();

            if( $lang == 'ar'){
                $programname = $trainingprogram->namearabic;

            }else{
                $programname = $trainingprogram->name;
            }


                $trainingprogramlist['sno'] = $i++;
                $trainingprogramlist['trainingid'] = $trainingprogram->traineeid;
                $trainingprogramlist['tainingprogramname'] = $programname;
                $trainingprogramlist['availablefrom'] = userdate($trainingprogram->availablefrom, get_string('strftimedatemonthabbr', 'langconfig'));
                $trainingprogramlist['availableto'] = userdate($trainingprogram->availableto, get_string('strftimedatemonthabbr', 'langconfig'));         
                $trainingprogramlist['published'] = $trainingprogram->published;
                $trainingprogramlist['courseid'] = $trainingprogram->courseid; 
                $trainingprogramlist['enrolledusers'] = $DB->count_records('program_enrollments', array('programid'=>$trainingprogram->id)); 
                list($competencysql,$competencyparams) = $DB->get_in_or_equal(explode(',',$trainingprogram->competencyandlevels));
                $compquerysql = "SELECT id AS competencyid,name AS competencyname, level AS competencylevel FROM {local_competencies} WHERE id $competencysql";
                $competencieslists= $DB->get_records_sql($compquerysql,$competencyparams);
                $competencies=[];
                foreach ($competencieslists AS $competency) {
                    $competencies[]=$competency->competencyname;
                }    
                $trainingprogramlist['competencies'] = implode(',', $competencies);

            }

            return $trainingprogramlist;

    }


    public function insert_offering_session_record($sessionid,$offeringid,$sessiontime,$trainingid,$courseid) {
        global $DB, $PAGE, $OUTPUT, $USER;

        $tposdata = new stdClass();

        $tposdata->sessionid = $sessionid;
        $tposdata->offeringid = $offeringid;
        $tposdata->sessiondate = $sessiontime;
        $tposdata->programid = $trainingid;
        $tposdata->courseid = $courseid;
        $tposdata->timecreated = time();
        $tposdata->usercreated = $USER->id;

        try{
            $createofferingsession =  $DB->insert_record('offering_sessions', $tposdata); 
        return $createofferingsession;
        } catch(dml_exception $e){
            print_r($e);
        }
      
    }

    public function display_lisfof_current_offerings($stable, $filterdata) {
        global $DB, $PAGE, $OUTPUT, $CFG;
        $systemcontext = context_system::instance();
        $programid = $filterdata->programid;
        $publicstring = get_string('public','local_trainingprogram');
        $privatestring = get_string('private','local_trainingprogram');
        $dedicatedstring = get_string('private','local_trainingprogram');
        $selectsql = "SELECT tpo.id,tpo.code,tpo.startdate,tpo.enddate,tpo.type,tpo.trainingmethod,h.city,tpo.availableseats,tpo.sellingprice,h.name AS hallname,tpo.time,h.maplocation, h.seatingcapacity,h.buildingname,
         CASE
            WHEN tpo.type = 0 THEN '$publicstring'
            WHEN tpo.type = 1 THEN '$privatestring'
            ELSE '$dedicatedstring' 
        END AS type
        FROM  {tp_offerings} AS tpo LEFT JOIN {hall} AS h ON
        tpo.halladdress=h.id  WHERE tpo.trainingid = $programid";
        $countsql  = "SELECT COUNT(tpo.id) FROM  {tp_offerings} AS tpo LEFT JOIN {hall} AS h ON
        tpo.halladdress=h.id  WHERE tpo.trainingid = $programid";
        if  (isset($filterdata->search_query) && trim($filterdata->search_query) != ''){
            $formsql .= " AND (h.name LIKE :firstnamesearch) ";
            $searchparams = array('firstnamesearch' => '%'.trim($filterdata->search_query).'%');
        } else {
            $searchparams = array();
        }
        $params = array_merge($searchparams);
        $totalofferings = $DB->count_records_sql($countsql.$formsql,$params);;
        $formsql .=" ORDER BY tpo.startdate DESC";
        $offerings = $DB->get_records_sql($selectsql.$formsql, $params, $stable->start,$stable->length);
        $offeringslist = array();
        $count = 0;
          $i=1;
        foreach($offerings as $offering) {

      
                $courseid = $DB->get_field('local_trainingprogram', 'courseid', array('id' => $programid));
                $traineeroleid = $DB->get_field('role', 'id', array('shortname' => 'trainee'));
                $enrolledtraineessql="SELECT COUNT(id) FROM {program_enrollments} WHERE programid = $programid AND offeringid = $offering->id AND courseid = $courseid AND roleid = $traineeroleid";
                $programenrolledcount = $DB->count_records_sql($enrolledtraineessql);
                $offeringslist[$count]['coid']=$i++;

                $offeringstartdate = date('Y-m-d',$offering->startdate);
                $currdate=date('Y-m-d'); 

                $offeringstarttime = gmdate("H:i",$offering->time);
                $currenttime = date('H:i');


                $lang= current_language();

                $starttime = gmdate("h:i",$offering->time);
                $starttimemeridian = gmdate('a',$offering->time);

                if( $lang == 'ar'){
                    $programname=$DB->get_field('local_trainingprogram','namearabic',array('id'=>$programid));
                    $startmeridian = ($starttimemeridian == 'am')? 'صباحا':'مساءً';

                }else{
                    $programname=$DB->get_field('local_trainingprogram','name',array('id'=>$programid));
                    $startmeridian = ($starttimemeridian == 'am')? 'AM':'PM';
                }
               
                $offeringslist[$count]['offeringid'] = $offering->id;
                $offeringslist[$count]['tainingprogramname'] = $programname;
                $offeringslist[$count]['code'] = $offering->code;

                if($offering->trainingmethod == 'online') {
                    $offeringslist[$count]['offeringmethod'] = get_string('online','local_trainingprogram');
                    $offeringslist[$count]['enddatedisplay']  = true;

                } elseif($offering->trainingmethod == 'offline') {

                    $offeringslist[$count]['offeringmethod'] = get_string('offline','local_trainingprogram');
                    $offeringslist[$count]['enddatedisplay']  = true;

                } else {

                    $offeringslist[$count]['offeringmethod'] = get_string('elearning','local_trainingprogram');
                    $offeringslist[$count]['enddatedisplay']  = false;
                }

                $offeringslist[$count]['availableseats'] = $offering->availableseats;
                $offeringslist[$count]['buildingname'] = $offering->buildingname;
                $offeringslist[$count]['hallname'] = $offering->hallname;
                $offeringslist[$count]['city'] = $offering->city = 1 ?'Riyad':$offering->city;
                $offeringslist[$count]['sellingprice'] = $offering->sellingprice;
                $offeringslist[$count]['maplocation'] = $offering->maplocation;
                $offeringslist[$count]['enrolled']=$programenrolledcount ? $programenrolledcount : 0;
                $offeringslist[$count]['deleteaction'] = $programenrolledcount > 0 ? true :false; 
                $offeringslist[$count]['halldisplayaction'] = $offering->trainingmethod == 'offline' ? true :false; 
                $offeringslist[$count]['sessiondatadisplay'] = $offering->trainingmethod == 'offline' ? true :false; 
                $offeringslist[$count]['programid']=$programid;
                $offeringslist[$count]['type']=$offering->type;
                $offeringslist[$count]['time'] = gmdate("H:i:s", $offering->time);
                $offeringslist[$count]['endtime'] = gmdate("H:i:s", ($offering->time + $offering->duration));
                $offeringslist[$count]['startdate']  = userdate($offering->startdate, get_string('strftimedaydate', 'langconfig')).' '.$starttime.' '.$startmeridian;
                $offeringslist[$count]['enddate'] = userdate($offering->enddate, get_string('strftimedaydate', 'langconfig'));
                $offeringslist[$count]['offeringenroll_edit_action'] = ($offeringstartdate > $currdate || ($offeringstartdate  ==  $currdate &&  $offering->time > 0 &&  $offeringstarttime >= $currenttime )) ? true : false ;

                $topssql = "SELECT ofs.sessionid, ats.attendanceid,ats.sessdate,ofs.courseid,ofs.programid 
                              FROM {offering_sessions} AS ofs 
                         LEFT JOIN {attendance_sessions} AS ats ON ofs.sessionid = ats.id 
                             WHERE ofs.offeringid =:offeringid";

                $tpofferingssessions = $DB->get_records_sql($topssql, ['offeringid' => $offering->id]);
                $k=1;
                foreach ($tpofferingssessions AS $tpofferingssession) {
                    $tpofferingssession->cid=$k++;
                    $attendanceid = $tpofferingssession->attendanceid;

                    $moduleid=$DB->get_field('course_modules','id',  array ('instance' =>$attendanceid,'course' => $tpofferingssession->courseid));
                    // $tpofferingssession->url = $CFG->wwwroot.'/mod/attendance/take?id='.$moduleid.'&sessionid='.$tpofferingssession->sessionid.'&grouptype=0' ;
                    $tpofferingssession->url = $CFG->wwwroot.'/mod/attendance/manage.php?id='.$moduleid;
                    $tpofferingssession->sessiondate =date('jS F Y',$tpofferingssession->sessdate);
                } 
                if(!empty($tpofferingssessions)){
                    $offeringslist[$count]['sessiondata'] = array_values($tpofferingssessions);
                } else {
                    $offeringslist[$count]['sessiondata'] = array();
                }
                $offeringslist[$count]['assignurl'] =$CFG->wwwroot.'/local/trainingprogram/program_trainee_trainer_view.php?programid='.$programid.'&offeringid='.$offering->id;
                $offeringslist[$count]['enrolltraineeactionview'] = ($offering->type =='Dedicated') ? false : true;
            $count++;
        }
        $coursesContext = array(
            "currentofferings" => $offeringslist,
            "nocourses" => $nocourse,
            "totalofferings" => $totalofferings,
            "length" => count($offeringslist),
        );
        return $coursesContext;
    }
    

    public function delete_session_record($sessionid) {
        global $DB;

        $DB->delete_records('attendance_sessions',array('id' =>$sessionid));
        $DB->delete_records('offering_sessions',array('sessionid' =>$sessionid));

    }

    public function reserveofferingseats($data) {
        global $DB,$OUTPUT,$PAGE;

        $renderer = $PAGE->get_renderer('local_trainingprogram');
        $renderer->seat_summery($data);

    } 
    public static function constcompetencytypes() {

        $competencytypes = array(
            self::CORECOMPETENCIES => get_string('corecompetencies','local_competency'),
            self::TECHNICALCOMPETENCIES => get_string('technicalcompetencies','local_competency'),
            self::BEHAVIORALCOMPETENCIES => get_string('behavioralcompetencies','local_competency')
            );
        return $competencytypes;
    }

    public static function constcompetency_types() {
       global $DB,$OUTPUT,$PAGE;

        $competencytypes = self::constcompetencytypes();

        list($relatedcompetencytypessql, $relatedcompetencytypesparams) = $DB->get_in_or_equal(array_flip($competencytypes), SQL_PARAMS_NAMED, 'competencytypes',false);
        $params = $relatedcompetencytypesparams;
        $sql = "SELECT cmt.type,cmt.type as fullname FROM {local_competencies} AS cmt
                WHERE cmt.type $relatedcompetencytypessql ";
        if (!empty($searchparams)) {
            $sql .= " AND (cmt.type LIKE :search )";
            $params['search'] = '%' . $searchparams . '%';
        }
        $competencietypes=$DB->get_records_sql_menu($sql,$params,$limitfrom,$limitnum);
    

        return array_merge($competencytypes,$competencietypes);
    }

    public function coupon_code_view() {
        global $DB, $PAGE, $OUTPUT;
        $systemcontext = context_system::instance();
        $renderer = $PAGE->get_renderer('local_trainingprogram');
        $filterparams  = $renderer->get_couponcode(true);
        $filterparams['submitid'] = 'form#filteringform';
        $filterparams['widthclass'] = 'col-md-6';
        $filterparams['placeholder'] = get_string('serch_code','local_trainingprogram');
        $globalinput=$renderer->global_filter($filterparams);
        $coupons = $renderer->get_couponcode();
        $fform = trainingprogram_coupon_management_filters_form($filterparams);
        $filterparams['coupons'] = $coupons;
        $filterparams['filterform'] = $fform->render();
        $filterparams['globalinput'] = $globalinput;
        $renderer->listofcoupons($filterparams);

    } 

    public function get_listof_coupons($stable, $filterdata) {
        global $DB, $PAGE, $OUTPUT, $CFG, $USER;
        $systemcontext = context_system::instance();
        $selectsql = "SELECT coupon.id,coupon.code,coupon.number_of_codes,
        coupon.discount,coupon.coupon_created_date,
        coupon.coupon_expired_date,coupon.coupon_status
        FROM {coupon_management} AS coupon WHERE 1=1  "; 
        $countsql  = "SELECT COUNT(coupon.id)
        FROM {coupon_management}  AS coupon WHERE 1=1";
        if  (isset($filterdata->search_query) && trim($filterdata->search_query) != ''){
            $formsql .= " AND (coupon.code LIKE :codesearch) ";
            $searchparams = array('codesearch' => '%'.trim($filterdata->search_query).'%');
        } else {
            $searchparams = array();
        }

        if (!empty($filterdata->couponstatus)){

             if( in_array('1', explode(',', $filterdata->couponstatus)) && in_array('2', explode(',', $filterdata->couponstatus))) {
                $formsql .= " ";
             }elseif($filterdata->couponstatus == 1) {

                $formsql .= " AND date(FROM_UNIXTIME(coupon.coupon_expired_date)) > CURDATE() ";

            } elseif($filterdata->couponstatus == 2) {

                $formsql .= " AND date(FROM_UNIXTIME(coupon.coupon_expired_date)) < CURDATE() ";
            }

        }
        if($filterdata->{'expired_date[enabled]'} == 1 ){
            $start_year = $filterdata->{'expired_date[year]'};
            $start_month = $filterdata->{'expired_date[month]'};
            $start_day = $filterdata->{'expired_date[day]'};
            $filter_starttime_con = mktime(0,0,0, $start_month, $start_day, $start_year);
            $formsql.= " AND coupon.coupon_expired_date <= '$filter_starttime_con' ";
        }
        
        $params = array_merge($searchparams);
        $totalcoupons = $DB->count_records_sql($countsql.$formsql,$params);
        $formsql .=" ORDER BY coupon.coupon_status ASC,coupon.coupon_created_date DESC";
        $coupons = $DB->get_records_sql($selectsql.$formsql, $params, $stable->start,$stable->length);
        $couponslist = array();
        $count = 0;
        foreach($coupons as $coupon) {
            $couponslist[$count]["id"] = $coupon->id;
            $couponslist[$count]["code"] =$coupon->code;
            $couponslist[$count]["number_of_codes"] =$coupon->number_of_codes;
            $couponslist[$count]["discount"] =$coupon->discount;
            $couponslist[$count]["coupon_created_date"] = userdate($coupon->coupon_created_date,get_string('strftimedatemonthabbr', 'core_langconfig'));
            $couponslist[$count]["coupon_expired_date"] = userdate($coupon->coupon_expired_date,get_string('strftimedatemonthabbr', 'core_langconfig'));
            $coupon_expired_date = date('Y-m-d',$coupon->coupon_expired_date);
            $currdate=date('Y-m-d'); 
            if ($coupon_expired_date >= $currdate && $coupon->coupon_status == 1) {
               $couponslist[$count]["coupon_status"] = get_string('available', 'local_trainingprogram');
               $couponslist[$count]["deletecouponview"] = false;
            } else {
                $couponslist[$count]["coupon_status"]=  get_string('completed', 'local_trainingprogram');
                $couponslist[$count]["deletecouponview"] = true;
            }
            
            $couponslist[$count]["actionview"]= ($coupon_expired_date >= $currdate && $coupon->coupon_status == 1)? true : false ;
            $count++;
        }
        $coursesContext = array(
            "hascourses" => $couponslist,
            "nocourses" => $nocourse,
            "totalcoupons" => $totalcoupons,
            "length" => count($couponslist)
        );
        return $coursesContext;
    }

    public function create_update_coupon($data){
        global $DB, $USER, $CFG,$PAGE;

        $renderer = $PAGE->get_renderer('local_trainingprogram'); 
        $data->number_of_codes = $data->number_of_codes;
        $data->discount = $data->discount;
        $data->coupon_created_date =time();
        $data->coupon_expired_date = $data->coupon_expired_date;
        $data->usercreated = $USER->id;
        $data->timecreated =time();
        for ($i = 0; $i < $data->number_of_codes; $i++) {
            $coupon_code = $renderer->generateCouponCode(15);
            if($DB->record_exists('coupon_management',array('code'=>$coupon_code))) {
                $data->code = $coupon_code.'F'; 
            } else {
                $data->code = $coupon_code; 
            }
            $DB->insert_record('coupon_management', $data);
        }
        
    }
    public function send_coupon_mail($data){
        global $DB, $USER, $CFG,$PAGE;
        $logrecord   = new \stdClass(); 
        $result=new \stdClass();
        $code = $data->couponcode;
        if($data->usertype == 0){
            $userdata = $DB->get_record('user',array('id'=>$data->internaluser));
            $to = $userdata->email;
            $firstname = $userdata->firstname;
            $lastname = $userdata->lastname;
            $fullname=$userdata->firstname.' '.$userdata->lastname;
        } else {
            $to = $data->email;
            $firstname = $data->name;
            $lastname = $data->name;
            $fullname=$data->name;
        }
        $result->name = $fullname;
        $result->code = $code;
        $subject = 'Here is your coupon code!';
        $message = get_string('coupon_email_body', 'local_trainingprogram',$result);
        $logrecord->email = $to;
        $logrecord->subject = $to;
        $logrecord->message = $message;
        $logrecord->code = $code;
        $logrecord->timecreated  = time();
        $logrecord->usercreated  = $USER->id;
        try{
           $insertlogrecord = $DB->insert_record('coupon_management_emaillogs', $logrecord);
        } catch(moodle_exception $e){
          print_r($e);
        }
        $touser->email = $to;
        $touser->firstname = $firstname;
        $touser->lastname = $lastname;
        $touser->maildisplay = true;
        $touser->mailformat = 1; // 0 (zero) text-only emails, 1 (one) for HTML/Text emails.
        $touser->id = -99;
        $touser->firstnamephonetic = '';
        $touser->lastnamephonetic = '';
        $touser->middlename = '';
        $touser->alternatename = '';
        $fromuser = \core_user::get_support_user();
        try{
            $sendmail = email_to_user($touser, $fromuser, $subject, $message);
            return $sendmail;
        } catch(moodle_exception $e){
          print_r($e);
        }
        
    }
    public function ordinal_number($number) {
        $ends = array('th','st','nd','rd','th','th','th','th','th','th');
        if ((($number % 100) >= 11) && (($number%100) <= 13)) {
            return $number. 'th';
        } else {
            return $number. $ends[$number % 10];
        }
   }

    public function get_listof_competencytypes($query = null,$level = null) {
        global $DB;

        // $sql = " SELECT ljbl.id
        //             FROM mdl_local_jobrole_level ljbl
        //             WHERE ljbl.level = '$level' ";

        // $jobroleids = $DB->get_fieldset_sql($sql);

        $sql = "SELECT lc.type as id, lc.type as fullname
                  FROM {local_competencies} lc 
                  WHERE  FIND_IN_SET('$level', lc.level) ";
        $sectorquery = array();
        // if(!empty($jobroleids)) {
        //     foreach ($jobroleids as $jobroleid) {
        //         $sectorquery[] = " CONCAT(',',lc.jobroleid,',') LIKE CONCAT('%,',$jobroleid,',%') "; 
        //     }
        //     $sectoqueeryparams =implode('OR',$sectorquery);
        //     $formsql = ' AND ('.$sectoqueeryparams.') ';
        // } else {
        //     $formsql = ' AND (0) ';
        // }

        $competenciestypesdata = $DB->get_records_sql($sql/*.$formsql*/);
        $returndata = array();
        $constcompetencytypes = tp::constcompetencytypes();

        foreach ($competenciestypesdata AS $competenciestype) {

            if(array_key_exists($competenciestype->fullname,$constcompetencytypes)) {

               $display_fullname = $constcompetencytypes[$competenciestype->fullname];
            } else {

               $display_fullname = $competenciestype->fullname;
            }
        
            $returndata[] = (object)array('id'=> $competenciestype->fullname, 'fullname' =>$display_fullname);
        }
        $return = array_values(json_decode(json_encode(($returndata)), true));
        return $return;
    }
    public function get_listof_levels($query = null) {
        global $DB;

        $currentlang= current_language();

        if( $currentlang == 'ar'){
            $sql = " SELECT ljbl.level as id, REPLACE(ljbl.level,'Level ','مستوى ') as fullname 
                    FROM {local_jobrole_level} ljbl ";

        } else {

            $sql = " SELECT ljbl.level as id, ljbl.level as fullname 
                    FROM {local_jobrole_level} ljbl ";

        }    
        
        $data = $DB->get_records_sql($sql);
        $return = array_values(json_decode(json_encode(($data)), true));

        return $return;
    }
    public function remove_coupon($couponid, $couponcode){
        global $DB, $USER, $CFG;
        try{
            $remove_coupon=$DB->delete_records('coupon_management',array ('id' =>$couponid, 'code' =>$couponcode));
            return $remove_coupon;
        } catch(moodle_exception $e){
          print_r($e);
        } 
        
    } 

    public function add_update_program_agenda($data){
        global $DB, $USER, $CFG;

        $days = $data->days;
        $programid = $data->programid;
        $sql ="SELECT id 
                FROM {program_agenda}
                WHERE programid = $programid";
        $current_program_agenda_lists = $DB->get_records_sql($sql);
        foreach($current_program_agenda_lists AS $agenda) {
            (new trainingprogram)->delete_existing_agenda($agenda->id);
        }
        if($days > 0) {
            for ($i = 1; $i <= $days; $i++) {
                $description = $data->{"description$i"}['text'];
                if(!empty($description)) {
                    $data->day = $i;
                    $data->programid = $programid;
                    $data->description = $description;
                    $data->usercreated = $USER->id;
                    $data->timecreated = time();
                    $DB->insert_record('program_agenda', $data);
                }
            }

        }
    }
    public function delete_existing_agenda($id) {
        global $DB;
        $DB->delete_records('program_agenda',array('id' =>$id));
    } 
 
    public static function get_sector_by_jobroleid($jobroleid) {

        global $DB, $USER;

        if(!empty($jobroleid)){

          $sector= $DB->get_record_sql('SELECT sect.id as sectorid,seg.id as segmentid,jbfm.id as jobfamilyid
                                            FROM {local_sector} as sect 
                                            JOIN {local_segment} as seg ON seg.sectorid=sect.id 
                                            JOIN  {local_jobfamily} as jbfm ON jbfm.segmentid=seg.id 
                                            JOIN {local_jobrole_level} as jbrl ON jbrl.jobfamily=jbfm.id 
                                            JOIN {local_competencies} as cmtc ON FIND_IN_SET(jbrl.id,cmtc.jobroleid) > 0
                                                 WHERE cmtc.jobroleid IN ($jobroleid)');

        }else{

            $sector= $DB->get_records_sql_menu("SELECT id,CONCAT(code,' ',title) as title FROM {local_sector}");
        }


        return $sector;
            
    }
    public function early_registration_view() {
        global $DB, $PAGE, $OUTPUT;
        $systemcontext = context_system::instance();
        $renderer = $PAGE->get_renderer('local_trainingprogram');
        $filterparams  = $renderer->get_early_registration(true);
        $filterparams['submitid'] = 'form#filteringform';
        $filterparams['widthclass'] = 'col-md-6';
        $filterparams['placeholder'] = get_string('serch_early_registration','local_trainingprogram');
        $globalinput=$renderer->global_filter($filterparams);
        $earlyregistration = $renderer->get_early_registration();
        $fform = trainingprogram_early_registration_management_filters_form($filterparams);
        $filterparams['earlyregistration'] = $earlyregistration;
        $filterparams['filterform'] = $fform->render();
        $filterparams['globalinput'] = $globalinput;
        $renderer->listofearlyregistrations($filterparams);

    } 

    public function get_listof_earlyregistrations($stable, $filterdata) {
        global $DB, $PAGE, $OUTPUT, $CFG, $USER;
        $systemcontext = context_system::instance();
        $selectsql = "SELECT erstn.id,erstn.days,
        erstn.discount,erstn.earlyregistration_created_date,
        erstn.earlyregistration_expired_date,erstn.earlyregistration_status
        FROM {earlyregistration_management} AS erstn WHERE 1=1 "; 
        $countsql  = "SELECT COUNT(erstn.id)
        FROM {earlyregistration_management}  AS erstn WHERE 1=1";
        if  (isset($filterdata->search_query) && trim($filterdata->search_query) != ''){
            $formsql .= " AND (erstn.days LIKE :dayssearch) ";
            $searchparams = array('dayssearch' => '%'.trim($filterdata->search_query).'%');
        } else {
            $searchparams = array();
        }

        if (!empty($filterdata->earlyregistrationstatus)){

             if( in_array('1', explode(',', $filterdata->earlyregistrationstatus)) && in_array('2', explode(',', $filterdata->earlyregistrationstatus))) {
                $formsql .= " ";
             }elseif($filterdata->earlyregistrationstatus == 1) {

                $formsql .= " AND date(FROM_UNIXTIME(erstn.earlyregistration_expired_date)) > CURDATE() ";

            } elseif($filterdata->earlyregistrationstatus == 2) {

                $formsql .= " AND date(FROM_UNIXTIME(erstn.earlyregistration_expired_date)) < CURDATE() ";
            }

        }


        if($filterdata->{'expired_date[enabled]'} == 1 ){
            $start_year = $filterdata->{'expired_date[year]'};
            $start_month = $filterdata->{'expired_date[month]'};
            $start_day = $filterdata->{'expired_date[day]'};
            $filter_starttime_con = mktime(0,0,0, $start_month, $start_day, $start_year);
            $formsql.= " AND erstn.earlyregistration_expired_date <= '$filter_starttime_con' ";
        }

        $params = array_merge($searchparams);

        $totalearlyregistrations = $DB->count_records_sql($countsql.$formsql,$params);
        $formsql .=" ORDER BY erstn.id DESC";
        $earlyregistrations = $DB->get_records_sql($selectsql.$formsql, $params, $stable->start,$stable->length);
        $earlyregistrationslist = array();
        $count = 0;
        foreach($earlyregistrations as $earlyregistration) {
            $earlyregistrationslist[$count]["id"] = $earlyregistration->id;
            $earlyregistrationslist[$count]["days"] =$earlyregistration->days;
            $earlyregistrationslist[$count]["discount"] =$earlyregistration->discount;
            $earlyregistrationslist[$count]["earlyregistration_created_date"] = userdate($earlyregistration->earlyregistration_created_date,get_string('strftimedatemonthabbr', 'core_langconfig'));
            $earlyregistrationslist[$count]["earlyregistration_expired_date"] =  userdate($earlyregistration->earlyregistration_expired_date,get_string('strftimedatemonthabbr', 'core_langconfig'));;
            $earlyregistration_expired_date = date('Y-m-d',$earlyregistration->earlyregistration_expired_date);
            $currdate=date('Y-m-d'); 
            if ($earlyregistration_expired_date >= $currdate && $earlyregistration->earlyregistration_status == 1) {
               $earlyregistrationslist[$count]["earlyregistration_status"] = get_string('available', 'local_trainingprogram');
               $earlyregistrationslist[$count]["deleteearlyregistrationview"] = false;
            } else {
                $earlyregistrationslist[$count]["earlyregistration_status"]=  get_string('completed', 'local_trainingprogram');
                $earlyregistrationslist[$count]["deleteearlyregistrationview"] = true;
            }
            
            $earlyregistrationslist[$count]["actionview"]=  true  ;
            $count++;
        }
        $coursesContext = array(
            "hascourses" => $earlyregistrationslist,
            "nocourses" => $nocourse,
            "totalearlyregistrations" => $totalearlyregistrations,
            "length" => count($earlyregistrationslist)
        );
        return $coursesContext;
    }

    public function create_update_earlyregistration($data){
        global $DB, $USER, $CFG,$PAGE;

        $renderer = $PAGE->get_renderer('local_trainingprogram'); 
        $data->days = $data->days;
        $data->discount = $data->discount;
        $data->earlyregistration_created_date =time();
        $data->earlyregistration_expired_date = $data->earlyregistration_expired_date;

        if($data->id > 0){

            $data->usermodified = $USER->id;
            $data->timemodified =time();
            $DB->update_record('earlyregistration_management', $data);

        }else{

            $data->usercreated = $USER->id;
            $data->timecreated =time();
            $DB->insert_record('earlyregistration_management', $data);

        }

        
    }
    public function remove_earlyregistration($earlyregistrationid, $earlyregistrationdays){
        global $DB, $USER, $CFG;
        try{
            $remove_earlyregistration=$DB->delete_records('earlyregistration_management',array ('id' =>$earlyregistrationid, 'days' =>$earlyregistrationdays));
            return $remove_earlyregistration;
        } catch(moodle_exception $e){
          print_r($e);
        } 
        
    } 

    public function enrol_program($add, $offeringid,$programid){
        global $OUTPUT, $PAGE, $DB;
        $type = 'program_enrol';
        $roleid = $DB->get_field('role', 'id', ['shortname' => 'trainee']);
        $availableseats = $this->get_available_seats($offeringid);

        $userstoassign = $add;
        $program= $DB->get_record_sql('SELECT * FROM {local_trainingprogram} as tp 
                                         JOIN {tp_offerings} as tpo ON tpo.trainingid = tp.id 
                                        WHERE tpo.id=:offeringid', ['offeringid' => $offeringid]);

        $course= $DB->get_record('course', ['id' => $program->courseid], '*', MUST_EXIST);
        $groupid = $DB->get_field_sql('SELECT g.id FROM {groups} as g JOIN {tp_offerings} as tpo on g.idnumber=tpo.code where tpo.id=:id',array('id'=>$offeringid));
        if(sizeof($userstoassign) > $availableseats) {
            echo "<div class='alert alert-info'>".get_string('userscountismore', 'local_exams', $availableseats)."</div>";
        } else {
            if (!empty($userstoassign)) {
                $progress = 0;
                $progressbar = new \core\progress\display_if_slow(get_string('enrollusers', 'local_trainingprogram',$course->fullname));
                $progressbar->start_html();
                $progressbar->start_progress('',count($userstoassign)-1);

                foreach($userstoassign as $key=>$adduser){

                  $progressbar->progress($progress);
                  $progress++;

                    (new \local_trainingprogram\local\trainingprogram)->program_enrollment($offeringid,$adduser);

                    (new learningtracks)->program_enrolment($programid, $offeringid, $roleid, $adduser);

                }

                $progressbar->end_html();
                $result=new stdClass();
                $result->changecount=$progress;
                $result->course=format_text($course->fullname,FORMAT_HTML); 
                return $result;
            }                
        }
    }

    public function unenrol_program($remove, $offeringid,$programid) {
        global $DB, $OUTPUT, $PAGE;
        $type = 'program_unenroll';
        $roleid = $DB->get_field('role', 'id', ['shortname' => 'trainee']);
        $availableseats = $this->get_available_seats($offeringid);

        $trainingmethod = $DB->get_field_sql('SELECT trainingmethod FROM {tp_offerings} WHERE id = '.$offeringid.'');

        $userstounassign = $remove;
        $program= $DB->get_record_sql('SELECT tp.id,tp.courseid,tp.price,tpo.code AS offeringcode FROM {local_trainingprogram} as tp 
                                         JOIN {tp_offerings} as tpo ON tpo.trainingid = tp.id 
                                        WHERE tpo.id=:offeringid', ['offeringid' => $offeringid]);

        $course= $DB->get_record('course', ['id' => $program->courseid], '*', MUST_EXIST);
        $groupid = $DB->get_field_sql('SELECT g.id FROM {groups} as g JOIN {tp_offerings} as tpo on g.idnumber=tpo.code where tpo.id=:id',array('id'=>$offeringid));
     
        if (!empty($userstounassign)) {
            $progress = 0;
            $progressbar = new \core\progress\display_if_slow(get_string('un_enrollusers', 'local_trainingprogram',$course->fullname));
            $progressbar->start_html();
            $progressbar->start_progress('', count($userstounassign)-1);
            foreach($userstounassign as $key=>$removeuser){
                $progressbar->progress($progress);
                $progress++;
                $manual = enrol_get_plugin('manual');
                $instance = $DB->get_record('enrol', array('courseid' => $program->courseid, 'enrol' => 'manual'), '*', MUST_EXIST);
                $manual->unenrol_user($instance, $removeuser);

                if($trainingmethod !='elearning') {

                    //$group = groups_get_group_by_idnumber($program->courseid, $program->offeringcode);
                    $group = $DB->get_record_sql("SELECT grop.id FROM {groups} as grop JOIN {tp_offerings} as tpo ON tpo.code = grop.idnumber WHERE tpo.id = $offeringid");
                    $groupid = (int) $group->id;
                    if ($groupid) {
                        groups_remove_member($groupid, $removeuser,null,0);
                    }
                }

              
                $this->program_unenrollment($program->id,$offeringid,$program->courseid,$removeuser,$roleid);

                (new learningtracks)->program_unenrol($program->id, $offeringid, $roleid, $removeuser);

            }
            $progressbar->end_html();
            $result=new stdClass();
            $result->changecount=$progress;
            $result->course=format_text($course->fullname,FORMAT_HTML); 
            echo $OUTPUT->notification(get_string('unenrolluserssuccess', 'local_trainingprogram',$result),'success');
            $button = new single_button($PAGE->url, get_string('click_continue','local_trainingprogram'), 'get', true);
            $button->class = 'continuebutton';
            echo $OUTPUT->render($button);
            die();
        }
    }

    public function get_available_seats($offeringid) {
        global $DB,$USER;

        $offeringid = (int) $offeringid;
        $systemcontext = context_system::instance();
        $traineeeid = $DB->get_field('role', 'id', array('shortname' => 'trainee'));
        
        $totalseatssql = " SELECT  tp.availableseats AS total
                                     FROM {tp_offerings} tp
                                    WHERE tp.id = $offeringid";
        
        $total = $DB->get_field_sql($totalseatssql);
          if(!isloggedin() || (isloggedin() && (is_siteadmin() || has_capability('local/organization:manage_trainingofficial',$systemcontext)))) {

            $enrolled = $DB->get_field_sql(" SELECT count(userid) AS total
                              FROM {program_enrollments} AS pe
                             WHERE pe.offeringid = $offeringid AND pe.roleid = $traineeeid  AND pe.usercreated = $USER->id ");
            $purchasedseats = $DB->get_field_sql("SELECT SUM(purchasedseats) 
                         FROM {tool_org_order_seats} 
                        WHERE tablename = 'tp_offerings' AND fieldname = 'id' AND fieldid = $offeringid") ;

             $seats = $total - ($enrolled + $purchasedseats);
        } else {

            $available_seats = $DB->get_field_sql("SELECT SUM(availableseats)  
                                                         FROM {tool_org_order_seats} 
                                                        WHERE tablename = 'tp_offerings' AND fieldname = 'id' AND fieldid = $offeringid AND orguserid = $USER->id ");

            if($available_seats > 0){
               
               $seats = $available_seats ;

            } else {

                $purchasedseats = $DB->get_field_sql("SELECT SUM(purchasedseats) 
                             FROM {tool_org_order_seats} 
                            WHERE tablename = 'tp_offerings' AND fieldname = 'id' AND fieldid = $offeringid") ;

                $enrolled = $DB->get_field_sql(" SELECT count(userid) AS total
                                  FROM {program_enrollments} AS pe
                                 WHERE pe.offeringid = $offeringid AND pe.roleid = $traineeeid  AND pe.usercreated = $USER->id ");

               $seats = $total - ($enrolled + $purchasedseats);
            }

        }

        return $seats;
    }

    public function get_after_approved_available_seats($offeringid) {

        global $DB,$USER;

        $systemcontext = context_system::instance();

        $offeringid = (int) $offeringid;
        $systemcontext = context_system::instance();
        $traineeeid = $DB->get_field('role', 'id', array('shortname' => 'trainee'));

        $totalseatssql = " SELECT  tp.availableseats AS total
                                     FROM {tp_offerings} tp
                                    WHERE tp.id = $offeringid";

        if(is_siteadmin() || has_capability('local/organization:manage_trainingofficial',$systemcontext)) {

          $enrolledsql = " SELECT count(pe.userid) AS total
                              FROM {program_enrollments} AS pe
                             WHERE pe.offeringid = $offeringid AND pe.roleid = $traineeeid AND pe.usercreated = $USER->id";
        } else {

            $enrolledsql = " SELECT count(pe.userid) AS total
                              FROM {program_enrollments} AS pe
                             WHERE pe.offeringid = $offeringid AND pe.roleid = $traineeeid AND pe.usercreated <> $USER->id";
        }                             
       

        $purchasedseats_sql = "SELECT SUM(purchasedseats) 
                         FROM {tool_org_order_seats} 
                        WHERE tablename = 'tp_offerings' AND fieldname = 'id' AND fieldid = $offeringid" ;

        $purchasedseats = $DB->get_field_sql($purchasedseats_sql);

        $enrolled = $DB->count_records_sql($enrolledsql);
        $total = $DB->get_field_sql($totalseatssql);

         $seats = $total - ($enrolled + $purchasedseats);

         return $seats;

    }

    public function get_erolled_seats($offeringid,$enrolled_seats_by_me = false,$userid=0 ) {
        global $DB,$USER;

        $offeringid = (int) $offeringid;

        $systemcontext = context_system::instance();
        $traineeeid = $DB->get_field('role', 'id', array('shortname' => 'trainee'));
        
        if((is_siteadmin() || has_capability('local/organization:manage_trainingofficial',$systemcontext)) && !$enrolled_seats_by_me) {

            $enrolledsql = " SELECT count(userid) AS total
                              FROM {program_enrollments} AS pe
                             WHERE pe.offeringid = $offeringid AND pe.roleid = $traineeeid";
         
        } else {

            if($userid == 0){

                $userid=$USER->id;
                
            }

              
            $enrolledsql = " SELECT count(userid) AS total
                              FROM {program_enrollments} AS pe
                             WHERE pe.offeringid = $offeringid AND pe.roleid = $traineeeid AND pe.usercreated = $userid";


        }

        $enrolledseats = $DB->count_records_sql($enrolledsql);

        return $enrolledseats;
    }

    public function is_enrolled($programid, $userid) {
        global $DB;

        $sql = 'SELECT pe.id FROM {program_enrollments} as pe 
                  JOIN {tp_offerings} as tpo ON pe.offeringid=tpo.id 
                   AND date(FROM_UNIXTIME(tpo.enddate)) > CURDATE()
                 WHERE pe.programid=:programid AND pe.userid=:userid ';

        $enrolled = $DB->record_exists_sql($sql, ['programid' => $programid, 'userid' => $userid]);
        if($enrolled){
            return true;
        }
        return false;

    }

    public function delete_offering_sessions($offeringid) {
        global $DB;

        $result = $DB->delete_records('offering_sessions',array('offeringid' =>$offeringid));

        return $result;
    } 

    public function delete_offering_mapped_groups($offeringcode) {
        global $DB,$CFG;

        require_once($CFG->dirroot.'/group/lib.php');
        $sql = "SELECT id FROM {groups} WHERE idnumber = '$offeringcode'";
        $id = $DB->get_field_sql($sql);
        if($id){
            groups_delete_group($id);
        }
        return $id;
    } 
    
    public function update_group_idnumber($old,$new,$courseid) {
        global $DB,$CFG;

        if($DB->record_exists('groups',array('idnumber' => $old))) {

            $updatesql = "UPDATE {groups} SET  name = '$new' ,idnumber = '$new' WHERE courseid = $courseid AND idnumber = '$old'";

           $DB->execute($updatesql);

        } 

    } 

    public function is_current_user_enrolled_to_offering() {
        global $DB,$USER;

        $sql = 'SELECT pe.id FROM {program_enrollments} as pe 
                  JOIN {tp_offerings} as tpo ON pe.offeringid=tpo.id 
                   AND date(FROM_UNIXTIME(tpo.enddate)) > CURDATE()
                 WHERE pe.userid=:userid ';

        $enrolled = $DB->record_exists_sql($sql, ['userid' => $USER->id]);
        if($enrolled){
            return true;
        }
        return false;

    }

    public function add_update_elearning_schedule_program($data) {
        global $DB, $USER;

        $row = array();
        $systemcontext = context_system::instance();


        $traineeroleid = $DB->get_field('role', 'id', array('shortname' => 'trainee'));
        $row['id'] = $data->id;
        if($data->id > 0 && $DB->record_exists('program_enrollments',array('programid' => $data->trainingid, 'offeringid' => $data->id,'courseid'=>$data->courseid, 'roleid' => $traineeroleid))){
         
           
           $row['availableseats'] = $data->availableseats;
           $row['timemodified'] = time();
           $row['useremodified'] = $USER->id;
           $row['organization'] = $data->organization;
           try{
              $transaction = $DB->start_delegated_transaction();
              $record= $DB->update_record('tp_offerings', $row);
              $transaction->allow_commit();
              return $record;
            } catch(moodle_exception $e){
                $transaction->rollback($e);
             return false;

            }
        }
        $row['startdate'] = $data->startdate;
        $row['time'] = ($data->starttime['hours'] * 3600) + ($data->starttime['minutes'] * 60);
        $row['endtime'] = ($data->endtime['hours'] * 3600) + ($data->endtime['minutes'] * 60);
        $start = $data->startdate+$row['time'];
        $end = $data->startdate+$row['endtime'];
        $duration = abs($start-$end);
        $row['duration'] = $duration;
        $row['type'] = $data->type;
        $row['enddate'] = 0;
        $row['availableseats'] = $data->availableseats;
        $row['organization'] = $data->organization;
        $row['sellingprice'] = $data->sellingprice?$data->sellingprice:0;
        $row['actualprice'] = $data->actualprice?$data->actualprice:0;
        $row['trainingid'] = $data->trainingid;
        $row['trainingmethod'] = $data->trainingmethod;
        $row['halladdress'] = 0;

        try {
            $transaction = $DB->start_delegated_transaction();

            if($data->id > 0) {

                $offering = $DB->get_record('tp_offerings',array('id'=> $data->id));

                $courseid = (int) $DB->get_field('local_trainingprogram', 'courseid', ['id' => $offering->trainingid]);

                if($offering->trainingmethod =='online') {

                    if((int)$offering->meetingid != 0){

                        if((int)$offering->meetingtype == 1 && $offering->meetingid != 0 ) {
                            $zoomid = (int)$offering->meetingid;
                            zoom_delete_instance($zoomid);
                        }
                        if((int)$offering->meetingtype == 2 && $offering->meetingid != 0) {
                            $webexid = (int)$offering->meetingid;
                            webexactivity_delete_instance($webexid);
                        }

                        if((int)$offering->meetingtype == 3 && $offering->meetingid != 0) {
                            $teamid = (int)$offering->meetingid;
                            msteams_delete_instance($teamid);
                        }

                    }

                    $sectionid = (int) $DB->get_field_sql('SELECT id FROM {course_sections} WHERE course = '.$courseid.' AND section = '.$offering->id .'');

                   // course_delete_section($courseid,$sectionid);
                    $DB->delete_records('course_sections',array('course'=>$courseid, 'section' =>$offering->sections));
                    (new trainingprogram)->delete_offering_mapped_groups($offering->code);
                        
                 

                }

                if($offering->trainingmethod =='offline') {

                   
                    if(!is_null($offering->prequiz) && $offering->prequiz != 0) {

                        quiz_delete_instance($offering->prequiz);
                    }
                    if(!is_null($offering->postquiz) && $offering->postquiz != 0) {

                        quiz_delete_instance($offering->postquiz);
                    }
                    
                    $sectionid = (int) $DB->get_field_sql('SELECT sections FROM {tp_offerings} WHERE id = '.$offering->id .'');
                    $mod_name = 'attendance';
                    $attendancemoduleid =(int) $DB->get_field_sql("SELECT id FROM {modules} WHERE name = '$mod_name'");
                    $sql = 'SELECT com.instance FROM {course_modules} as com JOIN {course_sections} as cos ON com.section = cos.id AND com.course = cos.course WHERE  cos.course = '.$courseid.' AND cos.section = '.$sectionid.' AND com.module = '.$attendancemoduleid.'';
                    $attendanceid = (int)$DB->get_field_sql($sql);

                    if($attendanceid) {

                        attendance_delete_instance($attendanceid);
                    }

                    // course_delete_section($courseid,$sectionid);
                    $DB->delete_records('course_sections',array('course'=>$courseid, 'section' =>$offering->sections));
                    (new trainingprogram)->delete_offering_sessions($offering->id);
                    (new trainingprogram)->delete_offering_mapped_groups($offering->code);
                 
                }


                $row['sections'] = null;
                $row['meetingtype'] = 0;
                $row['meetingid'] = 0;
                $row['prequiz'] = null;
                $row['postquiz'] = null;
                $existingcode = $DB->get_field('tp_offerings','code',array('id' => $data->id));
                $code =substr($existingcode, -1);
                if($data->trainingmethod == 'elearning' && $code !='L'){
                    $updatedcode = substr($existingcode, 0, -1);
                    $row['code'] = $updatedcode.'L';
                }
                $record= $DB->update_record('tp_offerings', $row);
                $event = \local_trainingprogram\event\tpofferings_updated::create(array( 'context'=>$systemcontext, 'objectid' =>$data->id));
               $event->trigger();

            } else {

                $tpoid = $DB->get_field_sql('SELECT id FROM {tp_offerings} ORDER BY id DESC LIMIT 1');
                if ($tpoid) {
                    $autoincnum = $tpoid+1;
                } else {
                    $autoincnum = 1;
                }
                $num = sprintf("%'.02d", $autoincnum);
                $incnum = $num + 1;
                $tpodate = date('dmY',$data->startdate);
                $trmethod='L';
                $ofcode = $data->trainingid.'-'.$tpodate.'-'.$num.'-'.$trmethod;
                if($DB->record_exists('tp_offerings',array('code' => $ofcode))) {
                    $row['code'] = $data->trainingid.'-'.$tpodate.'-'.$incnum.'-'.$trmethod;
                } else {
                    $row['code'] = $data->trainingid.'-'.$tpodate.'-'.$num.'-'.$trmethod;
                }
              
              $record->id = $DB->insert_record('tp_offerings', $row);
              $event = \local_trainingprogram\event\tpofferings_created::create(array( 'context'=>$systemcontext, 'objectid' =>$record->id));
              $event->trigger();

            }

           
            
            $transaction->allow_commit();
            return $record;

        } catch(Exception $e) {
            $transaction->rollback($e);
            return false;
        }

    } 




    public function get_all_job_families_by_sectors($sectors) {
        global $DB;

        $sectors = $sectors;

         if(!empty($sectors)) {

            $sectorslist = is_array($sectors)?implode(',', $sectors):$sectors;

            $segmentdata = $DB->get_fieldset_sql('select id from {local_segment} where sectorid in ('.$sectorslist.')');

           if(COUNT($segmentdata) > 0) {
            $segmentlist = implode(',', $segmentdata);
            $jobfamilies=$DB->get_fieldset_sql('select id from {local_jobfamily} where segmentid in('.$segmentlist.',0)');
            }
            return $jobfamilies;

        }


    } 
  

    

}
