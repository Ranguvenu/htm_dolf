{"version":3,"file":"hallreserve.min.js","sources":["../src/hallreserve.js"],"sourcesContent":["/**\r\n * Add a create new group modal to the page.\r\n *\r\n * @module     local_hall/reserve\r\n * @class      NewCourse\r\n * @package    local_hall\r\n * @copyright  2022 Revanth kumar Grandhi\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['local_trainingprogram/dynamicform', 'jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui', 'core/templates'],\r\n        function(TPDynamicForm, $, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y, Templates ) {\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @param {int} contextid\r\n     *\r\n     * Each call to init gets it's own instance of this class.\r\n     */\r\n    var NewCategory = function(selector, contextid, categoryid, hallid, typeid) {\r\n\r\n        this.contextid = contextid;\r\n        this.categoryid = categoryid;\r\n        this.hallid = hallid;\r\n        this.typeid = typeid;\r\n        var self = this;\r\n        self.init(selector);\r\n    };\r\n\r\n    /**\r\n     * @var {Modal} modal\r\n     * @private\r\n     */\r\n    NewCategory.prototype.modal = null;\r\n\r\n    /**\r\n     * @var {int} contextid\r\n     * @private\r\n     */\r\n    NewCategory.prototype.contextid = -1;\r\n\r\n    /**\r\n     * Initialise the class.\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewCategory.prototype.init = function(selector) {\r\n        var self = this;\r\n        // Fetch the title string.\r\n            if (self.categoryid) {\r\n                var head =  Str.get_string('reservation', 'local_exams');\r\n            }else{\r\n               var head =  Str.get_string('reservation', 'local_exams');\r\n            }\r\n            return head.then(function(title) {\r\n                // Create the modal.\r\n                return ModalFactory.create({\r\n                    // type: ModalFactory.types.SAVE_CANCEL,\r\n                    title: title,\r\n                    body: self.getBody(),\r\n                });\r\n            }.bind(self)).then(function(modal) {\r\n                // Keep a reference to the modal.\r\n                self.modal = modal;\r\n                self.modal.getRoot().addClass('tphallreserve');\r\n                self.modal.show();\r\n                // Forms are big, we want a big modal.\r\n                self.modal.setLarge();\r\n\r\n                // We want to reset the form every time it is opened.\r\n                self.modal.getRoot().on(ModalEvents.hidden, function() {\r\n                    self.modal.setBody('');\r\n                    self.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\r\n                    setTimeout(function(){\r\n                        modal.destroy();\r\n                    }, 1000);\r\n                }.bind(this));\r\n\r\n                // We want to hide the submit buttons every time it is opened.\r\n                self.modal.getRoot().on(ModalEvents.shown, function() {\r\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\r\n                }.bind(this));\r\n\r\n\r\n                // We catch the modal save event, and use it to submit the form inside the modal.\r\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\r\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\r\n                // We also catch the form submit event and use it to submit the form with ajax.\r\n                self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\r\n                self.modal.getRoot().animate({\"right\":\"0%\"}, 500);\r\n                // self.modal.getRoot().on(ModalEvents.bodyRendered, (e) => {\r\n                //     $(\"select[name='halls']\").on('change', function(e){\r\n                //         var hallid = $(\"select[name='halls']\").val();\r\n                //         alert(hallid);\r\n                //         var params = {};\r\n                //         params.hallid = hallid;\r\n                //         params.examid = this.examid;\r\n                //         var promise = Ajax.call([{\r\n                //             methodname: 'local_hall_data',\r\n                //             args: params\r\n                //         }]);\r\n                //         promise[0].done(function(resp) {\r\n                //             $(\".selecthall\").html(resp.options);\r\n                //         }).fail(function() {\r\n                //             // do something with the exception\r\n                //              console.log('exception');\r\n                //         });                        \r\n                //     });  \r\n                // });\r\n                return this.modal;\r\n            }.bind(this));\r\n        // });\r\n    };\r\n\r\n    /**\r\n     * @method getBody\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewCategory.prototype.getBody = function(formdata) {\r\n        // var options = {};\r\n        // options.examid = 1;      \r\n        // return Templates.render('local_exams/testing',options).done(function(html, js) {\r\n        //     Templates.replaceNodeContents('targetcompetencypc', html, js);\r\n        // });\r\n        if (typeof formdata === \"undefined\") {\r\n            formdata = {};\r\n        }\r\n\r\n        params = {};\r\n        params.jsonformdata = JSON.stringify(formdata);\r\n        params.categoryid = this.categoryid;\r\n        params.hallid = this.hallid;\r\n        params.typeid = this.typeid;\r\n        // this.contextid = 1;\r\n        return Fragment.loadFragment('local_exams', 'listofhallsform', this.contextid, params);\r\n        // return Templates.render('local_exams/testing',options).done(function(html, js) {\r\n        //     Fragment.loadFragment('local_exams', 'listofhallsform', this.contextid, params);\r\n        //     Templates.replaceNodeContents('targetcompetencypc', html, js);\r\n        // });\r\n    };\r\n\r\n    /**\r\n     * @method handleFormSubmissionResponse\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewCategory.prototype.handleFormSubmissionResponse = function(formData) {\r\n            var params = {};\r\n            params.jsonformdata = formData;\r\n            params.typeid = this.typeid;\r\n            var promise = Ajax.call([{\r\n                methodname: 'local_hall_data',\r\n                args: params\r\n            }]);\r\n            promise[0].done(function(resp) {\r\n                $(\".selecthall\").html(resp.options);\r\n            }).fail(function() {\r\n                // do something with the exception\r\n                 console.log('exception');\r\n            });\r\n        // We could trigger an event instead.\r\n        // Yuk.\r\n        // Y.use('moodle-core-formchangechecker', function() {\r\n        //     M.core_formchangechecker.reset_form_dirty_state();\r\n        // });\r\n        // document.location.reload();\r\n    };\r\n\r\n    /**\r\n     * @method handleFormSubmissionFailure\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewCategory.prototype.handleFormSubmissionFailure = function(data) {\r\n        // Oh noes! Epic fail :(\r\n        // Ah wait - this is normal. We need to re-display the form with errors!\r\n        this.modal.setBody(this.getBody(data));\r\n    };\r\n\r\n    /**\r\n     * Private method\r\n     *\r\n     * @method submitFormAjax\r\n     * @private\r\n     * @param {Event} e Form submission event.\r\n     */\r\n    NewCategory.prototype.submitFormAjax = function(e) {\r\n        // We don't want to do a real form submission.\r\n        e.preventDefault();\r\n\r\n        // Convert all the form elements values to a serialised string.\r\n        var formData = this.modal.getRoot().find('form').serialize();\r\n        //console.log(this.contextid);\r\n        //console.log(JSON.stringify(formData));\r\n        // Now we can continue...\r\n        Ajax.call([{\r\n            methodname: 'local_hall_reservation',\r\n            //args: {evalid:this.evalid, contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\r\n            args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\r\n            done: this.handleFormSubmissionResponse.bind(this, formData),\r\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\r\n        }]);\r\n    };\r\n\r\n    /**\r\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\r\n     *\r\n     * @method submitForm\r\n     * @param {Event} e Form submission event.\r\n     * @private\r\n     */\r\n    NewCategory.prototype.submitForm = function(e) {\r\n        e.preventDefault();\r\n        var self = this;\r\n        self.modal.getRoot().find('form').submit();\r\n    };\r\n\r\n    return /** @alias module:local_course/newcourse */ {\r\n        // Public variables and functions.\r\n        /**\r\n         * Attach event listeners to initialise this module.\r\n         *\r\n         * @method init\r\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\r\n         * @param {int} contextid The contextid for the course.\r\n         * @return {Promise}\r\n         */\r\n        init: function(args) {\r\n            return new NewCategory(args.selector, args.contextid, args.categoryid, args.hallid, args.typeid);\r\n        },\r\n        load: function() {\r\n\r\n        },\r\n\r\n\r\n    };\r\n});\r\n"],"names":["define","TPDynamicForm","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","Templates","NewCategory","selector","contextid","categoryid","hallid","typeid","this","init","prototype","modal","self","head","get_string","then","title","create","body","getBody","bind","getRoot","addClass","show","setLarge","on","hidden","setBody","animate","setTimeout","destroy","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","formData","call","methodname","args","done","resp","html","options","fail","console","log","handleFormSubmissionFailure","data","e","preventDefault","find","serialize","submit","load"],"mappings":"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"}