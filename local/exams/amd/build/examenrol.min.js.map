{"version":3,"file":"examenrol.min.js","sources":["../src/examenrol.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport TPDynamicForm from 'local_trainingprogram/dynamicform';\nimport DynamicForm from 'core_form/dynamicform';\nimport {get_string as getString} from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport ModalForm from 'core_form/modalform';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n// import homepage from 'theme_academy/homepage';\n\nconst Selectors = {\n    actions: {\n        editexamenrol: '[data-action=\"editexamenrol\"]',\n    },\n};\n\n// let HomePage = new homepage();\nexport const init = () => {\n    document.addEventListener('click', function(e) {\n        e.stopImmediatePropagation();\n\n        let element = e.target.closest(Selectors.actions.editexamenrol);\n        if (element) {\n            e.preventDefault();\n            const title = element.getAttribute('data-id') ?\n                getString('editexamenrol', 'local_exams', element.getAttribute('data-name')) :\n                getString('editexamenrol', 'local_exams');\n            const form = new TPDynamicForm({\n                formClass: 'local_exams\\\\form\\\\examenrolform',\n                args: {id: element.getAttribute('data-id')},\n                modalConfig: {title},\n                returnFocus: element,\n            });\n            form.addEventListener(form.events.FORM_SUBMITTED, () => window.location.reload());\n            form.show();\n        }\n    });\n    /**\n     * If Assesment operator will enroll users to an exam profile.\n     * \n     */\n    let selectElement =  document.querySelector('.unenrolled_users');\n    const examid = selectElement.getAttribute('data-examid');\n    const productid = selectElement.getAttribute('data-productid');\n    const entitytype = selectElement.getAttribute('data-entitytype');\n    const refundtype = selectElement.getAttribute('data-refundtype');\n    const productprice = selectElement.getAttribute('data-productprice');\n    const ownedby = selectElement.getAttribute('data-ownedby');\n    const examname = selectElement.getAttribute('data-examname');\n    const profileid = selectElement.getAttribute('data-profileid');\n\n    let getcurrentuserrole =  document.querySelector('#currentuserrole');\n    var is_assessmentop = getcurrentuserrole.getAttribute('data-value');\n    \n    if(ownedby == 'CISI' && is_assessmentop == 'assessmentop') {\n        var mform = document.querySelector('.mform');\n        mform.style = 'opacity:0.5; pointer-events: none;cursor: not-allowed;';\n    }\n    $('.enrollusers').click(function (e) {\n        if (is_assessmentop == 'assessmentop') {\n        e.preventDefault();\n            /**\n             * If it is a paid exam get exam price\n             * \n             */\n            \n            // Required Parameters\n            const userarray = Array.from(selectElement.selectedOptions).map(option => option.value);\n            const userids = userarray.join()\n            const num_users = userarray.length;\n            const form = document.getElementById('user_un_assign');\n            const organization = document.getElementById('id_organizationusers');\n            const selectedOrganization = organization.value;\n            const selectedselectedOrganizationText = organization.options[organization.selectedIndex].text;\n\n            if(ownedby == 'CISI') {\n                var mform = document.querySelector('.mform');\n                mform.style = 'opacity:0.5; pointer-events: none;cursor: not-allowed;';\n            }else{\n                if (!selectedOrganization) {\n                    var error = getString('error');\n                    var message = getString('missingorg', 'local_exams');\n                    var ok = getString('ok');\n                    Notification.alert(error, message, ok);\n                }else{\n                    var params = {};\n                    params.productid = productid;\n                    params.userid = userids;\n                    params.entitytype = entitytype;\n                    params.refundtype = refundtype;\n                    params.productprice = productprice;\n                    // Strings parameter\n                    let strs = {};\n                    strs.productprice = productprice;\n                    strs.num_users = num_users;\n                    strs.examname = examname;\n                    if (params.productprice == 0) {\n                        \n                        var confrmstring = getString('examenrolment_confirm', 'local_exams', strs);\n                        ModalFactory.create({\n                            title: getString('examenrolment', 'local_exams'),\n                            type: ModalFactory.types.SAVE_CANCEL,\n                            body: confrmstring\n                        }).done(function(modal) {\n                            this.modal = modal;\n                            modal.setSaveButtonText(getString('erollusers', 'local_exams'));\n                            modal.getRoot().on(ModalEvents.save, function(e) {\n                                form.submit();\n                            }.bind(this));\n                            modal.show();\n                        }.bind(this));\n                    }else{\n                        var confrmstring = getString('paid_examenrolment_confirm', 'local_exams', strs);\n                        // User enrolment confirmation\n                        ModalFactory.create({\n                            title: getString('examenrolment', 'local_exams'),\n                            type: ModalFactory.types.SAVE_CANCEL,\n                            body: confrmstring\n                        }).done(function(modal) {\n                            this.modal = modal;\n                            modal.setSaveButtonText(getString('click_continue', 'local_exams'));\n                            modal.getRoot().on(ModalEvents.save, function(e) {\n                                e.preventDefault();\n                                // Fetch Exam Officials.\n                                var promise = Ajax.call([{\n                                    methodname: 'local_exams_get_org_officials',\n                                    args: {\n                                        orgid: selectedOrganization\n                                    },\n                                }]);\n                                promise[0].done(function (resp) {\n                                    console.log(resp);\n                                    ModalFactory.create({\n                                        title: getString('orgInvoceSummay', 'local_exams'),\n                                        type: ModalFactory.types.SAVE_CANCEL,\n                                        body: resp.officials,\n                                    }).done(function (modal) {\n                                        this.modal = modal;\n                                        modal.setSaveButtonText(getString('showinvoice', 'local_exams'));\n\n                                        modal.getRoot().on(ModalEvents.save, function(e) {\n                                            e.preventDefault();\n                                            const orgOfficial = document.querySelector('#id_org_official');\n                                            const selectedorgOfficial = orgOfficial.value;\n                                            console.log(selectedorgOfficial);\n                                            const selectedselectedorgOfficialText = orgOfficial.options[orgOfficial.selectedIndex].text;\n                                            if (selectedorgOfficial) {\n                                                var promise = Ajax.call([{\n                                                    methodname: 'local_exams_calculate_invoice',\n                                                    args: {\n                                                        productprice: productprice,\n                                                        num_users: num_users, \n                                                        orgid: selectedOrganization,\n                                                        org_officialid : selectedorgOfficial,\n                                                        examid : examid\n                                                    },\n                                                }]);\n                                                promise[0].done(function (resp) {\n                                                    console.log(resp);\n                                                    ModalFactory.create({\n                                                        title: getString('invoice', 'local_exams'),\n                                                        type: ModalFactory.types.SAVE_CANCEL,\n                                                        // body: getString('invoiceconfirm', 'local_exams', selectedselectedorgOfficialText),\n                                                        body: resp.invoice,\n                                                    }).done(function (modal) {\n                                                        modal.setSaveButtonText(getString('confirmsendinvoice', 'local_exams'));\n                                                        this.modal = modal;\n                                                        modal.getRoot().on(ModalEvents.save, function(e) {\n                                                            e.preventDefault();\n                                                            var promise = Ajax.call([{\n                                                                methodname: 'local_exams_send_invoice',\n                                                                args: {\n                                                                    productprice: productprice,\n                                                                    // num_users: num_users,\n                                                                    users : userids,\n                                                                    profileid : profileid,\n                                                                    examid: examid,\n                                                                    productid : productid,\n                                                                    orgid: selectedOrganization,\n                                                                    orgofficial : selectedorgOfficial\n                                                                },\n                                                            }]);\n                                                            promise[0].done(function (resp) {\n                                                                console.log(resp);\n                                                                if (resp.status == 'success') {\n                                                                    $('#invoice-container').empty();\n                                                                    $('#invoice-container').append(resp.msg);\n                                                                    form.submit();\n                                                                    this.modal.destroy();\n                                                                }\n                                                            }).fail(function(exception) {\n                                                                var error = getString('exception', 'local_exams');\n                                                                var ok = getString('ok');\n                                                                console.log(exception);\n                                                                Notification.alert(error, exception.message, ok);\n                                                            });\n                                                        }.bind(this));\n                                                        modal.show();\n                                                    }.bind(this));\n                                                });\n                                            }\n                                        }.bind(this));\n                                        modal.show();\n                                    }.bind(this));\n                                })\n                            }.bind(this));\n                            modal.show();\n                        }.bind(this));\n                    }\n                }\n            }\n        }\n    });\n    // END\n};\n"],"names":["Selectors","editexamenrol","document","addEventListener","e","stopImmediatePropagation","element","target","closest","preventDefault","title","getAttribute","form","TPDynamicForm","formClass","args","id","modalConfig","returnFocus","events","FORM_SUBMITTED","window","location","reload","show","selectElement","querySelector","examid","productid","entitytype","refundtype","productprice","ownedby","examname","profileid","is_assessmentop","style","$","click","userarray","Array","from","selectedOptions","map","option","value","userids","join","num_users","length","getElementById","organization","selectedOrganization","options","selectedIndex","text","params","userid","strs","confrmstring","create","type","ModalFactory","types","SAVE_CANCEL","body","done","modal","setSaveButtonText","getRoot","on","ModalEvents","save","submit","bind","this","Ajax","call","methodname","orgid","resp","console","log","officials","orgOfficial","selectedorgOfficial","org_officialid","invoice","users","orgofficial","status","empty","append","msg","destroy","fail","exception","error","ok","alert","message"],"mappings":"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"}