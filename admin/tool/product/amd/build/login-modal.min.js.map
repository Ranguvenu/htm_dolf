{"version":3,"file":"login-modal.min.js","sources":["../src/login-modal.js"],"sourcesContent":["define(['jquery', 'core/notification', 'core/ajax', 'core/custom_interaction_events', 'core/modal', 'core/modal_registry', \"theme_academy/homepage\"],\r\n        function($, Notification, Ajax, CustomEvents, Modal, ModalRegistry, HomePageJs) {\r\n\r\n    var registered = false;\r\n    var SELECTORS = {\r\n        LOGIN_BUTTON: '[data-action=\"login\"]',\r\n    };\r\n\r\n    /**\r\n     * Constructor for the Modal.\r\n     *\r\n     * @param {object} root The root jQuery element for the modal\r\n     */\r\n    var ModalLogin = function(root) {\r\n        Modal.call(this, root);\r\n\r\n        if (!this.getFooter().find(SELECTORS.LOGIN_BUTTON).length) {\r\n            Notification.exception({message: 'No login button found'});\r\n        }\r\n\r\n        // if (!this.getFooter().find(SELECTORS.CANCEL_BUTTON).length) {\r\n        //     Notification.exception({message: 'No cancel button found'});\r\n        // }\r\n    };\r\n\r\n    ModalLogin.TYPE = 'tool_product-login';\r\n    ModalLogin.prototype = Object.create(Modal.prototype);\r\n    ModalLogin.prototype.constructor = ModalLogin;\r\n\r\n    /**\r\n     * Set up all of the event handling for the modal.\r\n     *\r\n     * @method registerEventListeners\r\n     */\r\n    ModalLogin.prototype.registerEventListeners = function() {\r\n        // Apply parent event listeners.\r\n        Modal.prototype.registerEventListeners.call(this);\r\n\r\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.LOGIN_BUTTON, function(e, data) {\r\n          //   // Add your logic for when the login button is clicked. This could include the form validation,\r\n          //   // loading animations, error handling etc.\r\n         \t// console.log(\"data\", $(\"#inputPassword\").val());\r\n             $('[data-loader=login]').removeClass('d-none');  \r\n            let promise = Ajax.call([{\r\n            \tmethodname: 'tool_product_user_login',\r\n\t            args: {\r\n\t            \tusername: $(\"#username\").val(),\r\n                    password: $(\"#inputPassword\").val()\r\n\t            }\r\n\t        }]);\r\n\t        promise[0].done(function(response) {\r\n                let homepage = new HomePageJs();\r\n\t            if(response.success){\r\n                    console.log(window.location.pathname);\r\n                   // alert(window.location.pathnam);\r\n                    if(window.location.pathname == '/local/exams/exams_qualification_details.php'){\r\n                        location.replace(window.location.href);\r\n                    }else if(window.location.pathname == '/local/trainingprogram/programcourseoverview.php'){\r\n                        location.replace(window.location.href);\r\n                    }else{\r\n                        location.replace($(\"#redirecturi\").val());\r\n                    }\r\n                    \r\n                }else{\r\n                    $('[data-loader=login]').addClass('d-none');  \r\n                    homepage.confirmbox(response.error);\r\n                }\r\n\t        }).fail(function( error ) {\r\n                let homepage = new HomePageJs();\r\n                    homepage.confirmbox(error.message);\r\n\t        });\r\n        }.bind(this));\r\n\r\n        // this.getModal().on(CustomEvents.events.activate, SELECTORS.CANCEL_BUTTON, function(e, data) {\r\n        //     // Add your logic for when the cancel button is clicked\r\n        //         //this.Modal.setBody('');\r\n        //         this.hide();\r\n        // }.bind(this));\r\n    };\r\n\r\n    // Automatically register with the modal registry the first time this module is imported so that you can create modals\r\n    // of this type using the modal factory.\r\n    if (!registered) {\r\n        ModalRegistry.register(ModalLogin.TYPE, ModalLogin, 'tool_product/login-modal');\r\n        registered = true;\r\n    }\r\n\r\n    return ModalLogin;\r\n});\r\n"],"names":["define","$","Notification","Ajax","CustomEvents","Modal","ModalRegistry","HomePageJs","registered","SELECTORS","ModalLogin","root","call","this","getFooter","find","length","exception","message","TYPE","prototype","Object","create","constructor","registerEventListeners","getModal","on","events","activate","e","data","removeClass","methodname","args","username","val","password","done","response","homepage","success","console","log","window","location","pathname","replace","href","addClass","confirmbox","error","fail","bind","register"],"mappings":"AAAAA,kCAAO,CAAC,SAAU,oBAAqB,YAAa,iCAAkC,aAAc,sBAAuB,2BACnH,SAASC,EAAGC,aAAcC,KAAMC,aAAcC,MAAOC,cAAeC,gBAEpEC,YAAa,EACbC,uBACc,wBAQdC,WAAa,SAASC,MACtBN,MAAMO,KAAKC,KAAMF,MAEZE,KAAKC,YAAYC,KAAKN,wBAAwBO,QAC/Cd,aAAae,UAAU,CAACC,QAAS,kCAQzCR,WAAWS,KAAO,sBAClBT,WAAWU,UAAYC,OAAOC,OAAOjB,MAAMe,YACtBG,YAAcb,WAOnCA,WAAWU,UAAUI,uBAAyB,WAE1CnB,MAAMe,UAAUI,uBAAuBZ,KAAKC,WAEvCY,WAAWC,GAAGtB,aAAauB,OAAOC,SAAUnB,uBAAwB,SAASoB,EAAGC,MAIhF7B,EAAE,uBAAuB8B,YAAY,UACxB5B,KAAKS,KAAK,CAAC,CACxBoB,WAAY,0BACZC,KAAM,CACLC,SAAUjC,EAAE,aAAakC,MACnBC,SAAUnC,EAAE,kBAAkBkC,UAGjC,GAAGE,MAAK,SAASC,cACdC,SAAW,IAAIhC,WACnB+B,SAASE,SACLC,QAAQC,IAAIC,OAAOC,SAASC,UAEG,gDAA5BF,OAAOC,SAASC,UAEkB,oDAA5BF,OAAOC,SAASC,SADrBD,SAASE,QAAQH,OAAOC,SAASG,MAIjCH,SAASE,QAAQ7C,EAAE,gBAAgBkC,SAIvClC,EAAE,uBAAuB+C,SAAS,UAClCT,SAASU,WAAWX,SAASY,WAErCC,MAAK,SAAUD,QACI,IAAI3C,YACN0C,WAAWC,MAAMhC,aAEpCkC,KAAKvC,QAWNL,aACDF,cAAc+C,SAAS3C,WAAWS,KAAMT,WAAY,4BACpDF,YAAa,GAGVE"}